syntax = "proto3";

package risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2;

option go_package = "git.risenlighten.com/lasvsim/simulation_task_kratos/api/simulation/v2;v2";

import "risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.proto";
import "google/api/field_behavior.proto";

/*
  联合仿真服务
  以下是错误码定义:
	StartErrorCode    = -100
	TaskNotExistCode  = -200
	StopErrorCode     = -300
	MapErrorCode      = -400
	NextStepErrorCode = -500
	VehicleErrorCode  = -600
	ErrorCode         = -800

	仿真状态码:
	0    : 待开始
	1-99 : 运行中
	100  : 已完成
	-1   : 运行错误
	-100 : 任务非正常终止
*/
service SimulationV2 {
  // 开始任务, 任务初始化
  rpc Start(StartSimulationReq) returns (StartSimulationRes);
  // 执行仿真步骤
  rpc NextStep(NextStepReq) returns (NextStepRes);
  // 重置仿真
  rpc ResetSimulation(ResetSimulationReq) returns (ResetSimulationRes);
  // 强制结束仿真
  rpc Stop(StopSimulationReq) returns (StopSimulationRes);

  // 获取全量地图
  rpc GetMap(GetMapReq) returns (GetMapRes);
  // 获取全量交通流信息(车辆)
  rpc GetAllTrafficPart(GetAllTrafficPartReq) returns (GetAllTrafficPartRes);

  // 修改车辆状态, lon_acc:纵向加速度, ste_wheel: 方向盘转速
  rpc SetVehicleControl(SetVehicleControlReq) returns (SetVehicleControlRes);
  // 根据id获取自测车辆信息
  rpc GetVehicle(GetVehicleReq) returns (GetVehicleRes);

  // 获取仿真结果数据 map<string, [][]float64> 多层嵌套结构
  rpc GetResults(GetResultsReq) returns (GetResultsRes);

  // 根据LinkID获取link信息
  rpc GetLink(GetLinkReq) returns (GetLinkRes);
  // 根据LaneID获取lane信息
  rpc GetLane(GetLaneReq) returns (GetLaneRes);
  // 根据junctionID获取junction信息
  rpc GetJunction(GetJunctionReq) returns (GetJunctionRes);
  // 根据segmentID获取segment信息
  rpc GetSegment(GetSegmentReq) returns (GetSegmentRes);
}

message ErrorMsg {
  int32 code = 1;
  string msg = 2;
}

// 基础信息
message BaseInfo {
  // 长度
  double Length = 1;
  // 宽度
  double Width = 2;
  // 高度
  double Height = 3;
  // 重量
  double Weight = 4;
  // 最大减速度
  double max_dec = 5;
  // 最大加速度
  double max_acc = 6;
}

// 物体位置等信息描述
message Position {
  // 坐标点
  Point point = 1;
  // 物体朝向
  double phi = 2;
  // 所处link id
  string link_id = 3;
  // 距离link终点的长度
  double dis_to_link_end = 4;
  // 所处lane id
  string lane_id = 5;
  // 所处segment id
  string segment_id = 6;
  // 所处junction id
  string junction_id = 7;
}

// 动态信息
message MovingInfo {
  // 物体中心所在位置
  Position position = 1;
  // 时间戳
  int64 timestamp = 2;
  // 纵向速度
  double u = 3;
  // 纵向加速度
  double lon_acc = 4;
  // 横向速度
  double v = 5;
  // 横向加速度
  double lat_acc = 6;
  // 角速度
  double w = 7;
  // 角加速度
  double w_acc = 8;
}

// 动态交通参与对象
message MovingObj {
  string id = 1;
  // 基础信息
  BaseInfo base_info = 2;
  // 运动相关信息
  MovingInfo moving_info = 3;
  // 运动物体类型，如vehicle, bicycle, pedestrian等
  string type = 4;
}

// 自测车辆
message Vehicle {
  // 自车信息
  MovingObj info = 1;
  // 感知到的周围动态交通参与者信息
  repeated MovingObj around_moving_objs = 2;
}

message VehicleControl {
  // 纵向加速度
  double lon_acc = 1;
  // 方向盘转角
  double ste_wheel = 2;
}

// 全量地图信息
message Map {
  // junctionMap
  map<string, Junction> junction_map = 1;
  // SegmentMap
  map<string, Segment> segment_map = 2;
  // LinkMap
  map<string, Link> link_map = 3;
  // LaneMap
  map<string, Lane> lane_map = 4;
  // CrosswalkMap
  map<string, Crosswalk> crosswalk_map = 5;
  // StopLineMap
  map<string, Stopline> stop_line_map = 6;
}

message StartSimulationReq {
  // 地图ID
  string map_id = 1;
  // 起点信息
  Position origin = 2;
  // 结束点信息
  Position destination = 3;
}

message StartSimulationRes {
  string simulation_id = 1;
  ErrorMsg error = 2;
}

message NextStepReq { string simulation_id = 1 [ (google.api.field_behavior) = REQUIRED ]; }

message SimulationState {
  int32 progress = 1;
  string msg = 2;
}

message NextStepRes {
  SimulationState state = 1;
  ErrorMsg error = 2;
}

message ResetSimulationReq { string simulation_id = 1 [ (google.api.field_behavior) = REQUIRED ]; }

message ResetSimulationRes {
  string simulation_id = 1;
  ErrorMsg error = 2;
}

message StopSimulationReq { string simulation_id = 2[ (google.api.field_behavior) = REQUIRED ]; }

message StopSimulationRes {
  SimulationState state = 1;
  ErrorMsg error = 2;
}

message GetMapReq { string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ]; }

message GetMapRes {
  ErrorMsg error = 1;
  Map map = 2;
}

message GetAllTrafficPartReq { string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ]; }

message GetAllTrafficPartRes {
  ErrorMsg error = 1;
  repeated MovingObj list = 2;
}

message SetVehicleControlReq {
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
  // 纵向加速度
  double lon_acc = 3;
  // 方向盘转角
  double ste_wheel = 4;
}

message SetVehicleControlRes {
  ErrorMsg error = 1;
  Vehicle vehicle = 2;
}


message GetVehicleReq {
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  string vehicle_id = 2[ (google.api.field_behavior) = REQUIRED ];
}

message GetVehicleRes {
  ErrorMsg error = 1;
  Vehicle vehicle = 2;
}


message GetResultsReq {
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
}

message GetResultsRes {
  ErrorMsg error = 1;
  map<string, arrays> results = 2;

  message item {
    repeated double r = 1;
  }

  message arrays {
    repeated item arr = 1;
  }
}


message GetLinkReq {
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  string link_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetLinkRes {
  ErrorMsg error = 1;
  Link link = 2;
}


message GetLaneReq {
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  string lane_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetLaneRes {
  ErrorMsg error = 1;
  Lane lane = 2;
}


message GetJunctionReq {
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  string junction_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetJunctionRes {
  ErrorMsg error = 1;
  Junction junction = 2;
}


message GetSegmentReq {
  string simulation_id = 1[ (google.api.field_behavior) = REQUIRED ];
  string segment_id = 2[ (google.api.field_behavior) = REQUIRED ];
}
message GetSegmentRes {
  ErrorMsg error = 1;
  Segment segment = 2;
}


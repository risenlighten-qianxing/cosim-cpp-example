# Copyright 2018 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# cmake build file for C++ helloworld example.
# Assumes protobuf and gRPC have been installed using cmake.
# See cmake_externalproject/CMakeLists.txt for all-in-one cmake build
# that automatically builds all the dependencies before building helloworld.

cmake_minimum_required(VERSION 3.8)

project(HelloWorld C CXX)

set(WORKSPACE "/Users/sq_luozhihong/data/temp/cpp_grpc")

include(./cmake/common.cmake)

# Proto file
get_filename_component(hw_proto "./protos/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.proto" ABSOLUTE)
get_filename_component(hw2_proto "./protos/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/simulation.proto" ABSOLUTE)
get_filename_component(hw_proto_path "${hw_proto}" PATH)
get_filename_component(hw2_proto_path "${hw2_proto}" PATH)

file(GLOB_RECURSE PROTOS protos/*.proto)

foreach(PROTOFILE ${PROTOS})
  get_filename_component(FIL_WE ${PROTOFILE} NAME_WE)
  STRING(REGEX REPLACE "^${WORKSPACE}/protos/" "" RELATIVEPATH ${PROTOFILE}) # 移除字符串前缀
  string(REGEX REPLACE ".proto" "" RELATIVENAME ${RELATIVEPATH}) # 移除字符串后缀

  set(grpc_srcs "${CMAKE_CURRENT_BINARY_DIR}/${RELATIVENAME}.pb.cc")
  set(grpc_hdrs "${CMAKE_CURRENT_BINARY_DIR}/${RELATIVENAME}.pb.h")
  set(proto_srcs "${CMAKE_CURRENT_BINARY_DIR}/${RELATIVENAME}.grpc.pb.cc")
  set(proto_hdrs "${CMAKE_CURRENT_BINARY_DIR}/${RELATIVENAME}.grpc.pb.h")

  # 生成
  add_custom_command(
      OUTPUT "${grpc_srcs}.pb.cc" "${grpc_srcs}.pb.h" "${grpc_srcs}.grpc.pb.cc" "${grpc_srcs}.grpc.pb.h" 
      COMMAND ${_PROTOBUF_PROTOC}
      ARGS --grpc_out "${CMAKE_CURRENT_BINARY_DIR}"
        --cpp_out "${CMAKE_CURRENT_BINARY_DIR}"
        --proto_path "${WORKSPACE}/protos"
        --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}"
        "${PROTOFILE}"
      DEPENDS "${PROTOFILE}")

  message(">>>>>>>>>>>${grpc_srcs}")
  # include_directories("${CMAKE_CURRENT_BINARY_DIR}")
  # STRING(REGEX REPLACE ".+/(.+)\\..*" "\\1" FILE_NAME ${PROTOFILE})
  # string(REGEX REPLACE "/" "_" LIB_NAME ${RELATIVENAME}) # 移除字符串后缀
  # add_library(${FILE_NAME}
  #   ${grpc_srcs}
  #   ${grpc_hdrs}
  #   ${proto_srcs}
  #   ${proto_hdrs})
  # target_link_libraries(${FILE_NAME}
  #   ${_REFLECTION}
  #   ${_GRPC_GRPCPP}
  #   ${_PROTOBUF_LIBPROTOBUF})
endforeach()

include_directories("${CMAKE_CURRENT_BINARY_DIR}")


add_library(hdmap_grpc
  /Users/sq_luozhihong/data/temp/cpp_grpc/cmake/build/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.pb.cc
  /Users/sq_luozhihong/data/temp/cpp_grpc/cmake/build/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.pb.h
  /Users/sq_luozhihong/data/temp/cpp_grpc/cmake/build/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.grpc.pb.cc
  /Users/sq_luozhihong/data/temp/cpp_grpc/cmake/build/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.grpc.pb.h)
target_link_libraries(hdmap_grpc
  ${_REFLECTION}
  ${_GRPC_GRPCPP}
  ${_PROTOBUF_LIBPROTOBUF})

# foreach(PROTOFILE ${PROTOS})
#   get_filename_component(FIL_WE ${PROTOFILE} NAME_WE)
#   STRING(REGEX REPLACE "^${WORKSPACE}/protos/" "" RELATIVEPATH ${PROTOFILE}) # 移除字符串前缀
#   string(REGEX REPLACE ".proto" "" RELATIVENAME ${RELATIVEPATH}) # 移除字符串后缀

#   set(grpc_srcs "${CMAKE_CURRENT_BINARY_DIR}/${RELATIVENAME}.pb.cc")
#   set(grpc_hdrs "${CMAKE_CURRENT_BINARY_DIR}/${RELATIVENAME}.pb.h")
#   set(proto_srcs "${CMAKE_CURRENT_BINARY_DIR}/${RELATIVENAME}.grpc.pb.cc")
#   set(proto_hdrs "${CMAKE_CURRENT_BINARY_DIR}/${RELATIVENAME}.grpc.pb.h")
#   message(">>>>>>>>>>>${grpc_srcs}")
#   include_directories("${CMAKE_CURRENT_BINARY_DIR}")
#   STRING(REGEX REPLACE ".+/(.+)\\..*" "\\1" FILE_NAME ${PROTOFILE})
#   string(REGEX REPLACE "/" "_" LIB_NAME ${RELATIVENAME}) # 移除字符串后缀
#   add_library(${LIB_NAME}_grpc SHARED
#     ${grpc_srcs}
#     ${grpc_hdrs}
#     ${proto_srcs}
#     ${proto_hdrs})
#   target_link_libraries(${LIB_NAME}_grpc
#     ${_REFLECTION}
#     ${_GRPC_GRPCPP}
#     ${_PROTOBUF_LIBPROTOBUF})
# endforeach()



# Generated sources
set(hw_proto_srcs "${CMAKE_CURRENT_BINARY_DIR}/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.pb.cc")
set(hw_proto_hdrs "${CMAKE_CURRENT_BINARY_DIR}/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.pb.h")
set(hw_grpc_srcs "${CMAKE_CURRENT_BINARY_DIR}/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.grpc.pb.cc")
set(hw_grpc_hdrs "${CMAKE_CURRENT_BINARY_DIR}/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.grpc.pb.h")
# Generated sources
set(hw2_proto_srcs "${CMAKE_CURRENT_BINARY_DIR}/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/simulation.pb.cc")
set(hw2_proto_hdrs "${CMAKE_CURRENT_BINARY_DIR}/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/simulation.pb.h")
set(hw2_grpc_srcs "${CMAKE_CURRENT_BINARY_DIR}/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/simulation.grpc.pb.cc")
set(hw2_grpc_hdrs "${CMAKE_CURRENT_BINARY_DIR}/risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/simulation.grpc.pb.h")

# Include generated *.pb.h files
# include_directories("${CMAKE_CURRENT_BINARY_DIR}")

# Targets greeter_[async_](client|server)
foreach(_target
  main)
  add_executable(${_target} "${_target}.cpp")
  target_link_libraries(${_target}
    hw_grpc_proto
    absl::flags
    absl::flags_parse
    ${_REFLECTION}
    ${_GRPC_GRPCPP}
    ${_PROTOBUF_LIBPROTOBUF})
endforeach()

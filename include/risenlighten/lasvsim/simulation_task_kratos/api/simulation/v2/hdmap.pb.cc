// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.proto

#include "risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace risenlighten {
namespace lasvsim {
namespace simulation_task_kratos {
namespace api {
namespace simulation {
namespace v2 {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Junction::Junction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.junction_link_ids_)*/{}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_.junction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JunctionDefaultTypeInternal() {}
  union {
    Junction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JunctionDefaultTypeInternal _Junction_default_instance_;
PROTOBUF_CONSTEXPR Segment::Segment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ordered_link_ids_)*/{}
  , /*decltype(_impl_.segment_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_junction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_junction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentDefaultTypeInternal() {}
  union {
    Segment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentDefaultTypeInternal _Segment_default_instance_;
PROTOBUF_CONSTEXPR Link::Link(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ordered_lane_ids_)*/{}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_.right_shape_)*/{}
  , /*decltype(_impl_.link_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segment_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkDefaultTypeInternal _Link_default_instance_;
PROTOBUF_CONSTEXPR Sign::Sign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.turn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignDefaultTypeInternal() {}
  union {
    Sign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignDefaultTypeInternal _Sign_default_instance_;
PROTOBUF_CONSTEXPR Lane::Lane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_.connect_link_ids_)*/{}
  , /*decltype(_impl_.center_line_)*/{}
  , /*decltype(_impl_.lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.link_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/nullptr
  , /*decltype(_impl_.lane_offset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDefaultTypeInternal _Lane_default_instance_;
PROTOBUF_CONSTEXPR Crosswalk::Crosswalk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_.crosswalk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CrosswalkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrosswalkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrosswalkDefaultTypeInternal() {}
  union {
    Crosswalk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrosswalkDefaultTypeInternal _Crosswalk_default_instance_;
PROTOBUF_CONSTEXPR Stopline::Stopline(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_.obj_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoplineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoplineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoplineDefaultTypeInternal() {}
  union {
    Stopline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoplineDefaultTypeInternal _Stopline_default_instance_;
PROTOBUF_CONSTEXPR Hdtrafficmap::Hdtrafficmap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.junctions_)*/{}
  , /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_.lanes_)*/{}
  , /*decltype(_impl_.crosswalks_)*/{}
  , /*decltype(_impl_.stoplines_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HdtrafficmapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HdtrafficmapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HdtrafficmapDefaultTypeInternal() {}
  union {
    Hdtrafficmap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HdtrafficmapDefaultTypeInternal _Hdtrafficmap_default_instance_;
}  // namespace v2
}  // namespace simulation
}  // namespace api
}  // namespace simulation_task_kratos
}  // namespace lasvsim
}  // namespace risenlighten
static ::_pb::Metadata file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto = nullptr;

const uint32_t TableStruct_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Junction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Junction, _impl_.junction_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Junction, _impl_.junction_link_ids_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Junction, _impl_.shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment, _impl_.segment_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment, _impl_.ordered_link_ids_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment, _impl_.start_junction_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment, _impl_.end_junction_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment, _impl_.length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link, _impl_.link_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link, _impl_.ordered_lane_ids_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link, _impl_.right_shape_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link, _impl_.segment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign, _impl_.turn_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign, _impl_.heading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.line_type_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.line_color_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.lane_offset_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.link_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.connect_link_ids_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane, _impl_.center_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Crosswalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Crosswalk, _impl_.crosswalk_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Crosswalk, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Crosswalk, _impl_.shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Stopline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Stopline, _impl_.obj_id_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Stopline, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Stopline, _impl_.shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap, _impl_.junctions_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap, _impl_.segments_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap, _impl_.links_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap, _impl_.lanes_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap, _impl_.crosswalks_),
  PROTOBUF_FIELD_OFFSET(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap, _impl_.stoplines_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point)},
  { 8, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Junction)},
  { 17, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment)},
  { 29, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link)},
  { 40, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign)},
  { 49, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane)},
  { 65, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Crosswalk)},
  { 74, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Stopline)},
  { 83, -1, -1, sizeof(::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Point_default_instance_._instance,
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Junction_default_instance_._instance,
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Segment_default_instance_._instance,
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Link_default_instance_._instance,
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Sign_default_instance_._instance,
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Lane_default_instance_._instance,
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Crosswalk_default_instance_._instance,
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Stopline_default_instance_._instance,
  &::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::_Hdtrafficmap_default_instance_._instance,
};

const char descriptor_table_protodef_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nIrisenlighten/lasvsim/simulation_task_k"
  "ratos/api/simulation/v2/hdmap.proto\022=ris"
  "enlighten.lasvsim.simulation_task_kratos"
  ".api.simulation.v2\"\035\n\005Point\022\t\n\001x\030\001 \001(\001\022\t"
  "\n\001y\030\002 \001(\001\"\217\001\n\010Junction\022\023\n\013junction_id\030\001 "
  "\001(\t\022\031\n\021junction_link_ids\030\002 \003(\t\022S\n\005shape\030"
  "\003 \003(\0132D.risenlighten.lasvsim.simulation_"
  "task_kratos.api.simulation.v2.Point\"\211\001\n\007"
  "Segment\022\022\n\nsegment_id\030\001 \001(\t\022\014\n\004name\030\002 \001("
  "\t\022\030\n\020ordered_link_ids\030\003 \003(\t\022\031\n\021start_jun"
  "ction_id\030\004 \001(\t\022\027\n\017end_junction_id\030\005 \001(\t\022"
  "\016\n\006length\030\006 \001(\001\"\365\001\n\004Link\022\017\n\007link_id\030\001 \001("
  "\t\022\030\n\020ordered_lane_ids\030\002 \003(\t\022S\n\005shape\030\003 \003"
  "(\0132D.risenlighten.lasvsim.simulation_tas"
  "k_kratos.api.simulation.v2.Point\022Y\n\013righ"
  "t_shape\030\004 \003(\0132D.risenlighten.lasvsim.sim"
  "ulation_task_kratos.api.simulation.v2.Po"
  "int\022\022\n\nsegment_id\030\005 \001(\t\"}\n\004Sign\022\014\n\004turn\030"
  "\001 \001(\t\022V\n\010position\030\002 \001(\0132D.risenlighten.l"
  "asvsim.simulation_task_kratos.api.simula"
  "tion.v2.Point\022\017\n\007heading\030\003 \001(\001\"\217\003\n\004Lane\022"
  "\017\n\007lane_id\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\021\n\tline_t"
  "ype\030\003 \001(\t\022\022\n\nline_color\030\004 \001(\t\022S\n\005shape\030\005"
  " \003(\0132D.risenlighten.lasvsim.simulation_t"
  "ask_kratos.api.simulation.v2.Point\022\023\n\013la"
  "ne_offset\030\006 \001(\r\022\017\n\007link_id\030\007 \001(\t\022Q\n\004sign"
  "\030\010 \001(\0132C.risenlighten.lasvsim.simulation"
  "_task_kratos.api.simulation.v2.Sign\022\030\n\020c"
  "onnect_link_ids\030\t \003(\t\022Y\n\013center_line\030\n \003"
  "(\0132D.risenlighten.lasvsim.simulation_tas"
  "k_kratos.api.simulation.v2.Point\"\204\001\n\tCro"
  "sswalk\022\024\n\014crosswalk_id\030\001 \001(\t\022\014\n\004name\030\002 \001"
  "(\t\022S\n\005shape\030\003 \003(\0132D.risenlighten.lasvsim"
  ".simulation_task_kratos.api.simulation.v"
  "2.Point\"}\n\010Stopline\022\016\n\006obj_id\030\001 \001(\t\022\014\n\004t"
  "ype\030\002 \001(\t\022S\n\005shape\030\003 \003(\0132D.risenlighten."
  "lasvsim.simulation_task_kratos.api.simul"
  "ation.v2.Point\"\246\004\n\014Hdtrafficmap\022Z\n\tjunct"
  "ions\030\001 \003(\0132G.risenlighten.lasvsim.simula"
  "tion_task_kratos.api.simulation.v2.Junct"
  "ion\022X\n\010segments\030\002 \003(\0132F.risenlighten.las"
  "vsim.simulation_task_kratos.api.simulati"
  "on.v2.Segment\022R\n\005links\030\003 \003(\0132C.risenligh"
  "ten.lasvsim.simulation_task_kratos.api.s"
  "imulation.v2.Link\022R\n\005lanes\030\004 \003(\0132C.risen"
  "lighten.lasvsim.simulation_task_kratos.a"
  "pi.simulation.v2.Lane\022\\\n\ncrosswalks\030\005 \003("
  "\0132H.risenlighten.lasvsim.simulation_task"
  "_kratos.api.simulation.v2.Crosswalk\022Z\n\ts"
  "toplines\030\006 \003(\0132G.risenlighten.lasvsim.si"
  "mulation_task_kratos.api.simulation.v2.S"
  "toplineBJZHgit.risenlighten.com/lasvsim/"
  "simulation_task_kratos/api/simulation/v2"
  ";v2b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto = {
    false, false, 2131, descriptor_table_protodef_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto,
    "risenlighten/lasvsim/simulation_task_kratos/api/simulation/v2/hdmap.proto",
    &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto::offsets,
    file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto, file_level_enum_descriptors_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto,
    file_level_service_descriptors_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter() {
  return &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto(&descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto);
namespace risenlighten {
namespace lasvsim {
namespace simulation_task_kratos {
namespace api {
namespace simulation {
namespace v2 {

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[0]);
}

// ===================================================================

class Junction::_Internal {
 public:
};

Junction::Junction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
}
Junction::Junction(const Junction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Junction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_link_ids_){from._impl_.junction_link_ids_}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , decltype(_impl_.junction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.junction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.junction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_junction_id().empty()) {
    _this->_impl_.junction_id_.Set(from._internal_junction_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
}

inline void Junction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_link_ids_){arena}
    , decltype(_impl_.shape_){arena}
    , decltype(_impl_.junction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.junction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.junction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Junction::~Junction() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Junction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.junction_link_ids_.~RepeatedPtrField();
  _impl_.shape_.~RepeatedPtrField();
  _impl_.junction_id_.Destroy();
}

void Junction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Junction::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.junction_link_ids_.Clear();
  _impl_.shape_.Clear();
  _impl_.junction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Junction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string junction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_junction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction.junction_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string junction_link_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_junction_link_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction.junction_link_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Junction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string junction_id = 1;
  if (!this->_internal_junction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_junction_id().data(), static_cast<int>(this->_internal_junction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction.junction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_junction_id(), target);
  }

  // repeated string junction_link_ids = 2;
  for (int i = 0, n = this->_internal_junction_link_ids_size(); i < n; i++) {
    const auto& s = this->_internal_junction_link_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction.junction_link_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
  return target;
}

size_t Junction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string junction_link_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.junction_link_ids_.size());
  for (int i = 0, n = _impl_.junction_link_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.junction_link_ids_.Get(i));
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string junction_id = 1;
  if (!this->_internal_junction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_junction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Junction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Junction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Junction::GetClassData() const { return &_class_data_; }


void Junction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Junction*>(&to_msg);
  auto& from = static_cast<const Junction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.junction_link_ids_.MergeFrom(from._impl_.junction_link_ids_);
  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  if (!from._internal_junction_id().empty()) {
    _this->_internal_set_junction_id(from._internal_junction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Junction::CopyFrom(const Junction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Junction::IsInitialized() const {
  return true;
}

void Junction::InternalSwap(Junction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.junction_link_ids_.InternalSwap(&other->_impl_.junction_link_ids_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.junction_id_, lhs_arena,
      &other->_impl_.junction_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Junction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[1]);
}

// ===================================================================

class Segment::_Internal {
 public:
};

Segment::Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
}
Segment::Segment(const Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Segment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ordered_link_ids_){from._impl_.ordered_link_ids_}
    , decltype(_impl_.segment_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.start_junction_id_){}
    , decltype(_impl_.end_junction_id_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.segment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.segment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_segment_id().empty()) {
    _this->_impl_.segment_id_.Set(from._internal_segment_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.start_junction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_junction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_junction_id().empty()) {
    _this->_impl_.start_junction_id_.Set(from._internal_start_junction_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_junction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_junction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_junction_id().empty()) {
    _this->_impl_.end_junction_id_.Set(from._internal_end_junction_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.length_ = from._impl_.length_;
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
}

inline void Segment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ordered_link_ids_){arena}
    , decltype(_impl_.segment_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.start_junction_id_){}
    , decltype(_impl_.end_junction_id_){}
    , decltype(_impl_.length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.segment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.segment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_junction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_junction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_junction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_junction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ordered_link_ids_.~RepeatedPtrField();
  _impl_.segment_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.start_junction_id_.Destroy();
  _impl_.end_junction_id_.Destroy();
}

void Segment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ordered_link_ids_.Clear();
  _impl_.segment_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.start_junction_id_.ClearToEmpty();
  _impl_.end_junction_id_.ClearToEmpty();
  _impl_.length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string segment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_segment_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.segment_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ordered_link_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ordered_link_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.ordered_link_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string start_junction_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_start_junction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.start_junction_id"));
        } else
          goto handle_unusual;
        continue;
      // string end_junction_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_end_junction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.end_junction_id"));
        } else
          goto handle_unusual;
        continue;
      // double length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Segment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string segment_id = 1;
  if (!this->_internal_segment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_segment_id().data(), static_cast<int>(this->_internal_segment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.segment_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_segment_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string ordered_link_ids = 3;
  for (int i = 0, n = this->_internal_ordered_link_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ordered_link_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.ordered_link_ids");
    target = stream->WriteString(3, s, target);
  }

  // string start_junction_id = 4;
  if (!this->_internal_start_junction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_junction_id().data(), static_cast<int>(this->_internal_start_junction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.start_junction_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_start_junction_id(), target);
  }

  // string end_junction_id = 5;
  if (!this->_internal_end_junction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_junction_id().data(), static_cast<int>(this->_internal_end_junction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment.end_junction_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_end_junction_id(), target);
  }

  // double length = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ordered_link_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ordered_link_ids_.size());
  for (int i = 0, n = _impl_.ordered_link_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ordered_link_ids_.Get(i));
  }

  // string segment_id = 1;
  if (!this->_internal_segment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_segment_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string start_junction_id = 4;
  if (!this->_internal_start_junction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_junction_id());
  }

  // string end_junction_id = 5;
  if (!this->_internal_end_junction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_junction_id());
  }

  // double length = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Segment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Segment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Segment::GetClassData() const { return &_class_data_; }


void Segment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Segment*>(&to_msg);
  auto& from = static_cast<const Segment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ordered_link_ids_.MergeFrom(from._impl_.ordered_link_ids_);
  if (!from._internal_segment_id().empty()) {
    _this->_internal_set_segment_id(from._internal_segment_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_start_junction_id().empty()) {
    _this->_internal_set_start_junction_id(from._internal_start_junction_id());
  }
  if (!from._internal_end_junction_id().empty()) {
    _this->_internal_set_end_junction_id(from._internal_end_junction_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::InternalSwap(Segment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ordered_link_ids_.InternalSwap(&other->_impl_.ordered_link_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.segment_id_, lhs_arena,
      &other->_impl_.segment_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_junction_id_, lhs_arena,
      &other->_impl_.start_junction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_junction_id_, lhs_arena,
      &other->_impl_.end_junction_id_, rhs_arena
  );
  swap(_impl_.length_, other->_impl_.length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[2]);
}

// ===================================================================

class Link::_Internal {
 public:
};

Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Link* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ordered_lane_ids_){from._impl_.ordered_lane_ids_}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , decltype(_impl_.right_shape_){from._impl_.right_shape_}
    , decltype(_impl_.link_id_){}
    , decltype(_impl_.segment_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.link_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.link_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link_id().empty()) {
    _this->_impl_.link_id_.Set(from._internal_link_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.segment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.segment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_segment_id().empty()) {
    _this->_impl_.segment_id_.Set(from._internal_segment_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
}

inline void Link::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ordered_lane_ids_){arena}
    , decltype(_impl_.shape_){arena}
    , decltype(_impl_.right_shape_){arena}
    , decltype(_impl_.link_id_){}
    , decltype(_impl_.segment_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.link_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.link_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.segment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.segment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ordered_lane_ids_.~RepeatedPtrField();
  _impl_.shape_.~RepeatedPtrField();
  _impl_.right_shape_.~RepeatedPtrField();
  _impl_.link_id_.Destroy();
  _impl_.segment_id_.Destroy();
}

void Link::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ordered_lane_ids_.Clear();
  _impl_.shape_.Clear();
  _impl_.right_shape_.Clear();
  _impl_.link_id_.ClearToEmpty();
  _impl_.segment_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string link_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_link_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link.link_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ordered_lane_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ordered_lane_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link.ordered_lane_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point right_shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string segment_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_segment_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link.segment_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Link::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string link_id = 1;
  if (!this->_internal_link_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_id().data(), static_cast<int>(this->_internal_link_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link.link_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_link_id(), target);
  }

  // repeated string ordered_lane_ids = 2;
  for (int i = 0, n = this->_internal_ordered_lane_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ordered_lane_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link.ordered_lane_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point right_shape = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string segment_id = 5;
  if (!this->_internal_segment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_segment_id().data(), static_cast<int>(this->_internal_segment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link.segment_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_segment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ordered_lane_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ordered_lane_ids_.size());
  for (int i = 0, n = _impl_.ordered_lane_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ordered_lane_ids_.Get(i));
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point right_shape = 4;
  total_size += 1UL * this->_internal_right_shape_size();
  for (const auto& msg : this->_impl_.right_shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string link_id = 1;
  if (!this->_internal_link_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_id());
  }

  // string segment_id = 5;
  if (!this->_internal_segment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_segment_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }


void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Link*>(&to_msg);
  auto& from = static_cast<const Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ordered_lane_ids_.MergeFrom(from._impl_.ordered_lane_ids_);
  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  _this->_impl_.right_shape_.MergeFrom(from._impl_.right_shape_);
  if (!from._internal_link_id().empty()) {
    _this->_internal_set_link_id(from._internal_link_id());
  }
  if (!from._internal_segment_id().empty()) {
    _this->_internal_set_segment_id(from._internal_segment_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ordered_lane_ids_.InternalSwap(&other->_impl_.ordered_lane_ids_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  _impl_.right_shape_.InternalSwap(&other->_impl_.right_shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.link_id_, lhs_arena,
      &other->_impl_.link_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.segment_id_, lhs_arena,
      &other->_impl_.segment_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[3]);
}

// ===================================================================

class Sign::_Internal {
 public:
  static const ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point& position(const Sign* msg);
};

const ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point&
Sign::_Internal::position(const Sign* msg) {
  return *msg->_impl_.position_;
}
Sign::Sign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
}
Sign::Sign(const Sign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.turn_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.heading_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.turn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.turn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_turn().empty()) {
    _this->_impl_.turn_.Set(from._internal_turn(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point(*from._impl_.position_);
  }
  _this->_impl_.heading_ = from._impl_.heading_;
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
}

inline void Sign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.turn_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.heading_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.turn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.turn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sign::~Sign() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.turn_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
}

void Sign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sign::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.turn_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _impl_.heading_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string turn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_turn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign.turn"));
        } else
          goto handle_unusual;
        continue;
      // .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string turn = 1;
  if (!this->_internal_turn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_turn().data(), static_cast<int>(this->_internal_turn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign.turn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_turn(), target);
  }

  // .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // double heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
  return target;
}

size_t Sign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string turn = 1;
  if (!this->_internal_turn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_turn());
  }

  // .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // double heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sign::GetClassData() const { return &_class_data_; }


void Sign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sign*>(&to_msg);
  auto& from = static_cast<const Sign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_turn().empty()) {
    _this->_internal_set_turn(from._internal_turn());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point::MergeFrom(
        from._internal_position());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = from._internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sign::CopyFrom(const Sign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sign::IsInitialized() const {
  return true;
}

void Sign::InternalSwap(Sign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.turn_, lhs_arena,
      &other->_impl_.turn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sign, _impl_.heading_)
      + sizeof(Sign::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(Sign, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[4]);
}

// ===================================================================

class Lane::_Internal {
 public:
  static const ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign& sign(const Lane* msg);
};

const ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign&
Lane::_Internal::sign(const Lane* msg) {
  return *msg->_impl_.sign_;
}
Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Lane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , decltype(_impl_.connect_link_ids_){from._impl_.connect_link_ids_}
    , decltype(_impl_.center_line_){from._impl_.center_line_}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.line_type_){}
    , decltype(_impl_.line_color_){}
    , decltype(_impl_.link_id_){}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.lane_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lane_id().empty()) {
    _this->_impl_.lane_id_.Set(from._internal_lane_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.line_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_line_type().empty()) {
    _this->_impl_.line_type_.Set(from._internal_line_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.line_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_line_color().empty()) {
    _this->_impl_.line_color_.Set(from._internal_line_color(), 
      _this->GetArenaForAllocation());
  }
  _impl_.link_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.link_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link_id().empty()) {
    _this->_impl_.link_id_.Set(from._internal_link_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sign()) {
    _this->_impl_.sign_ = new ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign(*from._impl_.sign_);
  }
  _this->_impl_.lane_offset_ = from._impl_.lane_offset_;
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
}

inline void Lane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , decltype(_impl_.connect_link_ids_){arena}
    , decltype(_impl_.center_line_){arena}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.line_type_){}
    , decltype(_impl_.line_color_){}
    , decltype(_impl_.link_id_){}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.lane_offset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.line_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.line_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.link_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.link_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedPtrField();
  _impl_.connect_link_ids_.~RepeatedPtrField();
  _impl_.center_line_.~RepeatedPtrField();
  _impl_.lane_id_.Destroy();
  _impl_.type_.Destroy();
  _impl_.line_type_.Destroy();
  _impl_.line_color_.Destroy();
  _impl_.link_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sign_;
}

void Lane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.connect_link_ids_.Clear();
  _impl_.center_line_.Clear();
  _impl_.lane_id_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.line_type_.ClearToEmpty();
  _impl_.line_color_.ClearToEmpty();
  _impl_.link_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sign_ != nullptr) {
    delete _impl_.sign_;
  }
  _impl_.sign_ = nullptr;
  _impl_.lane_offset_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.lane_id"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.type"));
        } else
          goto handle_unusual;
        continue;
      // string line_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_line_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.line_type"));
        } else
          goto handle_unusual;
        continue;
      // string line_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_line_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.line_color"));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 lane_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.lane_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string link_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_link_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.link_id"));
        } else
          goto handle_unusual;
        continue;
      // .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign sign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string connect_link_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_connect_link_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.connect_link_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point center_line = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_center_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (!this->_internal_lane_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lane_id(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string line_type = 3;
  if (!this->_internal_line_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_type().data(), static_cast<int>(this->_internal_line_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.line_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_line_type(), target);
  }

  // string line_color = 4;
  if (!this->_internal_line_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_color().data(), static_cast<int>(this->_internal_line_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.line_color");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_line_color(), target);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 lane_offset = 6;
  if (this->_internal_lane_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lane_offset(), target);
  }

  // string link_id = 7;
  if (!this->_internal_link_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_id().data(), static_cast<int>(this->_internal_link_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.link_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_link_id(), target);
  }

  // .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign sign = 8;
  if (this->_internal_has_sign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::sign(this),
        _Internal::sign(this).GetCachedSize(), target, stream);
  }

  // repeated string connect_link_ids = 9;
  for (int i = 0, n = this->_internal_connect_link_ids_size(); i < n; i++) {
    const auto& s = this->_internal_connect_link_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane.connect_link_ids");
    target = stream->WriteString(9, s, target);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point center_line = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_center_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_center_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 5;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string connect_link_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.connect_link_ids_.size());
  for (int i = 0, n = _impl_.connect_link_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.connect_link_ids_.Get(i));
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point center_line = 10;
  total_size += 1UL * this->_internal_center_line_size();
  for (const auto& msg : this->_impl_.center_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string lane_id = 1;
  if (!this->_internal_lane_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lane_id());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string line_type = 3;
  if (!this->_internal_line_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_type());
  }

  // string line_color = 4;
  if (!this->_internal_line_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_color());
  }

  // string link_id = 7;
  if (!this->_internal_link_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_id());
  }

  // .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Sign sign = 8;
  if (this->_internal_has_sign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sign_);
  }

  // uint32 lane_offset = 6;
  if (this->_internal_lane_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Lane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane::GetClassData() const { return &_class_data_; }


void Lane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Lane*>(&to_msg);
  auto& from = static_cast<const Lane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  _this->_impl_.connect_link_ids_.MergeFrom(from._impl_.connect_link_ids_);
  _this->_impl_.center_line_.MergeFrom(from._impl_.center_line_);
  if (!from._internal_lane_id().empty()) {
    _this->_internal_set_lane_id(from._internal_lane_id());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_line_type().empty()) {
    _this->_internal_set_line_type(from._internal_line_type());
  }
  if (!from._internal_line_color().empty()) {
    _this->_internal_set_line_color(from._internal_line_color());
  }
  if (!from._internal_link_id().empty()) {
    _this->_internal_set_link_id(from._internal_link_id());
  }
  if (from._internal_has_sign()) {
    _this->_internal_mutable_sign()->::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign::MergeFrom(
        from._internal_sign());
  }
  if (from._internal_lane_offset() != 0) {
    _this->_internal_set_lane_offset(from._internal_lane_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  _impl_.connect_link_ids_.InternalSwap(&other->_impl_.connect_link_ids_);
  _impl_.center_line_.InternalSwap(&other->_impl_.center_line_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_id_, lhs_arena,
      &other->_impl_.lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.line_type_, lhs_arena,
      &other->_impl_.line_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.line_color_, lhs_arena,
      &other->_impl_.line_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.link_id_, lhs_arena,
      &other->_impl_.link_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, _impl_.lane_offset_)
      + sizeof(Lane::_impl_.lane_offset_)
      - PROTOBUF_FIELD_OFFSET(Lane, _impl_.sign_)>(
          reinterpret_cast<char*>(&_impl_.sign_),
          reinterpret_cast<char*>(&other->_impl_.sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[5]);
}

// ===================================================================

class Crosswalk::_Internal {
 public:
};

Crosswalk::Crosswalk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
}
Crosswalk::Crosswalk(const Crosswalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Crosswalk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , decltype(_impl_.crosswalk_id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.crosswalk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crosswalk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crosswalk_id().empty()) {
    _this->_impl_.crosswalk_id_.Set(from._internal_crosswalk_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
}

inline void Crosswalk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , decltype(_impl_.crosswalk_id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.crosswalk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crosswalk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Crosswalk::~Crosswalk() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Crosswalk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedPtrField();
  _impl_.crosswalk_id_.Destroy();
  _impl_.name_.Destroy();
}

void Crosswalk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Crosswalk::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.crosswalk_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Crosswalk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string crosswalk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_crosswalk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk.crosswalk_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Crosswalk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string crosswalk_id = 1;
  if (!this->_internal_crosswalk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_crosswalk_id().data(), static_cast<int>(this->_internal_crosswalk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk.crosswalk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_crosswalk_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
  return target;
}

size_t Crosswalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string crosswalk_id = 1;
  if (!this->_internal_crosswalk_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crosswalk_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Crosswalk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Crosswalk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Crosswalk::GetClassData() const { return &_class_data_; }


void Crosswalk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Crosswalk*>(&to_msg);
  auto& from = static_cast<const Crosswalk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  if (!from._internal_crosswalk_id().empty()) {
    _this->_internal_set_crosswalk_id(from._internal_crosswalk_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Crosswalk::CopyFrom(const Crosswalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crosswalk::IsInitialized() const {
  return true;
}

void Crosswalk::InternalSwap(Crosswalk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crosswalk_id_, lhs_arena,
      &other->_impl_.crosswalk_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Crosswalk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[6]);
}

// ===================================================================

class Stopline::_Internal {
 public:
};

Stopline::Stopline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
}
Stopline::Stopline(const Stopline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stopline* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , decltype(_impl_.obj_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.obj_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_obj_id().empty()) {
    _this->_impl_.obj_id_.Set(from._internal_obj_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
}

inline void Stopline::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , decltype(_impl_.obj_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.obj_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Stopline::~Stopline() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stopline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedPtrField();
  _impl_.obj_id_.Destroy();
  _impl_.type_.Destroy();
}

void Stopline::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stopline::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.obj_id_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stopline::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_obj_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline.obj_id"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline.type"));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stopline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string obj_id = 1;
  if (!this->_internal_obj_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obj_id().data(), static_cast<int>(this->_internal_obj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline.obj_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obj_id(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
  return target;
}

size_t Stopline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Point shape = 3;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string obj_id = 1;
  if (!this->_internal_obj_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_id());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stopline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stopline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stopline::GetClassData() const { return &_class_data_; }


void Stopline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stopline*>(&to_msg);
  auto& from = static_cast<const Stopline&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  if (!from._internal_obj_id().empty()) {
    _this->_internal_set_obj_id(from._internal_obj_id());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stopline::CopyFrom(const Stopline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stopline::IsInitialized() const {
  return true;
}

void Stopline::InternalSwap(Stopline* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obj_id_, lhs_arena,
      &other->_impl_.obj_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Stopline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[7]);
}

// ===================================================================

class Hdtrafficmap::_Internal {
 public:
};

Hdtrafficmap::Hdtrafficmap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
}
Hdtrafficmap::Hdtrafficmap(const Hdtrafficmap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Hdtrafficmap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.junctions_){from._impl_.junctions_}
    , decltype(_impl_.segments_){from._impl_.segments_}
    , decltype(_impl_.links_){from._impl_.links_}
    , decltype(_impl_.lanes_){from._impl_.lanes_}
    , decltype(_impl_.crosswalks_){from._impl_.crosswalks_}
    , decltype(_impl_.stoplines_){from._impl_.stoplines_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
}

inline void Hdtrafficmap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.junctions_){arena}
    , decltype(_impl_.segments_){arena}
    , decltype(_impl_.links_){arena}
    , decltype(_impl_.lanes_){arena}
    , decltype(_impl_.crosswalks_){arena}
    , decltype(_impl_.stoplines_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Hdtrafficmap::~Hdtrafficmap() {
  // @@protoc_insertion_point(destructor:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hdtrafficmap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.junctions_.~RepeatedPtrField();
  _impl_.segments_.~RepeatedPtrField();
  _impl_.links_.~RepeatedPtrField();
  _impl_.lanes_.~RepeatedPtrField();
  _impl_.crosswalks_.~RepeatedPtrField();
  _impl_.stoplines_.~RepeatedPtrField();
}

void Hdtrafficmap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Hdtrafficmap::Clear() {
// @@protoc_insertion_point(message_clear_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.junctions_.Clear();
  _impl_.segments_.Clear();
  _impl_.links_.Clear();
  _impl_.lanes_.Clear();
  _impl_.crosswalks_.Clear();
  _impl_.stoplines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hdtrafficmap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction junctions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junctions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment segments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link links = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane lanes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk crosswalks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crosswalks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline stoplines = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stoplines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hdtrafficmap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction junctions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_junctions_size()); i < n; i++) {
    const auto& repfield = this->_internal_junctions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment segments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link links = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane lanes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lanes_size()); i < n; i++) {
    const auto& repfield = this->_internal_lanes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk crosswalks = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_crosswalks_size()); i < n; i++) {
    const auto& repfield = this->_internal_crosswalks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline stoplines = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stoplines_size()); i < n; i++) {
    const auto& repfield = this->_internal_stoplines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
  return target;
}

size_t Hdtrafficmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Junction junctions = 1;
  total_size += 1UL * this->_internal_junctions_size();
  for (const auto& msg : this->_impl_.junctions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Segment segments = 2;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Link links = 3;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->_impl_.links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Lane lanes = 4;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->_impl_.lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Crosswalk crosswalks = 5;
  total_size += 1UL * this->_internal_crosswalks_size();
  for (const auto& msg : this->_impl_.crosswalks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Stopline stoplines = 6;
  total_size += 1UL * this->_internal_stoplines_size();
  for (const auto& msg : this->_impl_.stoplines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hdtrafficmap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Hdtrafficmap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hdtrafficmap::GetClassData() const { return &_class_data_; }


void Hdtrafficmap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Hdtrafficmap*>(&to_msg);
  auto& from = static_cast<const Hdtrafficmap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.junctions_.MergeFrom(from._impl_.junctions_);
  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  _this->_impl_.links_.MergeFrom(from._impl_.links_);
  _this->_impl_.lanes_.MergeFrom(from._impl_.lanes_);
  _this->_impl_.crosswalks_.MergeFrom(from._impl_.crosswalks_);
  _this->_impl_.stoplines_.MergeFrom(from._impl_.stoplines_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hdtrafficmap::CopyFrom(const Hdtrafficmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risenlighten.lasvsim.simulation_task_kratos.api.simulation.v2.Hdtrafficmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hdtrafficmap::IsInitialized() const {
  return true;
}

void Hdtrafficmap::InternalSwap(Hdtrafficmap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.junctions_.InternalSwap(&other->_impl_.junctions_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  _impl_.links_.InternalSwap(&other->_impl_.links_);
  _impl_.lanes_.InternalSwap(&other->_impl_.lanes_);
  _impl_.crosswalks_.InternalSwap(&other->_impl_.crosswalks_);
  _impl_.stoplines_.InternalSwap(&other->_impl_.stoplines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hdtrafficmap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_getter, &descriptor_table_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto_once,
      file_level_metadata_risenlighten_2flasvsim_2fsimulation_5ftask_5fkratos_2fapi_2fsimulation_2fv2_2fhdmap_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace simulation
}  // namespace api
}  // namespace simulation_task_kratos
}  // namespace lasvsim
}  // namespace risenlighten
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Junction*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Junction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Junction >(arena);
}
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Sign >(arena);
}
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Crosswalk*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Crosswalk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Crosswalk >(arena);
}
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Stopline*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Stopline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Stopline >(arena);
}
template<> PROTOBUF_NOINLINE ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap*
Arena::CreateMaybeMessage< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::risenlighten::lasvsim::simulation_task_kratos::api::simulation::v2::Hdtrafficmap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/metric.proto

#include "google/api/metric.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace api {
PROTOBUF_CONSTEXPR MetricDescriptor_MetricDescriptorMetadata::MetricDescriptor_MetricDescriptorMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_period_)*/nullptr
  , /*decltype(_impl_.ingest_delay_)*/nullptr
  , /*decltype(_impl_.launch_stage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricDescriptor_MetricDescriptorMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDescriptor_MetricDescriptorMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDescriptor_MetricDescriptorMetadataDefaultTypeInternal() {}
  union {
    MetricDescriptor_MetricDescriptorMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDescriptor_MetricDescriptorMetadataDefaultTypeInternal _MetricDescriptor_MetricDescriptorMetadata_default_instance_;
PROTOBUF_CONSTEXPR MetricDescriptor::MetricDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labels_)*/{}
  , /*decltype(_impl_.monitored_resource_types_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.metric_kind_)*/0
  , /*decltype(_impl_.value_type_)*/0
  , /*decltype(_impl_.launch_stage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDescriptorDefaultTypeInternal() {}
  union {
    MetricDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDescriptorDefaultTypeInternal _MetricDescriptor_default_instance_;
PROTOBUF_CONSTEXPR Metric_LabelsEntry_DoNotUse::Metric_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Metric_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Metric_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Metric_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metric_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Metric_LabelsEntry_DoNotUseDefaultTypeInternal _Metric_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Metric::Metric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;
}  // namespace api
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2fapi_2fmetric_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fmetric_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fmetric_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fmetric_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor_MetricDescriptorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor_MetricDescriptorMetadata, _impl_.launch_stage_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor_MetricDescriptorMetadata, _impl_.sample_period_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor_MetricDescriptorMetadata, _impl_.ingest_delay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.metric_kind_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.value_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.launch_stage_),
  PROTOBUF_FIELD_OFFSET(::google::api::MetricDescriptor, _impl_.monitored_resource_types_),
  PROTOBUF_FIELD_OFFSET(::google::api::Metric_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::api::Metric_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Metric_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::api::Metric_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Metric, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::google::api::Metric, _impl_.labels_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::api::MetricDescriptor_MetricDescriptorMetadata)},
  { 9, -1, -1, sizeof(::google::api::MetricDescriptor)},
  { 26, 34, -1, sizeof(::google::api::Metric_LabelsEntry_DoNotUse)},
  { 36, -1, -1, sizeof(::google::api::Metric)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::api::_MetricDescriptor_MetricDescriptorMetadata_default_instance_._instance,
  &::google::api::_MetricDescriptor_default_instance_._instance,
  &::google::api::_Metric_LabelsEntry_DoNotUse_default_instance_._instance,
  &::google::api::_Metric_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fapi_2fmetric_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027google/api/metric.proto\022\ngoogle.api\032\026g"
  "oogle/api/label.proto\032\035google/api/launch"
  "_stage.proto\032\036google/protobuf/duration.p"
  "roto\"\237\006\n\020MetricDescriptor\022\014\n\004name\030\001 \001(\t\022"
  "\014\n\004type\030\010 \001(\t\022+\n\006labels\030\002 \003(\0132\033.google.a"
  "pi.LabelDescriptor\022<\n\013metric_kind\030\003 \001(\0162"
  "\'.google.api.MetricDescriptor.MetricKind"
  "\022:\n\nvalue_type\030\004 \001(\0162&.google.api.Metric"
  "Descriptor.ValueType\022\014\n\004unit\030\005 \001(\t\022\023\n\013de"
  "scription\030\006 \001(\t\022\024\n\014display_name\030\007 \001(\t\022G\n"
  "\010metadata\030\n \001(\01325.google.api.MetricDescr"
  "iptor.MetricDescriptorMetadata\022-\n\014launch"
  "_stage\030\014 \001(\0162\027.google.api.LaunchStage\022 \n"
  "\030monitored_resource_types\030\r \003(\t\032\260\001\n\030Metr"
  "icDescriptorMetadata\0221\n\014launch_stage\030\001 \001"
  "(\0162\027.google.api.LaunchStageB\002\030\001\0220\n\rsampl"
  "e_period\030\002 \001(\0132\031.google.protobuf.Duratio"
  "n\022/\n\014ingest_delay\030\003 \001(\0132\031.google.protobu"
  "f.Duration\"O\n\nMetricKind\022\033\n\027METRIC_KIND_"
  "UNSPECIFIED\020\000\022\t\n\005GAUGE\020\001\022\t\n\005DELTA\020\002\022\016\n\nC"
  "UMULATIVE\020\003\"q\n\tValueType\022\032\n\026VALUE_TYPE_U"
  "NSPECIFIED\020\000\022\010\n\004BOOL\020\001\022\t\n\005INT64\020\002\022\n\n\006DOU"
  "BLE\020\003\022\n\n\006STRING\020\004\022\020\n\014DISTRIBUTION\020\005\022\t\n\005M"
  "ONEY\020\006\"u\n\006Metric\022\014\n\004type\030\003 \001(\t\022.\n\006labels"
  "\030\002 \003(\0132\036.google.api.Metric.LabelsEntry\032-"
  "\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001B_\n\016com.google.apiB\013MetricProtoP\001Z7"
  "google.golang.org/genproto/googleapis/ap"
  "i/metric;metric\242\002\004GAPIb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fmetric_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2flabel_2eproto,
  &::descriptor_table_google_2fapi_2flaunch_5fstage_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fapi_2fmetric_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fmetric_2eproto = {
    false, false, 1150, descriptor_table_protodef_google_2fapi_2fmetric_2eproto,
    "google/api/metric.proto",
    &descriptor_table_google_2fapi_2fmetric_2eproto_once, descriptor_table_google_2fapi_2fmetric_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_google_2fapi_2fmetric_2eproto::offsets,
    file_level_metadata_google_2fapi_2fmetric_2eproto, file_level_enum_descriptors_google_2fapi_2fmetric_2eproto,
    file_level_service_descriptors_google_2fapi_2fmetric_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fmetric_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fmetric_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fmetric_2eproto(&descriptor_table_google_2fapi_2fmetric_2eproto);
namespace google {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricDescriptor_MetricKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fmetric_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fmetric_2eproto[0];
}
bool MetricDescriptor_MetricKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MetricDescriptor_MetricKind MetricDescriptor::METRIC_KIND_UNSPECIFIED;
constexpr MetricDescriptor_MetricKind MetricDescriptor::GAUGE;
constexpr MetricDescriptor_MetricKind MetricDescriptor::DELTA;
constexpr MetricDescriptor_MetricKind MetricDescriptor::CUMULATIVE;
constexpr MetricDescriptor_MetricKind MetricDescriptor::MetricKind_MIN;
constexpr MetricDescriptor_MetricKind MetricDescriptor::MetricKind_MAX;
constexpr int MetricDescriptor::MetricKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricDescriptor_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fmetric_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fmetric_2eproto[1];
}
bool MetricDescriptor_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MetricDescriptor_ValueType MetricDescriptor::VALUE_TYPE_UNSPECIFIED;
constexpr MetricDescriptor_ValueType MetricDescriptor::BOOL;
constexpr MetricDescriptor_ValueType MetricDescriptor::INT64;
constexpr MetricDescriptor_ValueType MetricDescriptor::DOUBLE;
constexpr MetricDescriptor_ValueType MetricDescriptor::STRING;
constexpr MetricDescriptor_ValueType MetricDescriptor::DISTRIBUTION;
constexpr MetricDescriptor_ValueType MetricDescriptor::MONEY;
constexpr MetricDescriptor_ValueType MetricDescriptor::ValueType_MIN;
constexpr MetricDescriptor_ValueType MetricDescriptor::ValueType_MAX;
constexpr int MetricDescriptor::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MetricDescriptor_MetricDescriptorMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& sample_period(const MetricDescriptor_MetricDescriptorMetadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ingest_delay(const MetricDescriptor_MetricDescriptorMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
MetricDescriptor_MetricDescriptorMetadata::_Internal::sample_period(const MetricDescriptor_MetricDescriptorMetadata* msg) {
  return *msg->_impl_.sample_period_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
MetricDescriptor_MetricDescriptorMetadata::_Internal::ingest_delay(const MetricDescriptor_MetricDescriptorMetadata* msg) {
  return *msg->_impl_.ingest_delay_;
}
void MetricDescriptor_MetricDescriptorMetadata::clear_sample_period() {
  if (GetArenaForAllocation() == nullptr && _impl_.sample_period_ != nullptr) {
    delete _impl_.sample_period_;
  }
  _impl_.sample_period_ = nullptr;
}
void MetricDescriptor_MetricDescriptorMetadata::clear_ingest_delay() {
  if (GetArenaForAllocation() == nullptr && _impl_.ingest_delay_ != nullptr) {
    delete _impl_.ingest_delay_;
  }
  _impl_.ingest_delay_ = nullptr;
}
MetricDescriptor_MetricDescriptorMetadata::MetricDescriptor_MetricDescriptorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.MetricDescriptor.MetricDescriptorMetadata)
}
MetricDescriptor_MetricDescriptorMetadata::MetricDescriptor_MetricDescriptorMetadata(const MetricDescriptor_MetricDescriptorMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricDescriptor_MetricDescriptorMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_period_){nullptr}
    , decltype(_impl_.ingest_delay_){nullptr}
    , decltype(_impl_.launch_stage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sample_period()) {
    _this->_impl_.sample_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.sample_period_);
  }
  if (from._internal_has_ingest_delay()) {
    _this->_impl_.ingest_delay_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ingest_delay_);
  }
  _this->_impl_.launch_stage_ = from._impl_.launch_stage_;
  // @@protoc_insertion_point(copy_constructor:google.api.MetricDescriptor.MetricDescriptorMetadata)
}

inline void MetricDescriptor_MetricDescriptorMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_period_){nullptr}
    , decltype(_impl_.ingest_delay_){nullptr}
    , decltype(_impl_.launch_stage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetricDescriptor_MetricDescriptorMetadata::~MetricDescriptor_MetricDescriptorMetadata() {
  // @@protoc_insertion_point(destructor:google.api.MetricDescriptor.MetricDescriptorMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricDescriptor_MetricDescriptorMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sample_period_;
  if (this != internal_default_instance()) delete _impl_.ingest_delay_;
}

void MetricDescriptor_MetricDescriptorMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricDescriptor_MetricDescriptorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.MetricDescriptor.MetricDescriptorMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.sample_period_ != nullptr) {
    delete _impl_.sample_period_;
  }
  _impl_.sample_period_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ingest_delay_ != nullptr) {
    delete _impl_.ingest_delay_;
  }
  _impl_.ingest_delay_ = nullptr;
  _impl_.launch_stage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricDescriptor_MetricDescriptorMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.LaunchStage launch_stage = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_launch_stage(static_cast<::google::api::LaunchStage>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration sample_period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_period(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ingest_delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ingest_delay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricDescriptor_MetricDescriptorMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.MetricDescriptor.MetricDescriptorMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.LaunchStage launch_stage = 1 [deprecated = true];
  if (this->_internal_launch_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_launch_stage(), target);
  }

  // .google.protobuf.Duration sample_period = 2;
  if (this->_internal_has_sample_period()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sample_period(this),
        _Internal::sample_period(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration ingest_delay = 3;
  if (this->_internal_has_ingest_delay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ingest_delay(this),
        _Internal::ingest_delay(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.MetricDescriptor.MetricDescriptorMetadata)
  return target;
}

size_t MetricDescriptor_MetricDescriptorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.MetricDescriptor.MetricDescriptorMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration sample_period = 2;
  if (this->_internal_has_sample_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sample_period_);
  }

  // .google.protobuf.Duration ingest_delay = 3;
  if (this->_internal_has_ingest_delay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ingest_delay_);
  }

  // .google.api.LaunchStage launch_stage = 1 [deprecated = true];
  if (this->_internal_launch_stage() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_launch_stage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricDescriptor_MetricDescriptorMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricDescriptor_MetricDescriptorMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricDescriptor_MetricDescriptorMetadata::GetClassData() const { return &_class_data_; }


void MetricDescriptor_MetricDescriptorMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricDescriptor_MetricDescriptorMetadata*>(&to_msg);
  auto& from = static_cast<const MetricDescriptor_MetricDescriptorMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.MetricDescriptor.MetricDescriptorMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sample_period()) {
    _this->_internal_mutable_sample_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_sample_period());
  }
  if (from._internal_has_ingest_delay()) {
    _this->_internal_mutable_ingest_delay()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ingest_delay());
  }
  if (from._internal_launch_stage() != 0) {
    _this->_internal_set_launch_stage(from._internal_launch_stage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricDescriptor_MetricDescriptorMetadata::CopyFrom(const MetricDescriptor_MetricDescriptorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.MetricDescriptor.MetricDescriptorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricDescriptor_MetricDescriptorMetadata::IsInitialized() const {
  return true;
}

void MetricDescriptor_MetricDescriptorMetadata::InternalSwap(MetricDescriptor_MetricDescriptorMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricDescriptor_MetricDescriptorMetadata, _impl_.launch_stage_)
      + sizeof(MetricDescriptor_MetricDescriptorMetadata::_impl_.launch_stage_)
      - PROTOBUF_FIELD_OFFSET(MetricDescriptor_MetricDescriptorMetadata, _impl_.sample_period_)>(
          reinterpret_cast<char*>(&_impl_.sample_period_),
          reinterpret_cast<char*>(&other->_impl_.sample_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricDescriptor_MetricDescriptorMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fmetric_2eproto_getter, &descriptor_table_google_2fapi_2fmetric_2eproto_once,
      file_level_metadata_google_2fapi_2fmetric_2eproto[0]);
}

// ===================================================================

class MetricDescriptor::_Internal {
 public:
  static const ::google::api::MetricDescriptor_MetricDescriptorMetadata& metadata(const MetricDescriptor* msg);
};

const ::google::api::MetricDescriptor_MetricDescriptorMetadata&
MetricDescriptor::_Internal::metadata(const MetricDescriptor* msg) {
  return *msg->_impl_.metadata_;
}
void MetricDescriptor::clear_labels() {
  _impl_.labels_.Clear();
}
MetricDescriptor::MetricDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.MetricDescriptor)
}
MetricDescriptor::MetricDescriptor(const MetricDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.labels_){from._impl_.labels_}
    , decltype(_impl_.monitored_resource_types_){from._impl_.monitored_resource_types_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.metric_kind_){}
    , decltype(_impl_.value_type_){}
    , decltype(_impl_.launch_stage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unit().empty()) {
    _this->_impl_.unit_.Set(from._internal_unit(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::google::api::MetricDescriptor_MetricDescriptorMetadata(*from._impl_.metadata_);
  }
  ::memcpy(&_impl_.metric_kind_, &from._impl_.metric_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.launch_stage_) -
    reinterpret_cast<char*>(&_impl_.metric_kind_)) + sizeof(_impl_.launch_stage_));
  // @@protoc_insertion_point(copy_constructor:google.api.MetricDescriptor)
}

inline void MetricDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.labels_){arena}
    , decltype(_impl_.monitored_resource_types_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.metric_kind_){0}
    , decltype(_impl_.value_type_){0}
    , decltype(_impl_.launch_stage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetricDescriptor::~MetricDescriptor() {
  // @@protoc_insertion_point(destructor:google.api.MetricDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.~RepeatedPtrField();
  _impl_.monitored_resource_types_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.unit_.Destroy();
  _impl_.description_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void MetricDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.MetricDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.monitored_resource_types_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.unit_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  ::memset(&_impl_.metric_kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.launch_stage_) -
      reinterpret_cast<char*>(&_impl_.metric_kind_)) + sizeof(_impl_.launch_stage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.MetricDescriptor.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.LabelDescriptor labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.MetricDescriptor.MetricKind metric_kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_metric_kind(static_cast<::google::api::MetricDescriptor_MetricKind>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.api.MetricDescriptor.ValueType value_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::google::api::MetricDescriptor_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // string unit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_unit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.MetricDescriptor.unit"));
        } else
          goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.MetricDescriptor.description"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.MetricDescriptor.display_name"));
        } else
          goto handle_unusual;
        continue;
      // string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.MetricDescriptor.type"));
        } else
          goto handle_unusual;
        continue;
      // .google.api.MetricDescriptor.MetricDescriptorMetadata metadata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.LaunchStage launch_stage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_launch_stage(static_cast<::google::api::LaunchStage>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string monitored_resource_types = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_monitored_resource_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "google.api.MetricDescriptor.monitored_resource_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.MetricDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .google.api.LabelDescriptor labels = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_labels_size()); i < n; i++) {
    const auto& repfield = this->_internal_labels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  if (this->_internal_metric_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_metric_kind(), target);
  }

  // .google.api.MetricDescriptor.ValueType value_type = 4;
  if (this->_internal_value_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_value_type(), target);
  }

  // string unit = 5;
  if (!this->_internal_unit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.unit");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_unit(), target);
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // string display_name = 7;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.display_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_display_name(), target);
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // .google.api.MetricDescriptor.MetricDescriptorMetadata metadata = 10;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .google.api.LaunchStage launch_stage = 12;
  if (this->_internal_launch_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_launch_stage(), target);
  }

  // repeated string monitored_resource_types = 13;
  for (int i = 0, n = this->_internal_monitored_resource_types_size(); i < n; i++) {
    const auto& s = this->_internal_monitored_resource_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricDescriptor.monitored_resource_types");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.MetricDescriptor)
  return target;
}

size_t MetricDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.MetricDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.LabelDescriptor labels = 2;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->_impl_.labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string monitored_resource_types = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.monitored_resource_types_.size());
  for (int i = 0, n = _impl_.monitored_resource_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.monitored_resource_types_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string unit = 5;
  if (!this->_internal_unit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string display_name = 7;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .google.api.MetricDescriptor.MetricDescriptorMetadata metadata = 10;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  if (this->_internal_metric_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_metric_kind());
  }

  // .google.api.MetricDescriptor.ValueType value_type = 4;
  if (this->_internal_value_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  // .google.api.LaunchStage launch_stage = 12;
  if (this->_internal_launch_stage() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_launch_stage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricDescriptor::GetClassData() const { return &_class_data_; }


void MetricDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricDescriptor*>(&to_msg);
  auto& from = static_cast<const MetricDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.MetricDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.monitored_resource_types_.MergeFrom(from._impl_.monitored_resource_types_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_unit().empty()) {
    _this->_internal_set_unit(from._internal_unit());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::google::api::MetricDescriptor_MetricDescriptorMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_metric_kind() != 0) {
    _this->_internal_set_metric_kind(from._internal_metric_kind());
  }
  if (from._internal_value_type() != 0) {
    _this->_internal_set_value_type(from._internal_value_type());
  }
  if (from._internal_launch_stage() != 0) {
    _this->_internal_set_launch_stage(from._internal_launch_stage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricDescriptor::CopyFrom(const MetricDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.MetricDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricDescriptor::IsInitialized() const {
  return true;
}

void MetricDescriptor::InternalSwap(MetricDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.monitored_resource_types_.InternalSwap(&other->_impl_.monitored_resource_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unit_, lhs_arena,
      &other->_impl_.unit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricDescriptor, _impl_.launch_stage_)
      + sizeof(MetricDescriptor::_impl_.launch_stage_)
      - PROTOBUF_FIELD_OFFSET(MetricDescriptor, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fmetric_2eproto_getter, &descriptor_table_google_2fapi_2fmetric_2eproto_once,
      file_level_metadata_google_2fapi_2fmetric_2eproto[1]);
}

// ===================================================================

Metric_LabelsEntry_DoNotUse::Metric_LabelsEntry_DoNotUse() {}
Metric_LabelsEntry_DoNotUse::Metric_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metric_LabelsEntry_DoNotUse::MergeFrom(const Metric_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metric_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fmetric_2eproto_getter, &descriptor_table_google_2fapi_2fmetric_2eproto_once,
      file_level_metadata_google_2fapi_2fmetric_2eproto[2]);
}

// ===================================================================

class Metric::_Internal {
 public:
};

Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Metric::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.api.Metric)
}

inline void Metric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:google.api.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.Destruct();
  _impl_.labels_.~MapField();
  _impl_.type_.Destroy();
}

void Metric::ArenaDtor(void* object) {
  Metric* _this = reinterpret_cast< Metric* >(object);
  _this->_impl_.labels_.Destruct();
}
void Metric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.Metric.type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 2;
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Metric_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.api.Metric.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.api.Metric.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Metric.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Metric_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metric::GetClassData() const { return &_class_data_; }


void Metric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metric*>(&to_msg);
  auto& from = static_cast<const Metric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.Metric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fmetric_2eproto_getter, &descriptor_table_google_2fapi_2fmetric_2eproto_once,
      file_level_metadata_google_2fapi_2fmetric_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::MetricDescriptor_MetricDescriptorMetadata*
Arena::CreateMaybeMessage< ::google::api::MetricDescriptor_MetricDescriptorMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::MetricDescriptor_MetricDescriptorMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::MetricDescriptor*
Arena::CreateMaybeMessage< ::google::api::MetricDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::MetricDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Metric_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::api::Metric_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Metric_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Metric*
Arena::CreateMaybeMessage< ::google::api::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Metric >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

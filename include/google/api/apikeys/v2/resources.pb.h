// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/apikeys/v2/resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fapikeys_2fv2_2fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fapikeys_2fv2_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fapikeys_2fv2_2fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
namespace google {
namespace api {
namespace apikeys {
namespace v2 {
class AndroidApplication;
struct AndroidApplicationDefaultTypeInternal;
extern AndroidApplicationDefaultTypeInternal _AndroidApplication_default_instance_;
class AndroidKeyRestrictions;
struct AndroidKeyRestrictionsDefaultTypeInternal;
extern AndroidKeyRestrictionsDefaultTypeInternal _AndroidKeyRestrictions_default_instance_;
class ApiTarget;
struct ApiTargetDefaultTypeInternal;
extern ApiTargetDefaultTypeInternal _ApiTarget_default_instance_;
class BrowserKeyRestrictions;
struct BrowserKeyRestrictionsDefaultTypeInternal;
extern BrowserKeyRestrictionsDefaultTypeInternal _BrowserKeyRestrictions_default_instance_;
class IosKeyRestrictions;
struct IosKeyRestrictionsDefaultTypeInternal;
extern IosKeyRestrictionsDefaultTypeInternal _IosKeyRestrictions_default_instance_;
class Key;
struct KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class Key_AnnotationsEntry_DoNotUse;
struct Key_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern Key_AnnotationsEntry_DoNotUseDefaultTypeInternal _Key_AnnotationsEntry_DoNotUse_default_instance_;
class Restrictions;
struct RestrictionsDefaultTypeInternal;
extern RestrictionsDefaultTypeInternal _Restrictions_default_instance_;
class ServerKeyRestrictions;
struct ServerKeyRestrictionsDefaultTypeInternal;
extern ServerKeyRestrictionsDefaultTypeInternal _ServerKeyRestrictions_default_instance_;
}  // namespace v2
}  // namespace apikeys
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::apikeys::v2::AndroidApplication* Arena::CreateMaybeMessage<::google::api::apikeys::v2::AndroidApplication>(Arena*);
template<> ::google::api::apikeys::v2::AndroidKeyRestrictions* Arena::CreateMaybeMessage<::google::api::apikeys::v2::AndroidKeyRestrictions>(Arena*);
template<> ::google::api::apikeys::v2::ApiTarget* Arena::CreateMaybeMessage<::google::api::apikeys::v2::ApiTarget>(Arena*);
template<> ::google::api::apikeys::v2::BrowserKeyRestrictions* Arena::CreateMaybeMessage<::google::api::apikeys::v2::BrowserKeyRestrictions>(Arena*);
template<> ::google::api::apikeys::v2::IosKeyRestrictions* Arena::CreateMaybeMessage<::google::api::apikeys::v2::IosKeyRestrictions>(Arena*);
template<> ::google::api::apikeys::v2::Key* Arena::CreateMaybeMessage<::google::api::apikeys::v2::Key>(Arena*);
template<> ::google::api::apikeys::v2::Key_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::apikeys::v2::Key_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::google::api::apikeys::v2::Restrictions* Arena::CreateMaybeMessage<::google::api::apikeys::v2::Restrictions>(Arena*);
template<> ::google::api::apikeys::v2::ServerKeyRestrictions* Arena::CreateMaybeMessage<::google::api::apikeys::v2::ServerKeyRestrictions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace apikeys {
namespace v2 {

// ===================================================================

class Key_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Key_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Key_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Key_AnnotationsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Key_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Key_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Key_AnnotationsEntry_DoNotUse& other);
  static const Key_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Key_AnnotationsEntry_DoNotUse*>(&_Key_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.apikeys.v2.Key.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.apikeys.v2.Key.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};

// -------------------------------------------------------------------

class Key final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.Key) */ {
 public:
  inline Key() : Key(nullptr) {}
  ~Key() override;
  explicit PROTOBUF_CONSTEXPR Key(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Key(const Key& from);
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Key& operator=(Key&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Key& default_instance() {
    return *internal_default_instance();
  }
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Key* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Key& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Key& from) {
    Key::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.Key";
  }
  protected:
  explicit Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 8,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kKeyStringFieldNumber = 3,
    kUidFieldNumber = 5,
    kEtagFieldNumber = 11,
    kCreateTimeFieldNumber = 4,
    kUpdateTimeFieldNumber = 6,
    kDeleteTimeFieldNumber = 7,
    kRestrictionsFieldNumber = 9,
  };
  // map<string, string> annotations = 8;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string key_string = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_key_string();
  const std::string& key_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_string();
  PROTOBUF_NODISCARD std::string* release_key_string();
  void set_allocated_key_string(std::string* key_string);
  private:
  const std::string& _internal_key_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_string(const std::string& value);
  std::string* _internal_mutable_key_string();
  public:

  // string uid = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string etag = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp delete_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_delete_time() const;
  private:
  bool _internal_has_delete_time() const;
  public:
  void clear_delete_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& delete_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_delete_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delete_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delete_time();
  public:
  void unsafe_arena_set_allocated_delete_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delete_time();

  // .google.api.apikeys.v2.Restrictions restrictions = 9;
  bool has_restrictions() const;
  private:
  bool _internal_has_restrictions() const;
  public:
  void clear_restrictions();
  const ::google::api::apikeys::v2::Restrictions& restrictions() const;
  PROTOBUF_NODISCARD ::google::api::apikeys::v2::Restrictions* release_restrictions();
  ::google::api::apikeys::v2::Restrictions* mutable_restrictions();
  void set_allocated_restrictions(::google::api::apikeys::v2::Restrictions* restrictions);
  private:
  const ::google::api::apikeys::v2::Restrictions& _internal_restrictions() const;
  ::google::api::apikeys::v2::Restrictions* _internal_mutable_restrictions();
  public:
  void unsafe_arena_set_allocated_restrictions(
      ::google::api::apikeys::v2::Restrictions* restrictions);
  ::google::api::apikeys::v2::Restrictions* unsafe_arena_release_restrictions();

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.Key)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Key_AnnotationsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time_;
    ::google::api::apikeys::v2::Restrictions* restrictions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Restrictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.Restrictions) */ {
 public:
  inline Restrictions() : Restrictions(nullptr) {}
  ~Restrictions() override;
  explicit PROTOBUF_CONSTEXPR Restrictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Restrictions(const Restrictions& from);
  Restrictions(Restrictions&& from) noexcept
    : Restrictions() {
    *this = ::std::move(from);
  }

  inline Restrictions& operator=(const Restrictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Restrictions& operator=(Restrictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Restrictions& default_instance() {
    return *internal_default_instance();
  }
  enum ClientRestrictionsCase {
    kBrowserKeyRestrictions = 1,
    kServerKeyRestrictions = 2,
    kAndroidKeyRestrictions = 3,
    kIosKeyRestrictions = 4,
    CLIENT_RESTRICTIONS_NOT_SET = 0,
  };

  static inline const Restrictions* internal_default_instance() {
    return reinterpret_cast<const Restrictions*>(
               &_Restrictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Restrictions& a, Restrictions& b) {
    a.Swap(&b);
  }
  inline void Swap(Restrictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Restrictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Restrictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Restrictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Restrictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Restrictions& from) {
    Restrictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Restrictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.Restrictions";
  }
  protected:
  explicit Restrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiTargetsFieldNumber = 5,
    kBrowserKeyRestrictionsFieldNumber = 1,
    kServerKeyRestrictionsFieldNumber = 2,
    kAndroidKeyRestrictionsFieldNumber = 3,
    kIosKeyRestrictionsFieldNumber = 4,
  };
  // repeated .google.api.apikeys.v2.ApiTarget api_targets = 5;
  int api_targets_size() const;
  private:
  int _internal_api_targets_size() const;
  public:
  void clear_api_targets();
  ::google::api::apikeys::v2::ApiTarget* mutable_api_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::ApiTarget >*
      mutable_api_targets();
  private:
  const ::google::api::apikeys::v2::ApiTarget& _internal_api_targets(int index) const;
  ::google::api::apikeys::v2::ApiTarget* _internal_add_api_targets();
  public:
  const ::google::api::apikeys::v2::ApiTarget& api_targets(int index) const;
  ::google::api::apikeys::v2::ApiTarget* add_api_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::ApiTarget >&
      api_targets() const;

  // .google.api.apikeys.v2.BrowserKeyRestrictions browser_key_restrictions = 1;
  bool has_browser_key_restrictions() const;
  private:
  bool _internal_has_browser_key_restrictions() const;
  public:
  void clear_browser_key_restrictions();
  const ::google::api::apikeys::v2::BrowserKeyRestrictions& browser_key_restrictions() const;
  PROTOBUF_NODISCARD ::google::api::apikeys::v2::BrowserKeyRestrictions* release_browser_key_restrictions();
  ::google::api::apikeys::v2::BrowserKeyRestrictions* mutable_browser_key_restrictions();
  void set_allocated_browser_key_restrictions(::google::api::apikeys::v2::BrowserKeyRestrictions* browser_key_restrictions);
  private:
  const ::google::api::apikeys::v2::BrowserKeyRestrictions& _internal_browser_key_restrictions() const;
  ::google::api::apikeys::v2::BrowserKeyRestrictions* _internal_mutable_browser_key_restrictions();
  public:
  void unsafe_arena_set_allocated_browser_key_restrictions(
      ::google::api::apikeys::v2::BrowserKeyRestrictions* browser_key_restrictions);
  ::google::api::apikeys::v2::BrowserKeyRestrictions* unsafe_arena_release_browser_key_restrictions();

  // .google.api.apikeys.v2.ServerKeyRestrictions server_key_restrictions = 2;
  bool has_server_key_restrictions() const;
  private:
  bool _internal_has_server_key_restrictions() const;
  public:
  void clear_server_key_restrictions();
  const ::google::api::apikeys::v2::ServerKeyRestrictions& server_key_restrictions() const;
  PROTOBUF_NODISCARD ::google::api::apikeys::v2::ServerKeyRestrictions* release_server_key_restrictions();
  ::google::api::apikeys::v2::ServerKeyRestrictions* mutable_server_key_restrictions();
  void set_allocated_server_key_restrictions(::google::api::apikeys::v2::ServerKeyRestrictions* server_key_restrictions);
  private:
  const ::google::api::apikeys::v2::ServerKeyRestrictions& _internal_server_key_restrictions() const;
  ::google::api::apikeys::v2::ServerKeyRestrictions* _internal_mutable_server_key_restrictions();
  public:
  void unsafe_arena_set_allocated_server_key_restrictions(
      ::google::api::apikeys::v2::ServerKeyRestrictions* server_key_restrictions);
  ::google::api::apikeys::v2::ServerKeyRestrictions* unsafe_arena_release_server_key_restrictions();

  // .google.api.apikeys.v2.AndroidKeyRestrictions android_key_restrictions = 3;
  bool has_android_key_restrictions() const;
  private:
  bool _internal_has_android_key_restrictions() const;
  public:
  void clear_android_key_restrictions();
  const ::google::api::apikeys::v2::AndroidKeyRestrictions& android_key_restrictions() const;
  PROTOBUF_NODISCARD ::google::api::apikeys::v2::AndroidKeyRestrictions* release_android_key_restrictions();
  ::google::api::apikeys::v2::AndroidKeyRestrictions* mutable_android_key_restrictions();
  void set_allocated_android_key_restrictions(::google::api::apikeys::v2::AndroidKeyRestrictions* android_key_restrictions);
  private:
  const ::google::api::apikeys::v2::AndroidKeyRestrictions& _internal_android_key_restrictions() const;
  ::google::api::apikeys::v2::AndroidKeyRestrictions* _internal_mutable_android_key_restrictions();
  public:
  void unsafe_arena_set_allocated_android_key_restrictions(
      ::google::api::apikeys::v2::AndroidKeyRestrictions* android_key_restrictions);
  ::google::api::apikeys::v2::AndroidKeyRestrictions* unsafe_arena_release_android_key_restrictions();

  // .google.api.apikeys.v2.IosKeyRestrictions ios_key_restrictions = 4;
  bool has_ios_key_restrictions() const;
  private:
  bool _internal_has_ios_key_restrictions() const;
  public:
  void clear_ios_key_restrictions();
  const ::google::api::apikeys::v2::IosKeyRestrictions& ios_key_restrictions() const;
  PROTOBUF_NODISCARD ::google::api::apikeys::v2::IosKeyRestrictions* release_ios_key_restrictions();
  ::google::api::apikeys::v2::IosKeyRestrictions* mutable_ios_key_restrictions();
  void set_allocated_ios_key_restrictions(::google::api::apikeys::v2::IosKeyRestrictions* ios_key_restrictions);
  private:
  const ::google::api::apikeys::v2::IosKeyRestrictions& _internal_ios_key_restrictions() const;
  ::google::api::apikeys::v2::IosKeyRestrictions* _internal_mutable_ios_key_restrictions();
  public:
  void unsafe_arena_set_allocated_ios_key_restrictions(
      ::google::api::apikeys::v2::IosKeyRestrictions* ios_key_restrictions);
  ::google::api::apikeys::v2::IosKeyRestrictions* unsafe_arena_release_ios_key_restrictions();

  void clear_client_restrictions();
  ClientRestrictionsCase client_restrictions_case() const;
  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.Restrictions)
 private:
  class _Internal;
  void set_has_browser_key_restrictions();
  void set_has_server_key_restrictions();
  void set_has_android_key_restrictions();
  void set_has_ios_key_restrictions();

  inline bool has_client_restrictions() const;
  inline void clear_has_client_restrictions();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::ApiTarget > api_targets_;
    union ClientRestrictionsUnion {
      constexpr ClientRestrictionsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::api::apikeys::v2::BrowserKeyRestrictions* browser_key_restrictions_;
      ::google::api::apikeys::v2::ServerKeyRestrictions* server_key_restrictions_;
      ::google::api::apikeys::v2::AndroidKeyRestrictions* android_key_restrictions_;
      ::google::api::apikeys::v2::IosKeyRestrictions* ios_key_restrictions_;
    } client_restrictions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class BrowserKeyRestrictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.BrowserKeyRestrictions) */ {
 public:
  inline BrowserKeyRestrictions() : BrowserKeyRestrictions(nullptr) {}
  ~BrowserKeyRestrictions() override;
  explicit PROTOBUF_CONSTEXPR BrowserKeyRestrictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrowserKeyRestrictions(const BrowserKeyRestrictions& from);
  BrowserKeyRestrictions(BrowserKeyRestrictions&& from) noexcept
    : BrowserKeyRestrictions() {
    *this = ::std::move(from);
  }

  inline BrowserKeyRestrictions& operator=(const BrowserKeyRestrictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrowserKeyRestrictions& operator=(BrowserKeyRestrictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrowserKeyRestrictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrowserKeyRestrictions* internal_default_instance() {
    return reinterpret_cast<const BrowserKeyRestrictions*>(
               &_BrowserKeyRestrictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BrowserKeyRestrictions& a, BrowserKeyRestrictions& b) {
    a.Swap(&b);
  }
  inline void Swap(BrowserKeyRestrictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrowserKeyRestrictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrowserKeyRestrictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrowserKeyRestrictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrowserKeyRestrictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrowserKeyRestrictions& from) {
    BrowserKeyRestrictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrowserKeyRestrictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.BrowserKeyRestrictions";
  }
  protected:
  explicit BrowserKeyRestrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedReferrersFieldNumber = 1,
  };
  // repeated string allowed_referrers = 1;
  int allowed_referrers_size() const;
  private:
  int _internal_allowed_referrers_size() const;
  public:
  void clear_allowed_referrers();
  const std::string& allowed_referrers(int index) const;
  std::string* mutable_allowed_referrers(int index);
  void set_allowed_referrers(int index, const std::string& value);
  void set_allowed_referrers(int index, std::string&& value);
  void set_allowed_referrers(int index, const char* value);
  void set_allowed_referrers(int index, const char* value, size_t size);
  std::string* add_allowed_referrers();
  void add_allowed_referrers(const std::string& value);
  void add_allowed_referrers(std::string&& value);
  void add_allowed_referrers(const char* value);
  void add_allowed_referrers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_referrers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_referrers();
  private:
  const std::string& _internal_allowed_referrers(int index) const;
  std::string* _internal_add_allowed_referrers();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.BrowserKeyRestrictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_referrers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ServerKeyRestrictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.ServerKeyRestrictions) */ {
 public:
  inline ServerKeyRestrictions() : ServerKeyRestrictions(nullptr) {}
  ~ServerKeyRestrictions() override;
  explicit PROTOBUF_CONSTEXPR ServerKeyRestrictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerKeyRestrictions(const ServerKeyRestrictions& from);
  ServerKeyRestrictions(ServerKeyRestrictions&& from) noexcept
    : ServerKeyRestrictions() {
    *this = ::std::move(from);
  }

  inline ServerKeyRestrictions& operator=(const ServerKeyRestrictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerKeyRestrictions& operator=(ServerKeyRestrictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerKeyRestrictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerKeyRestrictions* internal_default_instance() {
    return reinterpret_cast<const ServerKeyRestrictions*>(
               &_ServerKeyRestrictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerKeyRestrictions& a, ServerKeyRestrictions& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerKeyRestrictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerKeyRestrictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerKeyRestrictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerKeyRestrictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerKeyRestrictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerKeyRestrictions& from) {
    ServerKeyRestrictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerKeyRestrictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.ServerKeyRestrictions";
  }
  protected:
  explicit ServerKeyRestrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedIpsFieldNumber = 1,
  };
  // repeated string allowed_ips = 1;
  int allowed_ips_size() const;
  private:
  int _internal_allowed_ips_size() const;
  public:
  void clear_allowed_ips();
  const std::string& allowed_ips(int index) const;
  std::string* mutable_allowed_ips(int index);
  void set_allowed_ips(int index, const std::string& value);
  void set_allowed_ips(int index, std::string&& value);
  void set_allowed_ips(int index, const char* value);
  void set_allowed_ips(int index, const char* value, size_t size);
  std::string* add_allowed_ips();
  void add_allowed_ips(const std::string& value);
  void add_allowed_ips(std::string&& value);
  void add_allowed_ips(const char* value);
  void add_allowed_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_ips();
  private:
  const std::string& _internal_allowed_ips(int index) const;
  std::string* _internal_add_allowed_ips();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.ServerKeyRestrictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_ips_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AndroidKeyRestrictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.AndroidKeyRestrictions) */ {
 public:
  inline AndroidKeyRestrictions() : AndroidKeyRestrictions(nullptr) {}
  ~AndroidKeyRestrictions() override;
  explicit PROTOBUF_CONSTEXPR AndroidKeyRestrictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidKeyRestrictions(const AndroidKeyRestrictions& from);
  AndroidKeyRestrictions(AndroidKeyRestrictions&& from) noexcept
    : AndroidKeyRestrictions() {
    *this = ::std::move(from);
  }

  inline AndroidKeyRestrictions& operator=(const AndroidKeyRestrictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidKeyRestrictions& operator=(AndroidKeyRestrictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidKeyRestrictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidKeyRestrictions* internal_default_instance() {
    return reinterpret_cast<const AndroidKeyRestrictions*>(
               &_AndroidKeyRestrictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AndroidKeyRestrictions& a, AndroidKeyRestrictions& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidKeyRestrictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidKeyRestrictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidKeyRestrictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidKeyRestrictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidKeyRestrictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidKeyRestrictions& from) {
    AndroidKeyRestrictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidKeyRestrictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.AndroidKeyRestrictions";
  }
  protected:
  explicit AndroidKeyRestrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedApplicationsFieldNumber = 1,
  };
  // repeated .google.api.apikeys.v2.AndroidApplication allowed_applications = 1;
  int allowed_applications_size() const;
  private:
  int _internal_allowed_applications_size() const;
  public:
  void clear_allowed_applications();
  ::google::api::apikeys::v2::AndroidApplication* mutable_allowed_applications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::AndroidApplication >*
      mutable_allowed_applications();
  private:
  const ::google::api::apikeys::v2::AndroidApplication& _internal_allowed_applications(int index) const;
  ::google::api::apikeys::v2::AndroidApplication* _internal_add_allowed_applications();
  public:
  const ::google::api::apikeys::v2::AndroidApplication& allowed_applications(int index) const;
  ::google::api::apikeys::v2::AndroidApplication* add_allowed_applications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::AndroidApplication >&
      allowed_applications() const;

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.AndroidKeyRestrictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::AndroidApplication > allowed_applications_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AndroidApplication final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.AndroidApplication) */ {
 public:
  inline AndroidApplication() : AndroidApplication(nullptr) {}
  ~AndroidApplication() override;
  explicit PROTOBUF_CONSTEXPR AndroidApplication(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidApplication(const AndroidApplication& from);
  AndroidApplication(AndroidApplication&& from) noexcept
    : AndroidApplication() {
    *this = ::std::move(from);
  }

  inline AndroidApplication& operator=(const AndroidApplication& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidApplication& operator=(AndroidApplication&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidApplication& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidApplication* internal_default_instance() {
    return reinterpret_cast<const AndroidApplication*>(
               &_AndroidApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AndroidApplication& a, AndroidApplication& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidApplication* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidApplication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidApplication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidApplication>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidApplication& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidApplication& from) {
    AndroidApplication::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidApplication* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.AndroidApplication";
  }
  protected:
  explicit AndroidApplication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSha1FingerprintFieldNumber = 1,
    kPackageNameFieldNumber = 2,
  };
  // string sha1_fingerprint = 1;
  void clear_sha1_fingerprint();
  const std::string& sha1_fingerprint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha1_fingerprint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha1_fingerprint();
  PROTOBUF_NODISCARD std::string* release_sha1_fingerprint();
  void set_allocated_sha1_fingerprint(std::string* sha1_fingerprint);
  private:
  const std::string& _internal_sha1_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha1_fingerprint(const std::string& value);
  std::string* _internal_mutable_sha1_fingerprint();
  public:

  // string package_name = 2;
  void clear_package_name();
  const std::string& package_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_name();
  PROTOBUF_NODISCARD std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);
  private:
  const std::string& _internal_package_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_name(const std::string& value);
  std::string* _internal_mutable_package_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.AndroidApplication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha1_fingerprint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class IosKeyRestrictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.IosKeyRestrictions) */ {
 public:
  inline IosKeyRestrictions() : IosKeyRestrictions(nullptr) {}
  ~IosKeyRestrictions() override;
  explicit PROTOBUF_CONSTEXPR IosKeyRestrictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IosKeyRestrictions(const IosKeyRestrictions& from);
  IosKeyRestrictions(IosKeyRestrictions&& from) noexcept
    : IosKeyRestrictions() {
    *this = ::std::move(from);
  }

  inline IosKeyRestrictions& operator=(const IosKeyRestrictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline IosKeyRestrictions& operator=(IosKeyRestrictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IosKeyRestrictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const IosKeyRestrictions* internal_default_instance() {
    return reinterpret_cast<const IosKeyRestrictions*>(
               &_IosKeyRestrictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IosKeyRestrictions& a, IosKeyRestrictions& b) {
    a.Swap(&b);
  }
  inline void Swap(IosKeyRestrictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IosKeyRestrictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IosKeyRestrictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IosKeyRestrictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IosKeyRestrictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IosKeyRestrictions& from) {
    IosKeyRestrictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IosKeyRestrictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.IosKeyRestrictions";
  }
  protected:
  explicit IosKeyRestrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedBundleIdsFieldNumber = 1,
  };
  // repeated string allowed_bundle_ids = 1;
  int allowed_bundle_ids_size() const;
  private:
  int _internal_allowed_bundle_ids_size() const;
  public:
  void clear_allowed_bundle_ids();
  const std::string& allowed_bundle_ids(int index) const;
  std::string* mutable_allowed_bundle_ids(int index);
  void set_allowed_bundle_ids(int index, const std::string& value);
  void set_allowed_bundle_ids(int index, std::string&& value);
  void set_allowed_bundle_ids(int index, const char* value);
  void set_allowed_bundle_ids(int index, const char* value, size_t size);
  std::string* add_allowed_bundle_ids();
  void add_allowed_bundle_ids(const std::string& value);
  void add_allowed_bundle_ids(std::string&& value);
  void add_allowed_bundle_ids(const char* value);
  void add_allowed_bundle_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_bundle_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_bundle_ids();
  private:
  const std::string& _internal_allowed_bundle_ids(int index) const;
  std::string* _internal_add_allowed_bundle_ids();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.IosKeyRestrictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_bundle_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ApiTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.ApiTarget) */ {
 public:
  inline ApiTarget() : ApiTarget(nullptr) {}
  ~ApiTarget() override;
  explicit PROTOBUF_CONSTEXPR ApiTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiTarget(const ApiTarget& from);
  ApiTarget(ApiTarget&& from) noexcept
    : ApiTarget() {
    *this = ::std::move(from);
  }

  inline ApiTarget& operator=(const ApiTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiTarget& operator=(ApiTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiTarget* internal_default_instance() {
    return reinterpret_cast<const ApiTarget*>(
               &_ApiTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ApiTarget& a, ApiTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApiTarget& from) {
    ApiTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.ApiTarget";
  }
  protected:
  explicit ApiTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodsFieldNumber = 2,
    kServiceFieldNumber = 1,
  };
  // repeated string methods = 2 [(.google.api.field_behavior) = OPTIONAL];
  int methods_size() const;
  private:
  int _internal_methods_size() const;
  public:
  void clear_methods();
  const std::string& methods(int index) const;
  std::string* mutable_methods(int index);
  void set_methods(int index, const std::string& value);
  void set_methods(int index, std::string&& value);
  void set_methods(int index, const char* value);
  void set_methods(int index, const char* value, size_t size);
  std::string* add_methods();
  void add_methods(const std::string& value);
  void add_methods(std::string&& value);
  void add_methods(const char* value);
  void add_methods(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& methods() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_methods();
  private:
  const std::string& _internal_methods(int index) const;
  std::string* _internal_add_methods();
  public:

  // string service = 1;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.ApiTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> methods_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Key

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Key::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Key::name() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Key::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.Key.name)
}
inline std::string* Key::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.name)
  return _s;
}
inline const std::string& Key::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Key::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Key::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Key::release_name() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.name)
  return _impl_.name_.Release();
}
inline void Key::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.name)
}

// string uid = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Key::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Key::uid() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Key::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.Key.uid)
}
inline std::string* Key::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.uid)
  return _s;
}
inline const std::string& Key::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void Key::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* Key::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* Key::release_uid() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.uid)
  return _impl_.uid_.Release();
}
inline void Key::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.uid)
}

// string display_name = 2;
inline void Key::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& Key::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Key::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.Key.display_name)
}
inline std::string* Key::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.display_name)
  return _s;
}
inline const std::string& Key::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Key::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Key::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Key::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.display_name)
  return _impl_.display_name_.Release();
}
inline void Key::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.display_name)
}

// string key_string = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Key::clear_key_string() {
  _impl_.key_string_.ClearToEmpty();
}
inline const std::string& Key::key_string() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.key_string)
  return _internal_key_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Key::set_key_string(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.Key.key_string)
}
inline std::string* Key::mutable_key_string() {
  std::string* _s = _internal_mutable_key_string();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.key_string)
  return _s;
}
inline const std::string& Key::_internal_key_string() const {
  return _impl_.key_string_.Get();
}
inline void Key::_internal_set_key_string(const std::string& value) {
  
  _impl_.key_string_.Set(value, GetArenaForAllocation());
}
inline std::string* Key::_internal_mutable_key_string() {
  
  return _impl_.key_string_.Mutable(GetArenaForAllocation());
}
inline std::string* Key::release_key_string() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.key_string)
  return _impl_.key_string_.Release();
}
inline void Key::set_allocated_key_string(std::string* key_string) {
  if (key_string != nullptr) {
    
  } else {
    
  }
  _impl_.key_string_.SetAllocated(key_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_string_.IsDefault()) {
    _impl_.key_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.key_string)
}

// .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Key::_internal_has_create_time() const {
  return this != internal_default_instance() && _impl_.create_time_ != nullptr;
}
inline bool Key::has_create_time() const {
  return _internal_has_create_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Key::_internal_create_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Key::create_time() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.create_time)
  return _internal_create_time();
}
inline void Key::unsafe_arena_set_allocated_create_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.Key.create_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::release_create_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.create_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::_internal_mutable_create_time() {
  
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.create_time_ = p;
  }
  return _impl_.create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::mutable_create_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.create_time)
  return _msg;
}
inline void Key::set_allocated_create_time(::PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time));
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.create_time)
}

// .google.protobuf.Timestamp update_time = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Key::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool Key::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Key::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Key::update_time() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.update_time)
  return _internal_update_time();
}
inline void Key::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.Key.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.update_time)
  return _msg;
}
inline void Key::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.update_time)
}

// .google.protobuf.Timestamp delete_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Key::_internal_has_delete_time() const {
  return this != internal_default_instance() && _impl_.delete_time_ != nullptr;
}
inline bool Key::has_delete_time() const {
  return _internal_has_delete_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Key::_internal_delete_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.delete_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Key::delete_time() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.delete_time)
  return _internal_delete_time();
}
inline void Key::unsafe_arena_set_allocated_delete_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  _impl_.delete_time_ = delete_time;
  if (delete_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.Key.delete_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::release_delete_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::unsafe_arena_release_delete_time() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.delete_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::_internal_mutable_delete_time() {
  
  if (_impl_.delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.delete_time_ = p;
  }
  return _impl_.delete_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Key::mutable_delete_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_delete_time();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.delete_time)
  return _msg;
}
inline void Key::set_allocated_delete_time(::PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delete_time_);
  }
  if (delete_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time));
    if (message_arena != submessage_arena) {
      delete_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delete_time_ = delete_time;
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.delete_time)
}

// map<string, string> annotations = 8;
inline int Key::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int Key::annotations_size() const {
  return _internal_annotations_size();
}
inline void Key::clear_annotations() {
  _impl_.annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Key::_internal_annotations() const {
  return _impl_.annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Key::annotations() const {
  // @@protoc_insertion_point(field_map:google.api.apikeys.v2.Key.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Key::_internal_mutable_annotations() {
  return _impl_.annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Key::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:google.api.apikeys.v2.Key.annotations)
  return _internal_mutable_annotations();
}

// .google.api.apikeys.v2.Restrictions restrictions = 9;
inline bool Key::_internal_has_restrictions() const {
  return this != internal_default_instance() && _impl_.restrictions_ != nullptr;
}
inline bool Key::has_restrictions() const {
  return _internal_has_restrictions();
}
inline void Key::clear_restrictions() {
  if (GetArenaForAllocation() == nullptr && _impl_.restrictions_ != nullptr) {
    delete _impl_.restrictions_;
  }
  _impl_.restrictions_ = nullptr;
}
inline const ::google::api::apikeys::v2::Restrictions& Key::_internal_restrictions() const {
  const ::google::api::apikeys::v2::Restrictions* p = _impl_.restrictions_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::apikeys::v2::Restrictions&>(
      ::google::api::apikeys::v2::_Restrictions_default_instance_);
}
inline const ::google::api::apikeys::v2::Restrictions& Key::restrictions() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.restrictions)
  return _internal_restrictions();
}
inline void Key::unsafe_arena_set_allocated_restrictions(
    ::google::api::apikeys::v2::Restrictions* restrictions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.restrictions_);
  }
  _impl_.restrictions_ = restrictions;
  if (restrictions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.Key.restrictions)
}
inline ::google::api::apikeys::v2::Restrictions* Key::release_restrictions() {
  
  ::google::api::apikeys::v2::Restrictions* temp = _impl_.restrictions_;
  _impl_.restrictions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::apikeys::v2::Restrictions* Key::unsafe_arena_release_restrictions() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.restrictions)
  
  ::google::api::apikeys::v2::Restrictions* temp = _impl_.restrictions_;
  _impl_.restrictions_ = nullptr;
  return temp;
}
inline ::google::api::apikeys::v2::Restrictions* Key::_internal_mutable_restrictions() {
  
  if (_impl_.restrictions_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::apikeys::v2::Restrictions>(GetArenaForAllocation());
    _impl_.restrictions_ = p;
  }
  return _impl_.restrictions_;
}
inline ::google::api::apikeys::v2::Restrictions* Key::mutable_restrictions() {
  ::google::api::apikeys::v2::Restrictions* _msg = _internal_mutable_restrictions();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.restrictions)
  return _msg;
}
inline void Key::set_allocated_restrictions(::google::api::apikeys::v2::Restrictions* restrictions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.restrictions_;
  }
  if (restrictions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(restrictions);
    if (message_arena != submessage_arena) {
      restrictions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restrictions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.restrictions_ = restrictions;
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.restrictions)
}

// string etag = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Key::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& Key::etag() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Key.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Key::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.Key.etag)
}
inline std::string* Key::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Key.etag)
  return _s;
}
inline const std::string& Key::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void Key::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* Key::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* Key::release_etag() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Key.etag)
  return _impl_.etag_.Release();
}
inline void Key::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.Key.etag)
}

// -------------------------------------------------------------------

// Restrictions

// .google.api.apikeys.v2.BrowserKeyRestrictions browser_key_restrictions = 1;
inline bool Restrictions::_internal_has_browser_key_restrictions() const {
  return client_restrictions_case() == kBrowserKeyRestrictions;
}
inline bool Restrictions::has_browser_key_restrictions() const {
  return _internal_has_browser_key_restrictions();
}
inline void Restrictions::set_has_browser_key_restrictions() {
  _impl_._oneof_case_[0] = kBrowserKeyRestrictions;
}
inline void Restrictions::clear_browser_key_restrictions() {
  if (_internal_has_browser_key_restrictions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.client_restrictions_.browser_key_restrictions_;
    }
    clear_has_client_restrictions();
  }
}
inline ::google::api::apikeys::v2::BrowserKeyRestrictions* Restrictions::release_browser_key_restrictions() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Restrictions.browser_key_restrictions)
  if (_internal_has_browser_key_restrictions()) {
    clear_has_client_restrictions();
    ::google::api::apikeys::v2::BrowserKeyRestrictions* temp = _impl_.client_restrictions_.browser_key_restrictions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.client_restrictions_.browser_key_restrictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::apikeys::v2::BrowserKeyRestrictions& Restrictions::_internal_browser_key_restrictions() const {
  return _internal_has_browser_key_restrictions()
      ? *_impl_.client_restrictions_.browser_key_restrictions_
      : reinterpret_cast< ::google::api::apikeys::v2::BrowserKeyRestrictions&>(::google::api::apikeys::v2::_BrowserKeyRestrictions_default_instance_);
}
inline const ::google::api::apikeys::v2::BrowserKeyRestrictions& Restrictions::browser_key_restrictions() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Restrictions.browser_key_restrictions)
  return _internal_browser_key_restrictions();
}
inline ::google::api::apikeys::v2::BrowserKeyRestrictions* Restrictions::unsafe_arena_release_browser_key_restrictions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.apikeys.v2.Restrictions.browser_key_restrictions)
  if (_internal_has_browser_key_restrictions()) {
    clear_has_client_restrictions();
    ::google::api::apikeys::v2::BrowserKeyRestrictions* temp = _impl_.client_restrictions_.browser_key_restrictions_;
    _impl_.client_restrictions_.browser_key_restrictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Restrictions::unsafe_arena_set_allocated_browser_key_restrictions(::google::api::apikeys::v2::BrowserKeyRestrictions* browser_key_restrictions) {
  clear_client_restrictions();
  if (browser_key_restrictions) {
    set_has_browser_key_restrictions();
    _impl_.client_restrictions_.browser_key_restrictions_ = browser_key_restrictions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.Restrictions.browser_key_restrictions)
}
inline ::google::api::apikeys::v2::BrowserKeyRestrictions* Restrictions::_internal_mutable_browser_key_restrictions() {
  if (!_internal_has_browser_key_restrictions()) {
    clear_client_restrictions();
    set_has_browser_key_restrictions();
    _impl_.client_restrictions_.browser_key_restrictions_ = CreateMaybeMessage< ::google::api::apikeys::v2::BrowserKeyRestrictions >(GetArenaForAllocation());
  }
  return _impl_.client_restrictions_.browser_key_restrictions_;
}
inline ::google::api::apikeys::v2::BrowserKeyRestrictions* Restrictions::mutable_browser_key_restrictions() {
  ::google::api::apikeys::v2::BrowserKeyRestrictions* _msg = _internal_mutable_browser_key_restrictions();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Restrictions.browser_key_restrictions)
  return _msg;
}

// .google.api.apikeys.v2.ServerKeyRestrictions server_key_restrictions = 2;
inline bool Restrictions::_internal_has_server_key_restrictions() const {
  return client_restrictions_case() == kServerKeyRestrictions;
}
inline bool Restrictions::has_server_key_restrictions() const {
  return _internal_has_server_key_restrictions();
}
inline void Restrictions::set_has_server_key_restrictions() {
  _impl_._oneof_case_[0] = kServerKeyRestrictions;
}
inline void Restrictions::clear_server_key_restrictions() {
  if (_internal_has_server_key_restrictions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.client_restrictions_.server_key_restrictions_;
    }
    clear_has_client_restrictions();
  }
}
inline ::google::api::apikeys::v2::ServerKeyRestrictions* Restrictions::release_server_key_restrictions() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Restrictions.server_key_restrictions)
  if (_internal_has_server_key_restrictions()) {
    clear_has_client_restrictions();
    ::google::api::apikeys::v2::ServerKeyRestrictions* temp = _impl_.client_restrictions_.server_key_restrictions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.client_restrictions_.server_key_restrictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::apikeys::v2::ServerKeyRestrictions& Restrictions::_internal_server_key_restrictions() const {
  return _internal_has_server_key_restrictions()
      ? *_impl_.client_restrictions_.server_key_restrictions_
      : reinterpret_cast< ::google::api::apikeys::v2::ServerKeyRestrictions&>(::google::api::apikeys::v2::_ServerKeyRestrictions_default_instance_);
}
inline const ::google::api::apikeys::v2::ServerKeyRestrictions& Restrictions::server_key_restrictions() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Restrictions.server_key_restrictions)
  return _internal_server_key_restrictions();
}
inline ::google::api::apikeys::v2::ServerKeyRestrictions* Restrictions::unsafe_arena_release_server_key_restrictions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.apikeys.v2.Restrictions.server_key_restrictions)
  if (_internal_has_server_key_restrictions()) {
    clear_has_client_restrictions();
    ::google::api::apikeys::v2::ServerKeyRestrictions* temp = _impl_.client_restrictions_.server_key_restrictions_;
    _impl_.client_restrictions_.server_key_restrictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Restrictions::unsafe_arena_set_allocated_server_key_restrictions(::google::api::apikeys::v2::ServerKeyRestrictions* server_key_restrictions) {
  clear_client_restrictions();
  if (server_key_restrictions) {
    set_has_server_key_restrictions();
    _impl_.client_restrictions_.server_key_restrictions_ = server_key_restrictions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.Restrictions.server_key_restrictions)
}
inline ::google::api::apikeys::v2::ServerKeyRestrictions* Restrictions::_internal_mutable_server_key_restrictions() {
  if (!_internal_has_server_key_restrictions()) {
    clear_client_restrictions();
    set_has_server_key_restrictions();
    _impl_.client_restrictions_.server_key_restrictions_ = CreateMaybeMessage< ::google::api::apikeys::v2::ServerKeyRestrictions >(GetArenaForAllocation());
  }
  return _impl_.client_restrictions_.server_key_restrictions_;
}
inline ::google::api::apikeys::v2::ServerKeyRestrictions* Restrictions::mutable_server_key_restrictions() {
  ::google::api::apikeys::v2::ServerKeyRestrictions* _msg = _internal_mutable_server_key_restrictions();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Restrictions.server_key_restrictions)
  return _msg;
}

// .google.api.apikeys.v2.AndroidKeyRestrictions android_key_restrictions = 3;
inline bool Restrictions::_internal_has_android_key_restrictions() const {
  return client_restrictions_case() == kAndroidKeyRestrictions;
}
inline bool Restrictions::has_android_key_restrictions() const {
  return _internal_has_android_key_restrictions();
}
inline void Restrictions::set_has_android_key_restrictions() {
  _impl_._oneof_case_[0] = kAndroidKeyRestrictions;
}
inline void Restrictions::clear_android_key_restrictions() {
  if (_internal_has_android_key_restrictions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.client_restrictions_.android_key_restrictions_;
    }
    clear_has_client_restrictions();
  }
}
inline ::google::api::apikeys::v2::AndroidKeyRestrictions* Restrictions::release_android_key_restrictions() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Restrictions.android_key_restrictions)
  if (_internal_has_android_key_restrictions()) {
    clear_has_client_restrictions();
    ::google::api::apikeys::v2::AndroidKeyRestrictions* temp = _impl_.client_restrictions_.android_key_restrictions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.client_restrictions_.android_key_restrictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::apikeys::v2::AndroidKeyRestrictions& Restrictions::_internal_android_key_restrictions() const {
  return _internal_has_android_key_restrictions()
      ? *_impl_.client_restrictions_.android_key_restrictions_
      : reinterpret_cast< ::google::api::apikeys::v2::AndroidKeyRestrictions&>(::google::api::apikeys::v2::_AndroidKeyRestrictions_default_instance_);
}
inline const ::google::api::apikeys::v2::AndroidKeyRestrictions& Restrictions::android_key_restrictions() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Restrictions.android_key_restrictions)
  return _internal_android_key_restrictions();
}
inline ::google::api::apikeys::v2::AndroidKeyRestrictions* Restrictions::unsafe_arena_release_android_key_restrictions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.apikeys.v2.Restrictions.android_key_restrictions)
  if (_internal_has_android_key_restrictions()) {
    clear_has_client_restrictions();
    ::google::api::apikeys::v2::AndroidKeyRestrictions* temp = _impl_.client_restrictions_.android_key_restrictions_;
    _impl_.client_restrictions_.android_key_restrictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Restrictions::unsafe_arena_set_allocated_android_key_restrictions(::google::api::apikeys::v2::AndroidKeyRestrictions* android_key_restrictions) {
  clear_client_restrictions();
  if (android_key_restrictions) {
    set_has_android_key_restrictions();
    _impl_.client_restrictions_.android_key_restrictions_ = android_key_restrictions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.Restrictions.android_key_restrictions)
}
inline ::google::api::apikeys::v2::AndroidKeyRestrictions* Restrictions::_internal_mutable_android_key_restrictions() {
  if (!_internal_has_android_key_restrictions()) {
    clear_client_restrictions();
    set_has_android_key_restrictions();
    _impl_.client_restrictions_.android_key_restrictions_ = CreateMaybeMessage< ::google::api::apikeys::v2::AndroidKeyRestrictions >(GetArenaForAllocation());
  }
  return _impl_.client_restrictions_.android_key_restrictions_;
}
inline ::google::api::apikeys::v2::AndroidKeyRestrictions* Restrictions::mutable_android_key_restrictions() {
  ::google::api::apikeys::v2::AndroidKeyRestrictions* _msg = _internal_mutable_android_key_restrictions();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Restrictions.android_key_restrictions)
  return _msg;
}

// .google.api.apikeys.v2.IosKeyRestrictions ios_key_restrictions = 4;
inline bool Restrictions::_internal_has_ios_key_restrictions() const {
  return client_restrictions_case() == kIosKeyRestrictions;
}
inline bool Restrictions::has_ios_key_restrictions() const {
  return _internal_has_ios_key_restrictions();
}
inline void Restrictions::set_has_ios_key_restrictions() {
  _impl_._oneof_case_[0] = kIosKeyRestrictions;
}
inline void Restrictions::clear_ios_key_restrictions() {
  if (_internal_has_ios_key_restrictions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.client_restrictions_.ios_key_restrictions_;
    }
    clear_has_client_restrictions();
  }
}
inline ::google::api::apikeys::v2::IosKeyRestrictions* Restrictions::release_ios_key_restrictions() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.Restrictions.ios_key_restrictions)
  if (_internal_has_ios_key_restrictions()) {
    clear_has_client_restrictions();
    ::google::api::apikeys::v2::IosKeyRestrictions* temp = _impl_.client_restrictions_.ios_key_restrictions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.client_restrictions_.ios_key_restrictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::apikeys::v2::IosKeyRestrictions& Restrictions::_internal_ios_key_restrictions() const {
  return _internal_has_ios_key_restrictions()
      ? *_impl_.client_restrictions_.ios_key_restrictions_
      : reinterpret_cast< ::google::api::apikeys::v2::IosKeyRestrictions&>(::google::api::apikeys::v2::_IosKeyRestrictions_default_instance_);
}
inline const ::google::api::apikeys::v2::IosKeyRestrictions& Restrictions::ios_key_restrictions() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Restrictions.ios_key_restrictions)
  return _internal_ios_key_restrictions();
}
inline ::google::api::apikeys::v2::IosKeyRestrictions* Restrictions::unsafe_arena_release_ios_key_restrictions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.apikeys.v2.Restrictions.ios_key_restrictions)
  if (_internal_has_ios_key_restrictions()) {
    clear_has_client_restrictions();
    ::google::api::apikeys::v2::IosKeyRestrictions* temp = _impl_.client_restrictions_.ios_key_restrictions_;
    _impl_.client_restrictions_.ios_key_restrictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Restrictions::unsafe_arena_set_allocated_ios_key_restrictions(::google::api::apikeys::v2::IosKeyRestrictions* ios_key_restrictions) {
  clear_client_restrictions();
  if (ios_key_restrictions) {
    set_has_ios_key_restrictions();
    _impl_.client_restrictions_.ios_key_restrictions_ = ios_key_restrictions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.Restrictions.ios_key_restrictions)
}
inline ::google::api::apikeys::v2::IosKeyRestrictions* Restrictions::_internal_mutable_ios_key_restrictions() {
  if (!_internal_has_ios_key_restrictions()) {
    clear_client_restrictions();
    set_has_ios_key_restrictions();
    _impl_.client_restrictions_.ios_key_restrictions_ = CreateMaybeMessage< ::google::api::apikeys::v2::IosKeyRestrictions >(GetArenaForAllocation());
  }
  return _impl_.client_restrictions_.ios_key_restrictions_;
}
inline ::google::api::apikeys::v2::IosKeyRestrictions* Restrictions::mutable_ios_key_restrictions() {
  ::google::api::apikeys::v2::IosKeyRestrictions* _msg = _internal_mutable_ios_key_restrictions();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Restrictions.ios_key_restrictions)
  return _msg;
}

// repeated .google.api.apikeys.v2.ApiTarget api_targets = 5;
inline int Restrictions::_internal_api_targets_size() const {
  return _impl_.api_targets_.size();
}
inline int Restrictions::api_targets_size() const {
  return _internal_api_targets_size();
}
inline void Restrictions::clear_api_targets() {
  _impl_.api_targets_.Clear();
}
inline ::google::api::apikeys::v2::ApiTarget* Restrictions::mutable_api_targets(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.Restrictions.api_targets)
  return _impl_.api_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::ApiTarget >*
Restrictions::mutable_api_targets() {
  // @@protoc_insertion_point(field_mutable_list:google.api.apikeys.v2.Restrictions.api_targets)
  return &_impl_.api_targets_;
}
inline const ::google::api::apikeys::v2::ApiTarget& Restrictions::_internal_api_targets(int index) const {
  return _impl_.api_targets_.Get(index);
}
inline const ::google::api::apikeys::v2::ApiTarget& Restrictions::api_targets(int index) const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.Restrictions.api_targets)
  return _internal_api_targets(index);
}
inline ::google::api::apikeys::v2::ApiTarget* Restrictions::_internal_add_api_targets() {
  return _impl_.api_targets_.Add();
}
inline ::google::api::apikeys::v2::ApiTarget* Restrictions::add_api_targets() {
  ::google::api::apikeys::v2::ApiTarget* _add = _internal_add_api_targets();
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.Restrictions.api_targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::ApiTarget >&
Restrictions::api_targets() const {
  // @@protoc_insertion_point(field_list:google.api.apikeys.v2.Restrictions.api_targets)
  return _impl_.api_targets_;
}

inline bool Restrictions::has_client_restrictions() const {
  return client_restrictions_case() != CLIENT_RESTRICTIONS_NOT_SET;
}
inline void Restrictions::clear_has_client_restrictions() {
  _impl_._oneof_case_[0] = CLIENT_RESTRICTIONS_NOT_SET;
}
inline Restrictions::ClientRestrictionsCase Restrictions::client_restrictions_case() const {
  return Restrictions::ClientRestrictionsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BrowserKeyRestrictions

// repeated string allowed_referrers = 1;
inline int BrowserKeyRestrictions::_internal_allowed_referrers_size() const {
  return _impl_.allowed_referrers_.size();
}
inline int BrowserKeyRestrictions::allowed_referrers_size() const {
  return _internal_allowed_referrers_size();
}
inline void BrowserKeyRestrictions::clear_allowed_referrers() {
  _impl_.allowed_referrers_.Clear();
}
inline std::string* BrowserKeyRestrictions::add_allowed_referrers() {
  std::string* _s = _internal_add_allowed_referrers();
  // @@protoc_insertion_point(field_add_mutable:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
  return _s;
}
inline const std::string& BrowserKeyRestrictions::_internal_allowed_referrers(int index) const {
  return _impl_.allowed_referrers_.Get(index);
}
inline const std::string& BrowserKeyRestrictions::allowed_referrers(int index) const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
  return _internal_allowed_referrers(index);
}
inline std::string* BrowserKeyRestrictions::mutable_allowed_referrers(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
  return _impl_.allowed_referrers_.Mutable(index);
}
inline void BrowserKeyRestrictions::set_allowed_referrers(int index, const std::string& value) {
  _impl_.allowed_referrers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
}
inline void BrowserKeyRestrictions::set_allowed_referrers(int index, std::string&& value) {
  _impl_.allowed_referrers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
}
inline void BrowserKeyRestrictions::set_allowed_referrers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_referrers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
}
inline void BrowserKeyRestrictions::set_allowed_referrers(int index, const char* value, size_t size) {
  _impl_.allowed_referrers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
}
inline std::string* BrowserKeyRestrictions::_internal_add_allowed_referrers() {
  return _impl_.allowed_referrers_.Add();
}
inline void BrowserKeyRestrictions::add_allowed_referrers(const std::string& value) {
  _impl_.allowed_referrers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
}
inline void BrowserKeyRestrictions::add_allowed_referrers(std::string&& value) {
  _impl_.allowed_referrers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
}
inline void BrowserKeyRestrictions::add_allowed_referrers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_referrers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
}
inline void BrowserKeyRestrictions::add_allowed_referrers(const char* value, size_t size) {
  _impl_.allowed_referrers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BrowserKeyRestrictions::allowed_referrers() const {
  // @@protoc_insertion_point(field_list:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
  return _impl_.allowed_referrers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BrowserKeyRestrictions::mutable_allowed_referrers() {
  // @@protoc_insertion_point(field_mutable_list:google.api.apikeys.v2.BrowserKeyRestrictions.allowed_referrers)
  return &_impl_.allowed_referrers_;
}

// -------------------------------------------------------------------

// ServerKeyRestrictions

// repeated string allowed_ips = 1;
inline int ServerKeyRestrictions::_internal_allowed_ips_size() const {
  return _impl_.allowed_ips_.size();
}
inline int ServerKeyRestrictions::allowed_ips_size() const {
  return _internal_allowed_ips_size();
}
inline void ServerKeyRestrictions::clear_allowed_ips() {
  _impl_.allowed_ips_.Clear();
}
inline std::string* ServerKeyRestrictions::add_allowed_ips() {
  std::string* _s = _internal_add_allowed_ips();
  // @@protoc_insertion_point(field_add_mutable:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
  return _s;
}
inline const std::string& ServerKeyRestrictions::_internal_allowed_ips(int index) const {
  return _impl_.allowed_ips_.Get(index);
}
inline const std::string& ServerKeyRestrictions::allowed_ips(int index) const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
  return _internal_allowed_ips(index);
}
inline std::string* ServerKeyRestrictions::mutable_allowed_ips(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
  return _impl_.allowed_ips_.Mutable(index);
}
inline void ServerKeyRestrictions::set_allowed_ips(int index, const std::string& value) {
  _impl_.allowed_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
}
inline void ServerKeyRestrictions::set_allowed_ips(int index, std::string&& value) {
  _impl_.allowed_ips_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
}
inline void ServerKeyRestrictions::set_allowed_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
}
inline void ServerKeyRestrictions::set_allowed_ips(int index, const char* value, size_t size) {
  _impl_.allowed_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
}
inline std::string* ServerKeyRestrictions::_internal_add_allowed_ips() {
  return _impl_.allowed_ips_.Add();
}
inline void ServerKeyRestrictions::add_allowed_ips(const std::string& value) {
  _impl_.allowed_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
}
inline void ServerKeyRestrictions::add_allowed_ips(std::string&& value) {
  _impl_.allowed_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
}
inline void ServerKeyRestrictions::add_allowed_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
}
inline void ServerKeyRestrictions::add_allowed_ips(const char* value, size_t size) {
  _impl_.allowed_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServerKeyRestrictions::allowed_ips() const {
  // @@protoc_insertion_point(field_list:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
  return _impl_.allowed_ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServerKeyRestrictions::mutable_allowed_ips() {
  // @@protoc_insertion_point(field_mutable_list:google.api.apikeys.v2.ServerKeyRestrictions.allowed_ips)
  return &_impl_.allowed_ips_;
}

// -------------------------------------------------------------------

// AndroidKeyRestrictions

// repeated .google.api.apikeys.v2.AndroidApplication allowed_applications = 1;
inline int AndroidKeyRestrictions::_internal_allowed_applications_size() const {
  return _impl_.allowed_applications_.size();
}
inline int AndroidKeyRestrictions::allowed_applications_size() const {
  return _internal_allowed_applications_size();
}
inline void AndroidKeyRestrictions::clear_allowed_applications() {
  _impl_.allowed_applications_.Clear();
}
inline ::google::api::apikeys::v2::AndroidApplication* AndroidKeyRestrictions::mutable_allowed_applications(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.AndroidKeyRestrictions.allowed_applications)
  return _impl_.allowed_applications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::AndroidApplication >*
AndroidKeyRestrictions::mutable_allowed_applications() {
  // @@protoc_insertion_point(field_mutable_list:google.api.apikeys.v2.AndroidKeyRestrictions.allowed_applications)
  return &_impl_.allowed_applications_;
}
inline const ::google::api::apikeys::v2::AndroidApplication& AndroidKeyRestrictions::_internal_allowed_applications(int index) const {
  return _impl_.allowed_applications_.Get(index);
}
inline const ::google::api::apikeys::v2::AndroidApplication& AndroidKeyRestrictions::allowed_applications(int index) const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.AndroidKeyRestrictions.allowed_applications)
  return _internal_allowed_applications(index);
}
inline ::google::api::apikeys::v2::AndroidApplication* AndroidKeyRestrictions::_internal_add_allowed_applications() {
  return _impl_.allowed_applications_.Add();
}
inline ::google::api::apikeys::v2::AndroidApplication* AndroidKeyRestrictions::add_allowed_applications() {
  ::google::api::apikeys::v2::AndroidApplication* _add = _internal_add_allowed_applications();
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.AndroidKeyRestrictions.allowed_applications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::AndroidApplication >&
AndroidKeyRestrictions::allowed_applications() const {
  // @@protoc_insertion_point(field_list:google.api.apikeys.v2.AndroidKeyRestrictions.allowed_applications)
  return _impl_.allowed_applications_;
}

// -------------------------------------------------------------------

// AndroidApplication

// string sha1_fingerprint = 1;
inline void AndroidApplication::clear_sha1_fingerprint() {
  _impl_.sha1_fingerprint_.ClearToEmpty();
}
inline const std::string& AndroidApplication::sha1_fingerprint() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.AndroidApplication.sha1_fingerprint)
  return _internal_sha1_fingerprint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidApplication::set_sha1_fingerprint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sha1_fingerprint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.AndroidApplication.sha1_fingerprint)
}
inline std::string* AndroidApplication::mutable_sha1_fingerprint() {
  std::string* _s = _internal_mutable_sha1_fingerprint();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.AndroidApplication.sha1_fingerprint)
  return _s;
}
inline const std::string& AndroidApplication::_internal_sha1_fingerprint() const {
  return _impl_.sha1_fingerprint_.Get();
}
inline void AndroidApplication::_internal_set_sha1_fingerprint(const std::string& value) {
  
  _impl_.sha1_fingerprint_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidApplication::_internal_mutable_sha1_fingerprint() {
  
  return _impl_.sha1_fingerprint_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidApplication::release_sha1_fingerprint() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.AndroidApplication.sha1_fingerprint)
  return _impl_.sha1_fingerprint_.Release();
}
inline void AndroidApplication::set_allocated_sha1_fingerprint(std::string* sha1_fingerprint) {
  if (sha1_fingerprint != nullptr) {
    
  } else {
    
  }
  _impl_.sha1_fingerprint_.SetAllocated(sha1_fingerprint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sha1_fingerprint_.IsDefault()) {
    _impl_.sha1_fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.AndroidApplication.sha1_fingerprint)
}

// string package_name = 2;
inline void AndroidApplication::clear_package_name() {
  _impl_.package_name_.ClearToEmpty();
}
inline const std::string& AndroidApplication::package_name() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.AndroidApplication.package_name)
  return _internal_package_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AndroidApplication::set_package_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.package_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.AndroidApplication.package_name)
}
inline std::string* AndroidApplication::mutable_package_name() {
  std::string* _s = _internal_mutable_package_name();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.AndroidApplication.package_name)
  return _s;
}
inline const std::string& AndroidApplication::_internal_package_name() const {
  return _impl_.package_name_.Get();
}
inline void AndroidApplication::_internal_set_package_name(const std::string& value) {
  
  _impl_.package_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidApplication::_internal_mutable_package_name() {
  
  return _impl_.package_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AndroidApplication::release_package_name() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.AndroidApplication.package_name)
  return _impl_.package_name_.Release();
}
inline void AndroidApplication::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    
  } else {
    
  }
  _impl_.package_name_.SetAllocated(package_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.package_name_.IsDefault()) {
    _impl_.package_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.AndroidApplication.package_name)
}

// -------------------------------------------------------------------

// IosKeyRestrictions

// repeated string allowed_bundle_ids = 1;
inline int IosKeyRestrictions::_internal_allowed_bundle_ids_size() const {
  return _impl_.allowed_bundle_ids_.size();
}
inline int IosKeyRestrictions::allowed_bundle_ids_size() const {
  return _internal_allowed_bundle_ids_size();
}
inline void IosKeyRestrictions::clear_allowed_bundle_ids() {
  _impl_.allowed_bundle_ids_.Clear();
}
inline std::string* IosKeyRestrictions::add_allowed_bundle_ids() {
  std::string* _s = _internal_add_allowed_bundle_ids();
  // @@protoc_insertion_point(field_add_mutable:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
  return _s;
}
inline const std::string& IosKeyRestrictions::_internal_allowed_bundle_ids(int index) const {
  return _impl_.allowed_bundle_ids_.Get(index);
}
inline const std::string& IosKeyRestrictions::allowed_bundle_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
  return _internal_allowed_bundle_ids(index);
}
inline std::string* IosKeyRestrictions::mutable_allowed_bundle_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
  return _impl_.allowed_bundle_ids_.Mutable(index);
}
inline void IosKeyRestrictions::set_allowed_bundle_ids(int index, const std::string& value) {
  _impl_.allowed_bundle_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
}
inline void IosKeyRestrictions::set_allowed_bundle_ids(int index, std::string&& value) {
  _impl_.allowed_bundle_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
}
inline void IosKeyRestrictions::set_allowed_bundle_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_bundle_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
}
inline void IosKeyRestrictions::set_allowed_bundle_ids(int index, const char* value, size_t size) {
  _impl_.allowed_bundle_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
}
inline std::string* IosKeyRestrictions::_internal_add_allowed_bundle_ids() {
  return _impl_.allowed_bundle_ids_.Add();
}
inline void IosKeyRestrictions::add_allowed_bundle_ids(const std::string& value) {
  _impl_.allowed_bundle_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
}
inline void IosKeyRestrictions::add_allowed_bundle_ids(std::string&& value) {
  _impl_.allowed_bundle_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
}
inline void IosKeyRestrictions::add_allowed_bundle_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.allowed_bundle_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
}
inline void IosKeyRestrictions::add_allowed_bundle_ids(const char* value, size_t size) {
  _impl_.allowed_bundle_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IosKeyRestrictions::allowed_bundle_ids() const {
  // @@protoc_insertion_point(field_list:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
  return _impl_.allowed_bundle_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IosKeyRestrictions::mutable_allowed_bundle_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.api.apikeys.v2.IosKeyRestrictions.allowed_bundle_ids)
  return &_impl_.allowed_bundle_ids_;
}

// -------------------------------------------------------------------

// ApiTarget

// string service = 1;
inline void ApiTarget::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& ApiTarget::service() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ApiTarget.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiTarget::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ApiTarget.service)
}
inline std::string* ApiTarget::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.ApiTarget.service)
  return _s;
}
inline const std::string& ApiTarget::_internal_service() const {
  return _impl_.service_.Get();
}
inline void ApiTarget::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* ApiTarget::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* ApiTarget::release_service() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.ApiTarget.service)
  return _impl_.service_.Release();
}
inline void ApiTarget::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.ApiTarget.service)
}

// repeated string methods = 2 [(.google.api.field_behavior) = OPTIONAL];
inline int ApiTarget::_internal_methods_size() const {
  return _impl_.methods_.size();
}
inline int ApiTarget::methods_size() const {
  return _internal_methods_size();
}
inline void ApiTarget::clear_methods() {
  _impl_.methods_.Clear();
}
inline std::string* ApiTarget::add_methods() {
  std::string* _s = _internal_add_methods();
  // @@protoc_insertion_point(field_add_mutable:google.api.apikeys.v2.ApiTarget.methods)
  return _s;
}
inline const std::string& ApiTarget::_internal_methods(int index) const {
  return _impl_.methods_.Get(index);
}
inline const std::string& ApiTarget::methods(int index) const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ApiTarget.methods)
  return _internal_methods(index);
}
inline std::string* ApiTarget::mutable_methods(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.ApiTarget.methods)
  return _impl_.methods_.Mutable(index);
}
inline void ApiTarget::set_methods(int index, const std::string& value) {
  _impl_.methods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ApiTarget.methods)
}
inline void ApiTarget::set_methods(int index, std::string&& value) {
  _impl_.methods_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ApiTarget.methods)
}
inline void ApiTarget::set_methods(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.methods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.apikeys.v2.ApiTarget.methods)
}
inline void ApiTarget::set_methods(int index, const char* value, size_t size) {
  _impl_.methods_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.apikeys.v2.ApiTarget.methods)
}
inline std::string* ApiTarget::_internal_add_methods() {
  return _impl_.methods_.Add();
}
inline void ApiTarget::add_methods(const std::string& value) {
  _impl_.methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.ApiTarget.methods)
}
inline void ApiTarget::add_methods(std::string&& value) {
  _impl_.methods_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.ApiTarget.methods)
}
inline void ApiTarget::add_methods(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.apikeys.v2.ApiTarget.methods)
}
inline void ApiTarget::add_methods(const char* value, size_t size) {
  _impl_.methods_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.apikeys.v2.ApiTarget.methods)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApiTarget::methods() const {
  // @@protoc_insertion_point(field_list:google.api.apikeys.v2.ApiTarget.methods)
  return _impl_.methods_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApiTarget::mutable_methods() {
  // @@protoc_insertion_point(field_mutable_list:google.api.apikeys.v2.ApiTarget.methods)
  return &_impl_.methods_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace apikeys
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fapikeys_2fv2_2fresources_2eproto

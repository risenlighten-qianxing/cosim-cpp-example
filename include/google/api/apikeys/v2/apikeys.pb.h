// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/apikeys/v2/apikeys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/apikeys/v2/resources.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
namespace google {
namespace api {
namespace apikeys {
namespace v2 {
class CreateKeyRequest;
struct CreateKeyRequestDefaultTypeInternal;
extern CreateKeyRequestDefaultTypeInternal _CreateKeyRequest_default_instance_;
class DeleteKeyRequest;
struct DeleteKeyRequestDefaultTypeInternal;
extern DeleteKeyRequestDefaultTypeInternal _DeleteKeyRequest_default_instance_;
class GetKeyRequest;
struct GetKeyRequestDefaultTypeInternal;
extern GetKeyRequestDefaultTypeInternal _GetKeyRequest_default_instance_;
class GetKeyStringRequest;
struct GetKeyStringRequestDefaultTypeInternal;
extern GetKeyStringRequestDefaultTypeInternal _GetKeyStringRequest_default_instance_;
class GetKeyStringResponse;
struct GetKeyStringResponseDefaultTypeInternal;
extern GetKeyStringResponseDefaultTypeInternal _GetKeyStringResponse_default_instance_;
class ListKeysRequest;
struct ListKeysRequestDefaultTypeInternal;
extern ListKeysRequestDefaultTypeInternal _ListKeysRequest_default_instance_;
class ListKeysResponse;
struct ListKeysResponseDefaultTypeInternal;
extern ListKeysResponseDefaultTypeInternal _ListKeysResponse_default_instance_;
class LookupKeyRequest;
struct LookupKeyRequestDefaultTypeInternal;
extern LookupKeyRequestDefaultTypeInternal _LookupKeyRequest_default_instance_;
class LookupKeyResponse;
struct LookupKeyResponseDefaultTypeInternal;
extern LookupKeyResponseDefaultTypeInternal _LookupKeyResponse_default_instance_;
class UndeleteKeyRequest;
struct UndeleteKeyRequestDefaultTypeInternal;
extern UndeleteKeyRequestDefaultTypeInternal _UndeleteKeyRequest_default_instance_;
class UpdateKeyRequest;
struct UpdateKeyRequestDefaultTypeInternal;
extern UpdateKeyRequestDefaultTypeInternal _UpdateKeyRequest_default_instance_;
}  // namespace v2
}  // namespace apikeys
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::apikeys::v2::CreateKeyRequest* Arena::CreateMaybeMessage<::google::api::apikeys::v2::CreateKeyRequest>(Arena*);
template<> ::google::api::apikeys::v2::DeleteKeyRequest* Arena::CreateMaybeMessage<::google::api::apikeys::v2::DeleteKeyRequest>(Arena*);
template<> ::google::api::apikeys::v2::GetKeyRequest* Arena::CreateMaybeMessage<::google::api::apikeys::v2::GetKeyRequest>(Arena*);
template<> ::google::api::apikeys::v2::GetKeyStringRequest* Arena::CreateMaybeMessage<::google::api::apikeys::v2::GetKeyStringRequest>(Arena*);
template<> ::google::api::apikeys::v2::GetKeyStringResponse* Arena::CreateMaybeMessage<::google::api::apikeys::v2::GetKeyStringResponse>(Arena*);
template<> ::google::api::apikeys::v2::ListKeysRequest* Arena::CreateMaybeMessage<::google::api::apikeys::v2::ListKeysRequest>(Arena*);
template<> ::google::api::apikeys::v2::ListKeysResponse* Arena::CreateMaybeMessage<::google::api::apikeys::v2::ListKeysResponse>(Arena*);
template<> ::google::api::apikeys::v2::LookupKeyRequest* Arena::CreateMaybeMessage<::google::api::apikeys::v2::LookupKeyRequest>(Arena*);
template<> ::google::api::apikeys::v2::LookupKeyResponse* Arena::CreateMaybeMessage<::google::api::apikeys::v2::LookupKeyResponse>(Arena*);
template<> ::google::api::apikeys::v2::UndeleteKeyRequest* Arena::CreateMaybeMessage<::google::api::apikeys::v2::UndeleteKeyRequest>(Arena*);
template<> ::google::api::apikeys::v2::UpdateKeyRequest* Arena::CreateMaybeMessage<::google::api::apikeys::v2::UpdateKeyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace apikeys {
namespace v2 {

// ===================================================================

class CreateKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.CreateKeyRequest) */ {
 public:
  inline CreateKeyRequest() : CreateKeyRequest(nullptr) {}
  ~CreateKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateKeyRequest(const CreateKeyRequest& from);
  CreateKeyRequest(CreateKeyRequest&& from) noexcept
    : CreateKeyRequest() {
    *this = ::std::move(from);
  }

  inline CreateKeyRequest& operator=(const CreateKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateKeyRequest& operator=(CreateKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateKeyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateKeyRequest*>(
               &_CreateKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateKeyRequest& a, CreateKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateKeyRequest& from) {
    CreateKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.CreateKeyRequest";
  }
  protected:
  explicit CreateKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kKeyIdFieldNumber = 3,
    kKeyFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string key_id = 3;
  void clear_key_id();
  const std::string& key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_id();
  PROTOBUF_NODISCARD std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // .google.api.apikeys.v2.Key key = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::google::api::apikeys::v2::Key& key() const;
  PROTOBUF_NODISCARD ::google::api::apikeys::v2::Key* release_key();
  ::google::api::apikeys::v2::Key* mutable_key();
  void set_allocated_key(::google::api::apikeys::v2::Key* key);
  private:
  const ::google::api::apikeys::v2::Key& _internal_key() const;
  ::google::api::apikeys::v2::Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::google::api::apikeys::v2::Key* key);
  ::google::api::apikeys::v2::Key* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.CreateKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
    ::google::api::apikeys::v2::Key* key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class ListKeysRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.ListKeysRequest) */ {
 public:
  inline ListKeysRequest() : ListKeysRequest(nullptr) {}
  ~ListKeysRequest() override;
  explicit PROTOBUF_CONSTEXPR ListKeysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListKeysRequest(const ListKeysRequest& from);
  ListKeysRequest(ListKeysRequest&& from) noexcept
    : ListKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListKeysRequest& operator=(const ListKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListKeysRequest& operator=(ListKeysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListKeysRequest*>(
               &_ListKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListKeysRequest& a, ListKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListKeysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListKeysRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListKeysRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListKeysRequest& from) {
    ListKeysRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListKeysRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.ListKeysRequest";
  }
  protected:
  explicit ListKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
    kShowDeletedFieldNumber = 6,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // bool show_deleted = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_show_deleted();
  bool show_deleted() const;
  void set_show_deleted(bool value);
  private:
  bool _internal_show_deleted() const;
  void _internal_set_show_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.ListKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    bool show_deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class ListKeysResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.ListKeysResponse) */ {
 public:
  inline ListKeysResponse() : ListKeysResponse(nullptr) {}
  ~ListKeysResponse() override;
  explicit PROTOBUF_CONSTEXPR ListKeysResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListKeysResponse(const ListKeysResponse& from);
  ListKeysResponse(ListKeysResponse&& from) noexcept
    : ListKeysResponse() {
    *this = ::std::move(from);
  }

  inline ListKeysResponse& operator=(const ListKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListKeysResponse& operator=(ListKeysResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListKeysResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListKeysResponse* internal_default_instance() {
    return reinterpret_cast<const ListKeysResponse*>(
               &_ListKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListKeysResponse& a, ListKeysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListKeysResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListKeysResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListKeysResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListKeysResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListKeysResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListKeysResponse& from) {
    ListKeysResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListKeysResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.ListKeysResponse";
  }
  protected:
  explicit ListKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.api.apikeys.v2.Key keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::google::api::apikeys::v2::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::Key >*
      mutable_keys();
  private:
  const ::google::api::apikeys::v2::Key& _internal_keys(int index) const;
  ::google::api::apikeys::v2::Key* _internal_add_keys();
  public:
  const ::google::api::apikeys::v2::Key& keys(int index) const;
  ::google::api::apikeys::v2::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::Key >&
      keys() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.ListKeysResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::Key > keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class GetKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.GetKeyRequest) */ {
 public:
  inline GetKeyRequest() : GetKeyRequest(nullptr) {}
  ~GetKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKeyRequest(const GetKeyRequest& from);
  GetKeyRequest(GetKeyRequest&& from) noexcept
    : GetKeyRequest() {
    *this = ::std::move(from);
  }

  inline GetKeyRequest& operator=(const GetKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKeyRequest& operator=(GetKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GetKeyRequest*>(
               &_GetKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetKeyRequest& a, GetKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKeyRequest& from) {
    GetKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.GetKeyRequest";
  }
  protected:
  explicit GetKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.GetKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class GetKeyStringRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.GetKeyStringRequest) */ {
 public:
  inline GetKeyStringRequest() : GetKeyStringRequest(nullptr) {}
  ~GetKeyStringRequest() override;
  explicit PROTOBUF_CONSTEXPR GetKeyStringRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKeyStringRequest(const GetKeyStringRequest& from);
  GetKeyStringRequest(GetKeyStringRequest&& from) noexcept
    : GetKeyStringRequest() {
    *this = ::std::move(from);
  }

  inline GetKeyStringRequest& operator=(const GetKeyStringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKeyStringRequest& operator=(GetKeyStringRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKeyStringRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKeyStringRequest* internal_default_instance() {
    return reinterpret_cast<const GetKeyStringRequest*>(
               &_GetKeyStringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetKeyStringRequest& a, GetKeyStringRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKeyStringRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKeyStringRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKeyStringRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKeyStringRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKeyStringRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKeyStringRequest& from) {
    GetKeyStringRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKeyStringRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.GetKeyStringRequest";
  }
  protected:
  explicit GetKeyStringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.GetKeyStringRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class GetKeyStringResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.GetKeyStringResponse) */ {
 public:
  inline GetKeyStringResponse() : GetKeyStringResponse(nullptr) {}
  ~GetKeyStringResponse() override;
  explicit PROTOBUF_CONSTEXPR GetKeyStringResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKeyStringResponse(const GetKeyStringResponse& from);
  GetKeyStringResponse(GetKeyStringResponse&& from) noexcept
    : GetKeyStringResponse() {
    *this = ::std::move(from);
  }

  inline GetKeyStringResponse& operator=(const GetKeyStringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKeyStringResponse& operator=(GetKeyStringResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKeyStringResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKeyStringResponse* internal_default_instance() {
    return reinterpret_cast<const GetKeyStringResponse*>(
               &_GetKeyStringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetKeyStringResponse& a, GetKeyStringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKeyStringResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKeyStringResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKeyStringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKeyStringResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKeyStringResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKeyStringResponse& from) {
    GetKeyStringResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKeyStringResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.GetKeyStringResponse";
  }
  protected:
  explicit GetKeyStringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyStringFieldNumber = 1,
  };
  // string key_string = 1;
  void clear_key_string();
  const std::string& key_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_string();
  PROTOBUF_NODISCARD std::string* release_key_string();
  void set_allocated_key_string(std::string* key_string);
  private:
  const std::string& _internal_key_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_string(const std::string& value);
  std::string* _internal_mutable_key_string();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.GetKeyStringResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_string_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class UpdateKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.UpdateKeyRequest) */ {
 public:
  inline UpdateKeyRequest() : UpdateKeyRequest(nullptr) {}
  ~UpdateKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateKeyRequest(const UpdateKeyRequest& from);
  UpdateKeyRequest(UpdateKeyRequest&& from) noexcept
    : UpdateKeyRequest() {
    *this = ::std::move(from);
  }

  inline UpdateKeyRequest& operator=(const UpdateKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateKeyRequest& operator=(UpdateKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateKeyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateKeyRequest*>(
               &_UpdateKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateKeyRequest& a, UpdateKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateKeyRequest& from) {
    UpdateKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.UpdateKeyRequest";
  }
  protected:
  explicit UpdateKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .google.api.apikeys.v2.Key key = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::google::api::apikeys::v2::Key& key() const;
  PROTOBUF_NODISCARD ::google::api::apikeys::v2::Key* release_key();
  ::google::api::apikeys::v2::Key* mutable_key();
  void set_allocated_key(::google::api::apikeys::v2::Key* key);
  private:
  const ::google::api::apikeys::v2::Key& _internal_key() const;
  ::google::api::apikeys::v2::Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::google::api::apikeys::v2::Key* key);
  ::google::api::apikeys::v2::Key* unsafe_arena_release_key();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.UpdateKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::api::apikeys::v2::Key* key_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class DeleteKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.DeleteKeyRequest) */ {
 public:
  inline DeleteKeyRequest() : DeleteKeyRequest(nullptr) {}
  ~DeleteKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteKeyRequest(const DeleteKeyRequest& from);
  DeleteKeyRequest(DeleteKeyRequest&& from) noexcept
    : DeleteKeyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteKeyRequest& operator=(const DeleteKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteKeyRequest& operator=(DeleteKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteKeyRequest*>(
               &_DeleteKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteKeyRequest& a, DeleteKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteKeyRequest& from) {
    DeleteKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.DeleteKeyRequest";
  }
  protected:
  explicit DeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEtagFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string etag = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_etag();
  const std::string& etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.DeleteKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class UndeleteKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.UndeleteKeyRequest) */ {
 public:
  inline UndeleteKeyRequest() : UndeleteKeyRequest(nullptr) {}
  ~UndeleteKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR UndeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndeleteKeyRequest(const UndeleteKeyRequest& from);
  UndeleteKeyRequest(UndeleteKeyRequest&& from) noexcept
    : UndeleteKeyRequest() {
    *this = ::std::move(from);
  }

  inline UndeleteKeyRequest& operator=(const UndeleteKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndeleteKeyRequest& operator=(UndeleteKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndeleteKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndeleteKeyRequest* internal_default_instance() {
    return reinterpret_cast<const UndeleteKeyRequest*>(
               &_UndeleteKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UndeleteKeyRequest& a, UndeleteKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UndeleteKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndeleteKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UndeleteKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UndeleteKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UndeleteKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UndeleteKeyRequest& from) {
    UndeleteKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndeleteKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.UndeleteKeyRequest";
  }
  protected:
  explicit UndeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.UndeleteKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class LookupKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.LookupKeyRequest) */ {
 public:
  inline LookupKeyRequest() : LookupKeyRequest(nullptr) {}
  ~LookupKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR LookupKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupKeyRequest(const LookupKeyRequest& from);
  LookupKeyRequest(LookupKeyRequest&& from) noexcept
    : LookupKeyRequest() {
    *this = ::std::move(from);
  }

  inline LookupKeyRequest& operator=(const LookupKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupKeyRequest& operator=(LookupKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LookupKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupKeyRequest* internal_default_instance() {
    return reinterpret_cast<const LookupKeyRequest*>(
               &_LookupKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LookupKeyRequest& a, LookupKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LookupKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LookupKeyRequest& from) {
    LookupKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookupKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.LookupKeyRequest";
  }
  protected:
  explicit LookupKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyStringFieldNumber = 1,
  };
  // string key_string = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_key_string();
  const std::string& key_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_string();
  PROTOBUF_NODISCARD std::string* release_key_string();
  void set_allocated_key_string(std::string* key_string);
  private:
  const std::string& _internal_key_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_string(const std::string& value);
  std::string* _internal_mutable_key_string();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.LookupKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_string_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// -------------------------------------------------------------------

class LookupKeyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.apikeys.v2.LookupKeyResponse) */ {
 public:
  inline LookupKeyResponse() : LookupKeyResponse(nullptr) {}
  ~LookupKeyResponse() override;
  explicit PROTOBUF_CONSTEXPR LookupKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupKeyResponse(const LookupKeyResponse& from);
  LookupKeyResponse(LookupKeyResponse&& from) noexcept
    : LookupKeyResponse() {
    *this = ::std::move(from);
  }

  inline LookupKeyResponse& operator=(const LookupKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupKeyResponse& operator=(LookupKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LookupKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupKeyResponse* internal_default_instance() {
    return reinterpret_cast<const LookupKeyResponse*>(
               &_LookupKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LookupKeyResponse& a, LookupKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupKeyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupKeyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LookupKeyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LookupKeyResponse& from) {
    LookupKeyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookupKeyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.apikeys.v2.LookupKeyResponse";
  }
  protected:
  explicit LookupKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.apikeys.v2.LookupKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateKeyRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateKeyRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateKeyRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.CreateKeyRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateKeyRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.CreateKeyRequest.parent)
}
inline std::string* CreateKeyRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.CreateKeyRequest.parent)
  return _s;
}
inline const std::string& CreateKeyRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateKeyRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateKeyRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateKeyRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.CreateKeyRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateKeyRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.CreateKeyRequest.parent)
}

// .google.api.apikeys.v2.Key key = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateKeyRequest::_internal_has_key() const {
  return this != internal_default_instance() && _impl_.key_ != nullptr;
}
inline bool CreateKeyRequest::has_key() const {
  return _internal_has_key();
}
inline const ::google::api::apikeys::v2::Key& CreateKeyRequest::_internal_key() const {
  const ::google::api::apikeys::v2::Key* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::apikeys::v2::Key&>(
      ::google::api::apikeys::v2::_Key_default_instance_);
}
inline const ::google::api::apikeys::v2::Key& CreateKeyRequest::key() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.CreateKeyRequest.key)
  return _internal_key();
}
inline void CreateKeyRequest::unsafe_arena_set_allocated_key(
    ::google::api::apikeys::v2::Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.CreateKeyRequest.key)
}
inline ::google::api::apikeys::v2::Key* CreateKeyRequest::release_key() {
  
  ::google::api::apikeys::v2::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::apikeys::v2::Key* CreateKeyRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.CreateKeyRequest.key)
  
  ::google::api::apikeys::v2::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::google::api::apikeys::v2::Key* CreateKeyRequest::_internal_mutable_key() {
  
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::apikeys::v2::Key>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::google::api::apikeys::v2::Key* CreateKeyRequest::mutable_key() {
  ::google::api::apikeys::v2::Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.CreateKeyRequest.key)
  return _msg;
}
inline void CreateKeyRequest::set_allocated_key(::google::api::apikeys::v2::Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.CreateKeyRequest.key)
}

// string key_id = 3;
inline void CreateKeyRequest::clear_key_id() {
  _impl_.key_id_.ClearToEmpty();
}
inline const std::string& CreateKeyRequest::key_id() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.CreateKeyRequest.key_id)
  return _internal_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateKeyRequest::set_key_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.CreateKeyRequest.key_id)
}
inline std::string* CreateKeyRequest::mutable_key_id() {
  std::string* _s = _internal_mutable_key_id();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.CreateKeyRequest.key_id)
  return _s;
}
inline const std::string& CreateKeyRequest::_internal_key_id() const {
  return _impl_.key_id_.Get();
}
inline void CreateKeyRequest::_internal_set_key_id(const std::string& value) {
  
  _impl_.key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateKeyRequest::_internal_mutable_key_id() {
  
  return _impl_.key_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateKeyRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.CreateKeyRequest.key_id)
  return _impl_.key_id_.Release();
}
inline void CreateKeyRequest::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  _impl_.key_id_.SetAllocated(key_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_id_.IsDefault()) {
    _impl_.key_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.CreateKeyRequest.key_id)
}

// -------------------------------------------------------------------

// ListKeysRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListKeysRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListKeysRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ListKeysRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListKeysRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ListKeysRequest.parent)
}
inline std::string* ListKeysRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.ListKeysRequest.parent)
  return _s;
}
inline const std::string& ListKeysRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListKeysRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListKeysRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListKeysRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.ListKeysRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListKeysRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.ListKeysRequest.parent)
}

// int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ListKeysRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListKeysRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListKeysRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ListKeysRequest.page_size)
  return _internal_page_size();
}
inline void ListKeysRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListKeysRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ListKeysRequest.page_size)
}

// string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void ListKeysRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListKeysRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ListKeysRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListKeysRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ListKeysRequest.page_token)
}
inline std::string* ListKeysRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.ListKeysRequest.page_token)
  return _s;
}
inline const std::string& ListKeysRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListKeysRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListKeysRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListKeysRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.ListKeysRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListKeysRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.ListKeysRequest.page_token)
}

// bool show_deleted = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void ListKeysRequest::clear_show_deleted() {
  _impl_.show_deleted_ = false;
}
inline bool ListKeysRequest::_internal_show_deleted() const {
  return _impl_.show_deleted_;
}
inline bool ListKeysRequest::show_deleted() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ListKeysRequest.show_deleted)
  return _internal_show_deleted();
}
inline void ListKeysRequest::_internal_set_show_deleted(bool value) {
  
  _impl_.show_deleted_ = value;
}
inline void ListKeysRequest::set_show_deleted(bool value) {
  _internal_set_show_deleted(value);
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ListKeysRequest.show_deleted)
}

// -------------------------------------------------------------------

// ListKeysResponse

// repeated .google.api.apikeys.v2.Key keys = 1;
inline int ListKeysResponse::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int ListKeysResponse::keys_size() const {
  return _internal_keys_size();
}
inline ::google::api::apikeys::v2::Key* ListKeysResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.ListKeysResponse.keys)
  return _impl_.keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::Key >*
ListKeysResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.api.apikeys.v2.ListKeysResponse.keys)
  return &_impl_.keys_;
}
inline const ::google::api::apikeys::v2::Key& ListKeysResponse::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const ::google::api::apikeys::v2::Key& ListKeysResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ListKeysResponse.keys)
  return _internal_keys(index);
}
inline ::google::api::apikeys::v2::Key* ListKeysResponse::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline ::google::api::apikeys::v2::Key* ListKeysResponse::add_keys() {
  ::google::api::apikeys::v2::Key* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:google.api.apikeys.v2.ListKeysResponse.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::apikeys::v2::Key >&
ListKeysResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.api.apikeys.v2.ListKeysResponse.keys)
  return _impl_.keys_;
}

// string next_page_token = 2;
inline void ListKeysResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListKeysResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.ListKeysResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListKeysResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.ListKeysResponse.next_page_token)
}
inline std::string* ListKeysResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.ListKeysResponse.next_page_token)
  return _s;
}
inline const std::string& ListKeysResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListKeysResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListKeysResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListKeysResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.ListKeysResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListKeysResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.ListKeysResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetKeyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.GetKeyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetKeyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.GetKeyRequest.name)
}
inline std::string* GetKeyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.GetKeyRequest.name)
  return _s;
}
inline const std::string& GetKeyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetKeyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetKeyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.GetKeyRequest.name)
  return _impl_.name_.Release();
}
inline void GetKeyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.GetKeyRequest.name)
}

// -------------------------------------------------------------------

// GetKeyStringRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetKeyStringRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetKeyStringRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.GetKeyStringRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetKeyStringRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.GetKeyStringRequest.name)
}
inline std::string* GetKeyStringRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.GetKeyStringRequest.name)
  return _s;
}
inline const std::string& GetKeyStringRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetKeyStringRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetKeyStringRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetKeyStringRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.GetKeyStringRequest.name)
  return _impl_.name_.Release();
}
inline void GetKeyStringRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.GetKeyStringRequest.name)
}

// -------------------------------------------------------------------

// GetKeyStringResponse

// string key_string = 1;
inline void GetKeyStringResponse::clear_key_string() {
  _impl_.key_string_.ClearToEmpty();
}
inline const std::string& GetKeyStringResponse::key_string() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.GetKeyStringResponse.key_string)
  return _internal_key_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetKeyStringResponse::set_key_string(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.GetKeyStringResponse.key_string)
}
inline std::string* GetKeyStringResponse::mutable_key_string() {
  std::string* _s = _internal_mutable_key_string();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.GetKeyStringResponse.key_string)
  return _s;
}
inline const std::string& GetKeyStringResponse::_internal_key_string() const {
  return _impl_.key_string_.Get();
}
inline void GetKeyStringResponse::_internal_set_key_string(const std::string& value) {
  
  _impl_.key_string_.Set(value, GetArenaForAllocation());
}
inline std::string* GetKeyStringResponse::_internal_mutable_key_string() {
  
  return _impl_.key_string_.Mutable(GetArenaForAllocation());
}
inline std::string* GetKeyStringResponse::release_key_string() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.GetKeyStringResponse.key_string)
  return _impl_.key_string_.Release();
}
inline void GetKeyStringResponse::set_allocated_key_string(std::string* key_string) {
  if (key_string != nullptr) {
    
  } else {
    
  }
  _impl_.key_string_.SetAllocated(key_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_string_.IsDefault()) {
    _impl_.key_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.GetKeyStringResponse.key_string)
}

// -------------------------------------------------------------------

// UpdateKeyRequest

// .google.api.apikeys.v2.Key key = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateKeyRequest::_internal_has_key() const {
  return this != internal_default_instance() && _impl_.key_ != nullptr;
}
inline bool UpdateKeyRequest::has_key() const {
  return _internal_has_key();
}
inline const ::google::api::apikeys::v2::Key& UpdateKeyRequest::_internal_key() const {
  const ::google::api::apikeys::v2::Key* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::apikeys::v2::Key&>(
      ::google::api::apikeys::v2::_Key_default_instance_);
}
inline const ::google::api::apikeys::v2::Key& UpdateKeyRequest::key() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.UpdateKeyRequest.key)
  return _internal_key();
}
inline void UpdateKeyRequest::unsafe_arena_set_allocated_key(
    ::google::api::apikeys::v2::Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.UpdateKeyRequest.key)
}
inline ::google::api::apikeys::v2::Key* UpdateKeyRequest::release_key() {
  
  ::google::api::apikeys::v2::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::apikeys::v2::Key* UpdateKeyRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.UpdateKeyRequest.key)
  
  ::google::api::apikeys::v2::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::google::api::apikeys::v2::Key* UpdateKeyRequest::_internal_mutable_key() {
  
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::apikeys::v2::Key>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::google::api::apikeys::v2::Key* UpdateKeyRequest::mutable_key() {
  ::google::api::apikeys::v2::Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.UpdateKeyRequest.key)
  return _msg;
}
inline void UpdateKeyRequest::set_allocated_key(::google::api::apikeys::v2::Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.UpdateKeyRequest.key)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateKeyRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateKeyRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateKeyRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateKeyRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.UpdateKeyRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateKeyRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.apikeys.v2.UpdateKeyRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateKeyRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateKeyRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.UpdateKeyRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateKeyRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateKeyRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.UpdateKeyRequest.update_mask)
  return _msg;
}
inline void UpdateKeyRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.UpdateKeyRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteKeyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.DeleteKeyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteKeyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.DeleteKeyRequest.name)
}
inline std::string* DeleteKeyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.DeleteKeyRequest.name)
  return _s;
}
inline const std::string& DeleteKeyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteKeyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteKeyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.DeleteKeyRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteKeyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.DeleteKeyRequest.name)
}

// string etag = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void DeleteKeyRequest::clear_etag() {
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& DeleteKeyRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.DeleteKeyRequest.etag)
  return _internal_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteKeyRequest::set_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.DeleteKeyRequest.etag)
}
inline std::string* DeleteKeyRequest::mutable_etag() {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.DeleteKeyRequest.etag)
  return _s;
}
inline const std::string& DeleteKeyRequest::_internal_etag() const {
  return _impl_.etag_.Get();
}
inline void DeleteKeyRequest::_internal_set_etag(const std::string& value) {
  
  _impl_.etag_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteKeyRequest::_internal_mutable_etag() {
  
  return _impl_.etag_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteKeyRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.DeleteKeyRequest.etag)
  return _impl_.etag_.Release();
}
inline void DeleteKeyRequest::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  _impl_.etag_.SetAllocated(etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.etag_.IsDefault()) {
    _impl_.etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.DeleteKeyRequest.etag)
}

// -------------------------------------------------------------------

// UndeleteKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UndeleteKeyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UndeleteKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.UndeleteKeyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UndeleteKeyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.UndeleteKeyRequest.name)
}
inline std::string* UndeleteKeyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.UndeleteKeyRequest.name)
  return _s;
}
inline const std::string& UndeleteKeyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UndeleteKeyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UndeleteKeyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UndeleteKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.UndeleteKeyRequest.name)
  return _impl_.name_.Release();
}
inline void UndeleteKeyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.UndeleteKeyRequest.name)
}

// -------------------------------------------------------------------

// LookupKeyRequest

// string key_string = 1 [(.google.api.field_behavior) = REQUIRED];
inline void LookupKeyRequest::clear_key_string() {
  _impl_.key_string_.ClearToEmpty();
}
inline const std::string& LookupKeyRequest::key_string() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.LookupKeyRequest.key_string)
  return _internal_key_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LookupKeyRequest::set_key_string(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.LookupKeyRequest.key_string)
}
inline std::string* LookupKeyRequest::mutable_key_string() {
  std::string* _s = _internal_mutable_key_string();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.LookupKeyRequest.key_string)
  return _s;
}
inline const std::string& LookupKeyRequest::_internal_key_string() const {
  return _impl_.key_string_.Get();
}
inline void LookupKeyRequest::_internal_set_key_string(const std::string& value) {
  
  _impl_.key_string_.Set(value, GetArenaForAllocation());
}
inline std::string* LookupKeyRequest::_internal_mutable_key_string() {
  
  return _impl_.key_string_.Mutable(GetArenaForAllocation());
}
inline std::string* LookupKeyRequest::release_key_string() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.LookupKeyRequest.key_string)
  return _impl_.key_string_.Release();
}
inline void LookupKeyRequest::set_allocated_key_string(std::string* key_string) {
  if (key_string != nullptr) {
    
  } else {
    
  }
  _impl_.key_string_.SetAllocated(key_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_string_.IsDefault()) {
    _impl_.key_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.LookupKeyRequest.key_string)
}

// -------------------------------------------------------------------

// LookupKeyResponse

// string parent = 1;
inline void LookupKeyResponse::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& LookupKeyResponse::parent() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.LookupKeyResponse.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LookupKeyResponse::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.LookupKeyResponse.parent)
}
inline std::string* LookupKeyResponse::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.LookupKeyResponse.parent)
  return _s;
}
inline const std::string& LookupKeyResponse::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void LookupKeyResponse::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* LookupKeyResponse::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* LookupKeyResponse::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.LookupKeyResponse.parent)
  return _impl_.parent_.Release();
}
inline void LookupKeyResponse::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.LookupKeyResponse.parent)
}

// string name = 2;
inline void LookupKeyResponse::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LookupKeyResponse::name() const {
  // @@protoc_insertion_point(field_get:google.api.apikeys.v2.LookupKeyResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LookupKeyResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.apikeys.v2.LookupKeyResponse.name)
}
inline std::string* LookupKeyResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.apikeys.v2.LookupKeyResponse.name)
  return _s;
}
inline const std::string& LookupKeyResponse::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LookupKeyResponse::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LookupKeyResponse::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LookupKeyResponse::release_name() {
  // @@protoc_insertion_point(field_release:google.api.apikeys.v2.LookupKeyResponse.name)
  return _impl_.name_.Release();
}
inline void LookupKeyResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.apikeys.v2.LookupKeyResponse.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace apikeys
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fapikeys_2fv2_2fapikeys_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/serviceusage/v1beta1/serviceusage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/serviceusage/v1beta1/resources.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
namespace google {
namespace api {
namespace serviceusage {
namespace v1beta1 {
class BatchCreateAdminOverridesResponse;
struct BatchCreateAdminOverridesResponseDefaultTypeInternal;
extern BatchCreateAdminOverridesResponseDefaultTypeInternal _BatchCreateAdminOverridesResponse_default_instance_;
class BatchCreateConsumerOverridesResponse;
struct BatchCreateConsumerOverridesResponseDefaultTypeInternal;
extern BatchCreateConsumerOverridesResponseDefaultTypeInternal _BatchCreateConsumerOverridesResponse_default_instance_;
class BatchEnableServicesRequest;
struct BatchEnableServicesRequestDefaultTypeInternal;
extern BatchEnableServicesRequestDefaultTypeInternal _BatchEnableServicesRequest_default_instance_;
class CreateAdminOverrideRequest;
struct CreateAdminOverrideRequestDefaultTypeInternal;
extern CreateAdminOverrideRequestDefaultTypeInternal _CreateAdminOverrideRequest_default_instance_;
class CreateAdminQuotaPolicyMetadata;
struct CreateAdminQuotaPolicyMetadataDefaultTypeInternal;
extern CreateAdminQuotaPolicyMetadataDefaultTypeInternal _CreateAdminQuotaPolicyMetadata_default_instance_;
class CreateConsumerOverrideRequest;
struct CreateConsumerOverrideRequestDefaultTypeInternal;
extern CreateConsumerOverrideRequestDefaultTypeInternal _CreateConsumerOverrideRequest_default_instance_;
class DeleteAdminOverrideRequest;
struct DeleteAdminOverrideRequestDefaultTypeInternal;
extern DeleteAdminOverrideRequestDefaultTypeInternal _DeleteAdminOverrideRequest_default_instance_;
class DeleteAdminQuotaPolicyMetadata;
struct DeleteAdminQuotaPolicyMetadataDefaultTypeInternal;
extern DeleteAdminQuotaPolicyMetadataDefaultTypeInternal _DeleteAdminQuotaPolicyMetadata_default_instance_;
class DeleteConsumerOverrideRequest;
struct DeleteConsumerOverrideRequestDefaultTypeInternal;
extern DeleteConsumerOverrideRequestDefaultTypeInternal _DeleteConsumerOverrideRequest_default_instance_;
class DisableServiceRequest;
struct DisableServiceRequestDefaultTypeInternal;
extern DisableServiceRequestDefaultTypeInternal _DisableServiceRequest_default_instance_;
class EnableServiceRequest;
struct EnableServiceRequestDefaultTypeInternal;
extern EnableServiceRequestDefaultTypeInternal _EnableServiceRequest_default_instance_;
class GenerateServiceIdentityRequest;
struct GenerateServiceIdentityRequestDefaultTypeInternal;
extern GenerateServiceIdentityRequestDefaultTypeInternal _GenerateServiceIdentityRequest_default_instance_;
class GetConsumerQuotaLimitRequest;
struct GetConsumerQuotaLimitRequestDefaultTypeInternal;
extern GetConsumerQuotaLimitRequestDefaultTypeInternal _GetConsumerQuotaLimitRequest_default_instance_;
class GetConsumerQuotaMetricRequest;
struct GetConsumerQuotaMetricRequestDefaultTypeInternal;
extern GetConsumerQuotaMetricRequestDefaultTypeInternal _GetConsumerQuotaMetricRequest_default_instance_;
class GetServiceIdentityMetadata;
struct GetServiceIdentityMetadataDefaultTypeInternal;
extern GetServiceIdentityMetadataDefaultTypeInternal _GetServiceIdentityMetadata_default_instance_;
class GetServiceIdentityResponse;
struct GetServiceIdentityResponseDefaultTypeInternal;
extern GetServiceIdentityResponseDefaultTypeInternal _GetServiceIdentityResponse_default_instance_;
class GetServiceRequest;
struct GetServiceRequestDefaultTypeInternal;
extern GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
class ImportAdminOverridesMetadata;
struct ImportAdminOverridesMetadataDefaultTypeInternal;
extern ImportAdminOverridesMetadataDefaultTypeInternal _ImportAdminOverridesMetadata_default_instance_;
class ImportAdminOverridesRequest;
struct ImportAdminOverridesRequestDefaultTypeInternal;
extern ImportAdminOverridesRequestDefaultTypeInternal _ImportAdminOverridesRequest_default_instance_;
class ImportAdminOverridesResponse;
struct ImportAdminOverridesResponseDefaultTypeInternal;
extern ImportAdminOverridesResponseDefaultTypeInternal _ImportAdminOverridesResponse_default_instance_;
class ImportAdminQuotaPoliciesMetadata;
struct ImportAdminQuotaPoliciesMetadataDefaultTypeInternal;
extern ImportAdminQuotaPoliciesMetadataDefaultTypeInternal _ImportAdminQuotaPoliciesMetadata_default_instance_;
class ImportAdminQuotaPoliciesResponse;
struct ImportAdminQuotaPoliciesResponseDefaultTypeInternal;
extern ImportAdminQuotaPoliciesResponseDefaultTypeInternal _ImportAdminQuotaPoliciesResponse_default_instance_;
class ImportConsumerOverridesMetadata;
struct ImportConsumerOverridesMetadataDefaultTypeInternal;
extern ImportConsumerOverridesMetadataDefaultTypeInternal _ImportConsumerOverridesMetadata_default_instance_;
class ImportConsumerOverridesRequest;
struct ImportConsumerOverridesRequestDefaultTypeInternal;
extern ImportConsumerOverridesRequestDefaultTypeInternal _ImportConsumerOverridesRequest_default_instance_;
class ImportConsumerOverridesResponse;
struct ImportConsumerOverridesResponseDefaultTypeInternal;
extern ImportConsumerOverridesResponseDefaultTypeInternal _ImportConsumerOverridesResponse_default_instance_;
class ListAdminOverridesRequest;
struct ListAdminOverridesRequestDefaultTypeInternal;
extern ListAdminOverridesRequestDefaultTypeInternal _ListAdminOverridesRequest_default_instance_;
class ListAdminOverridesResponse;
struct ListAdminOverridesResponseDefaultTypeInternal;
extern ListAdminOverridesResponseDefaultTypeInternal _ListAdminOverridesResponse_default_instance_;
class ListConsumerOverridesRequest;
struct ListConsumerOverridesRequestDefaultTypeInternal;
extern ListConsumerOverridesRequestDefaultTypeInternal _ListConsumerOverridesRequest_default_instance_;
class ListConsumerOverridesResponse;
struct ListConsumerOverridesResponseDefaultTypeInternal;
extern ListConsumerOverridesResponseDefaultTypeInternal _ListConsumerOverridesResponse_default_instance_;
class ListConsumerQuotaMetricsRequest;
struct ListConsumerQuotaMetricsRequestDefaultTypeInternal;
extern ListConsumerQuotaMetricsRequestDefaultTypeInternal _ListConsumerQuotaMetricsRequest_default_instance_;
class ListConsumerQuotaMetricsResponse;
struct ListConsumerQuotaMetricsResponseDefaultTypeInternal;
extern ListConsumerQuotaMetricsResponseDefaultTypeInternal _ListConsumerQuotaMetricsResponse_default_instance_;
class ListServicesRequest;
struct ListServicesRequestDefaultTypeInternal;
extern ListServicesRequestDefaultTypeInternal _ListServicesRequest_default_instance_;
class ListServicesResponse;
struct ListServicesResponseDefaultTypeInternal;
extern ListServicesResponseDefaultTypeInternal _ListServicesResponse_default_instance_;
class UpdateAdminOverrideRequest;
struct UpdateAdminOverrideRequestDefaultTypeInternal;
extern UpdateAdminOverrideRequestDefaultTypeInternal _UpdateAdminOverrideRequest_default_instance_;
class UpdateAdminQuotaPolicyMetadata;
struct UpdateAdminQuotaPolicyMetadataDefaultTypeInternal;
extern UpdateAdminQuotaPolicyMetadataDefaultTypeInternal _UpdateAdminQuotaPolicyMetadata_default_instance_;
class UpdateConsumerOverrideRequest;
struct UpdateConsumerOverrideRequestDefaultTypeInternal;
extern UpdateConsumerOverrideRequestDefaultTypeInternal _UpdateConsumerOverrideRequest_default_instance_;
}  // namespace v1beta1
}  // namespace serviceusage
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::serviceusage::v1beta1::BatchCreateAdminOverridesResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::BatchCreateAdminOverridesResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::BatchCreateConsumerOverridesResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::BatchCreateConsumerOverridesResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::BatchEnableServicesRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::BatchEnableServicesRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::CreateAdminOverrideRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::CreateAdminOverrideRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::CreateAdminQuotaPolicyMetadata* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::CreateAdminQuotaPolicyMetadata>(Arena*);
template<> ::google::api::serviceusage::v1beta1::CreateConsumerOverrideRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::CreateConsumerOverrideRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::DeleteAdminOverrideRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::DeleteAdminOverrideRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::DeleteAdminQuotaPolicyMetadata* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::DeleteAdminQuotaPolicyMetadata>(Arena*);
template<> ::google::api::serviceusage::v1beta1::DeleteConsumerOverrideRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::DeleteConsumerOverrideRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::DisableServiceRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::DisableServiceRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::EnableServiceRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::EnableServiceRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::GenerateServiceIdentityRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::GenerateServiceIdentityRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::GetConsumerQuotaLimitRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::GetConsumerQuotaLimitRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::GetConsumerQuotaMetricRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::GetConsumerQuotaMetricRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::GetServiceIdentityMetadata* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::GetServiceIdentityMetadata>(Arena*);
template<> ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::GetServiceIdentityResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::GetServiceRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::GetServiceRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ImportAdminOverridesMetadata* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ImportAdminOverridesMetadata>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ImportAdminOverridesRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ImportAdminOverridesRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ImportAdminOverridesResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ImportAdminOverridesResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ImportAdminQuotaPoliciesMetadata* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ImportAdminQuotaPoliciesMetadata>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ImportAdminQuotaPoliciesResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ImportAdminQuotaPoliciesResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ImportConsumerOverridesMetadata* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ImportConsumerOverridesMetadata>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ImportConsumerOverridesRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ImportConsumerOverridesRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ImportConsumerOverridesResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ImportConsumerOverridesResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ListAdminOverridesRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ListAdminOverridesRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ListAdminOverridesResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ListAdminOverridesResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ListConsumerOverridesRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ListConsumerOverridesRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ListConsumerOverridesResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ListConsumerOverridesResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ListConsumerQuotaMetricsRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ListConsumerQuotaMetricsRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ListConsumerQuotaMetricsResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ListConsumerQuotaMetricsResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ListServicesRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ListServicesRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ListServicesResponse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ListServicesResponse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::UpdateAdminOverrideRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::UpdateAdminOverrideRequest>(Arena*);
template<> ::google::api::serviceusage::v1beta1::UpdateAdminQuotaPolicyMetadata* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::UpdateAdminQuotaPolicyMetadata>(Arena*);
template<> ::google::api::serviceusage::v1beta1::UpdateConsumerOverrideRequest* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::UpdateConsumerOverrideRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace serviceusage {
namespace v1beta1 {

enum GetServiceIdentityResponse_IdentityState : int {
  GetServiceIdentityResponse_IdentityState_IDENTITY_STATE_UNSPECIFIED = 0,
  GetServiceIdentityResponse_IdentityState_ACTIVE = 1,
  GetServiceIdentityResponse_IdentityState_GetServiceIdentityResponse_IdentityState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GetServiceIdentityResponse_IdentityState_GetServiceIdentityResponse_IdentityState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GetServiceIdentityResponse_IdentityState_IsValid(int value);
constexpr GetServiceIdentityResponse_IdentityState GetServiceIdentityResponse_IdentityState_IdentityState_MIN = GetServiceIdentityResponse_IdentityState_IDENTITY_STATE_UNSPECIFIED;
constexpr GetServiceIdentityResponse_IdentityState GetServiceIdentityResponse_IdentityState_IdentityState_MAX = GetServiceIdentityResponse_IdentityState_ACTIVE;
constexpr int GetServiceIdentityResponse_IdentityState_IdentityState_ARRAYSIZE = GetServiceIdentityResponse_IdentityState_IdentityState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetServiceIdentityResponse_IdentityState_descriptor();
template<typename T>
inline const std::string& GetServiceIdentityResponse_IdentityState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetServiceIdentityResponse_IdentityState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetServiceIdentityResponse_IdentityState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetServiceIdentityResponse_IdentityState_descriptor(), enum_t_value);
}
inline bool GetServiceIdentityResponse_IdentityState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetServiceIdentityResponse_IdentityState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetServiceIdentityResponse_IdentityState>(
    GetServiceIdentityResponse_IdentityState_descriptor(), name, value);
}
// ===================================================================

class EnableServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.EnableServiceRequest) */ {
 public:
  inline EnableServiceRequest() : EnableServiceRequest(nullptr) {}
  ~EnableServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR EnableServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableServiceRequest(const EnableServiceRequest& from);
  EnableServiceRequest(EnableServiceRequest&& from) noexcept
    : EnableServiceRequest() {
    *this = ::std::move(from);
  }

  inline EnableServiceRequest& operator=(const EnableServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableServiceRequest& operator=(EnableServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableServiceRequest* internal_default_instance() {
    return reinterpret_cast<const EnableServiceRequest*>(
               &_EnableServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnableServiceRequest& a, EnableServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnableServiceRequest& from) {
    EnableServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.EnableServiceRequest";
  }
  protected:
  explicit EnableServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.EnableServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class DisableServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.DisableServiceRequest) */ {
 public:
  inline DisableServiceRequest() : DisableServiceRequest(nullptr) {}
  ~DisableServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR DisableServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableServiceRequest(const DisableServiceRequest& from);
  DisableServiceRequest(DisableServiceRequest&& from) noexcept
    : DisableServiceRequest() {
    *this = ::std::move(from);
  }

  inline DisableServiceRequest& operator=(const DisableServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableServiceRequest& operator=(DisableServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableServiceRequest* internal_default_instance() {
    return reinterpret_cast<const DisableServiceRequest*>(
               &_DisableServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DisableServiceRequest& a, DisableServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisableServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisableServiceRequest& from) {
    DisableServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.DisableServiceRequest";
  }
  protected:
  explicit DisableServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.DisableServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class GetServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.GetServiceRequest) */ {
 public:
  inline GetServiceRequest() : GetServiceRequest(nullptr) {}
  ~GetServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceRequest(const GetServiceRequest& from);
  GetServiceRequest(GetServiceRequest&& from) noexcept
    : GetServiceRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceRequest& operator=(const GetServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceRequest& operator=(GetServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceRequest*>(
               &_GetServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServiceRequest& a, GetServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceRequest& from) {
    GetServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.GetServiceRequest";
  }
  protected:
  explicit GetServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.GetServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ListServicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ListServicesRequest) */ {
 public:
  inline ListServicesRequest() : ListServicesRequest(nullptr) {}
  ~ListServicesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListServicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServicesRequest(const ListServicesRequest& from);
  ListServicesRequest(ListServicesRequest&& from) noexcept
    : ListServicesRequest() {
    *this = ::std::move(from);
  }

  inline ListServicesRequest& operator=(const ListServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServicesRequest& operator=(ListServicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListServicesRequest*>(
               &_ListServicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListServicesRequest& a, ListServicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServicesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServicesRequest& from) {
    ListServicesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServicesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ListServicesRequest";
  }
  protected:
  explicit ListServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 4,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ListServicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ListServicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ListServicesResponse) */ {
 public:
  inline ListServicesResponse() : ListServicesResponse(nullptr) {}
  ~ListServicesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListServicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListServicesResponse(const ListServicesResponse& from);
  ListServicesResponse(ListServicesResponse&& from) noexcept
    : ListServicesResponse() {
    *this = ::std::move(from);
  }

  inline ListServicesResponse& operator=(const ListServicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServicesResponse& operator=(ListServicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListServicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListServicesResponse* internal_default_instance() {
    return reinterpret_cast<const ListServicesResponse*>(
               &_ListServicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListServicesResponse& a, ListServicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListServicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListServicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListServicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListServicesResponse& from) {
    ListServicesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ListServicesResponse";
  }
  protected:
  explicit ListServicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.api.serviceusage.v1beta1.Service services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::google::api::serviceusage::v1beta1::Service* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::Service >*
      mutable_services();
  private:
  const ::google::api::serviceusage::v1beta1::Service& _internal_services(int index) const;
  ::google::api::serviceusage::v1beta1::Service* _internal_add_services();
  public:
  const ::google::api::serviceusage::v1beta1::Service& services(int index) const;
  ::google::api::serviceusage::v1beta1::Service* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::Service >&
      services() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ListServicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::Service > services_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class BatchEnableServicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.BatchEnableServicesRequest) */ {
 public:
  inline BatchEnableServicesRequest() : BatchEnableServicesRequest(nullptr) {}
  ~BatchEnableServicesRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchEnableServicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchEnableServicesRequest(const BatchEnableServicesRequest& from);
  BatchEnableServicesRequest(BatchEnableServicesRequest&& from) noexcept
    : BatchEnableServicesRequest() {
    *this = ::std::move(from);
  }

  inline BatchEnableServicesRequest& operator=(const BatchEnableServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchEnableServicesRequest& operator=(BatchEnableServicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchEnableServicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchEnableServicesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchEnableServicesRequest*>(
               &_BatchEnableServicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BatchEnableServicesRequest& a, BatchEnableServicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchEnableServicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchEnableServicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchEnableServicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchEnableServicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchEnableServicesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchEnableServicesRequest& from) {
    BatchEnableServicesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchEnableServicesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.BatchEnableServicesRequest";
  }
  protected:
  explicit BatchEnableServicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdsFieldNumber = 2,
    kParentFieldNumber = 1,
  };
  // repeated string service_ids = 2;
  int service_ids_size() const;
  private:
  int _internal_service_ids_size() const;
  public:
  void clear_service_ids();
  const std::string& service_ids(int index) const;
  std::string* mutable_service_ids(int index);
  void set_service_ids(int index, const std::string& value);
  void set_service_ids(int index, std::string&& value);
  void set_service_ids(int index, const char* value);
  void set_service_ids(int index, const char* value, size_t size);
  std::string* add_service_ids();
  void add_service_ids(const std::string& value);
  void add_service_ids(std::string&& value);
  void add_service_ids(const char* value);
  void add_service_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_ids();
  private:
  const std::string& _internal_service_ids(int index) const;
  std::string* _internal_add_service_ids();
  public:

  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.BatchEnableServicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ListConsumerQuotaMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest) */ {
 public:
  inline ListConsumerQuotaMetricsRequest() : ListConsumerQuotaMetricsRequest(nullptr) {}
  ~ListConsumerQuotaMetricsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListConsumerQuotaMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConsumerQuotaMetricsRequest(const ListConsumerQuotaMetricsRequest& from);
  ListConsumerQuotaMetricsRequest(ListConsumerQuotaMetricsRequest&& from) noexcept
    : ListConsumerQuotaMetricsRequest() {
    *this = ::std::move(from);
  }

  inline ListConsumerQuotaMetricsRequest& operator=(const ListConsumerQuotaMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConsumerQuotaMetricsRequest& operator=(ListConsumerQuotaMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConsumerQuotaMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConsumerQuotaMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConsumerQuotaMetricsRequest*>(
               &_ListConsumerQuotaMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListConsumerQuotaMetricsRequest& a, ListConsumerQuotaMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConsumerQuotaMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConsumerQuotaMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConsumerQuotaMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConsumerQuotaMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConsumerQuotaMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListConsumerQuotaMetricsRequest& from) {
    ListConsumerQuotaMetricsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConsumerQuotaMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest";
  }
  protected:
  explicit ListConsumerQuotaMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
    kViewFieldNumber = 4,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // .google.api.serviceusage.v1beta1.QuotaView view = 4;
  void clear_view();
  ::google::api::serviceusage::v1beta1::QuotaView view() const;
  void set_view(::google::api::serviceusage::v1beta1::QuotaView value);
  private:
  ::google::api::serviceusage::v1beta1::QuotaView _internal_view() const;
  void _internal_set_view(::google::api::serviceusage::v1beta1::QuotaView value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    int view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ListConsumerQuotaMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse) */ {
 public:
  inline ListConsumerQuotaMetricsResponse() : ListConsumerQuotaMetricsResponse(nullptr) {}
  ~ListConsumerQuotaMetricsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListConsumerQuotaMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConsumerQuotaMetricsResponse(const ListConsumerQuotaMetricsResponse& from);
  ListConsumerQuotaMetricsResponse(ListConsumerQuotaMetricsResponse&& from) noexcept
    : ListConsumerQuotaMetricsResponse() {
    *this = ::std::move(from);
  }

  inline ListConsumerQuotaMetricsResponse& operator=(const ListConsumerQuotaMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConsumerQuotaMetricsResponse& operator=(ListConsumerQuotaMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConsumerQuotaMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConsumerQuotaMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const ListConsumerQuotaMetricsResponse*>(
               &_ListConsumerQuotaMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListConsumerQuotaMetricsResponse& a, ListConsumerQuotaMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConsumerQuotaMetricsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConsumerQuotaMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConsumerQuotaMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConsumerQuotaMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConsumerQuotaMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListConsumerQuotaMetricsResponse& from) {
    ListConsumerQuotaMetricsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConsumerQuotaMetricsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse";
  }
  protected:
  explicit ListConsumerQuotaMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.api.serviceusage.v1beta1.ConsumerQuotaMetric metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric >*
      mutable_metrics();
  private:
  const ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric& _internal_metrics(int index) const;
  ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric* _internal_add_metrics();
  public:
  const ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric& metrics(int index) const;
  ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric >&
      metrics() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric > metrics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class GetConsumerQuotaMetricRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest) */ {
 public:
  inline GetConsumerQuotaMetricRequest() : GetConsumerQuotaMetricRequest(nullptr) {}
  ~GetConsumerQuotaMetricRequest() override;
  explicit PROTOBUF_CONSTEXPR GetConsumerQuotaMetricRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsumerQuotaMetricRequest(const GetConsumerQuotaMetricRequest& from);
  GetConsumerQuotaMetricRequest(GetConsumerQuotaMetricRequest&& from) noexcept
    : GetConsumerQuotaMetricRequest() {
    *this = ::std::move(from);
  }

  inline GetConsumerQuotaMetricRequest& operator=(const GetConsumerQuotaMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsumerQuotaMetricRequest& operator=(GetConsumerQuotaMetricRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsumerQuotaMetricRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsumerQuotaMetricRequest* internal_default_instance() {
    return reinterpret_cast<const GetConsumerQuotaMetricRequest*>(
               &_GetConsumerQuotaMetricRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetConsumerQuotaMetricRequest& a, GetConsumerQuotaMetricRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsumerQuotaMetricRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsumerQuotaMetricRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsumerQuotaMetricRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsumerQuotaMetricRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConsumerQuotaMetricRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConsumerQuotaMetricRequest& from) {
    GetConsumerQuotaMetricRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsumerQuotaMetricRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest";
  }
  protected:
  explicit GetConsumerQuotaMetricRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.serviceusage.v1beta1.QuotaView view = 2;
  void clear_view();
  ::google::api::serviceusage::v1beta1::QuotaView view() const;
  void set_view(::google::api::serviceusage::v1beta1::QuotaView value);
  private:
  ::google::api::serviceusage::v1beta1::QuotaView _internal_view() const;
  void _internal_set_view(::google::api::serviceusage::v1beta1::QuotaView value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class GetConsumerQuotaLimitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest) */ {
 public:
  inline GetConsumerQuotaLimitRequest() : GetConsumerQuotaLimitRequest(nullptr) {}
  ~GetConsumerQuotaLimitRequest() override;
  explicit PROTOBUF_CONSTEXPR GetConsumerQuotaLimitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsumerQuotaLimitRequest(const GetConsumerQuotaLimitRequest& from);
  GetConsumerQuotaLimitRequest(GetConsumerQuotaLimitRequest&& from) noexcept
    : GetConsumerQuotaLimitRequest() {
    *this = ::std::move(from);
  }

  inline GetConsumerQuotaLimitRequest& operator=(const GetConsumerQuotaLimitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsumerQuotaLimitRequest& operator=(GetConsumerQuotaLimitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsumerQuotaLimitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsumerQuotaLimitRequest* internal_default_instance() {
    return reinterpret_cast<const GetConsumerQuotaLimitRequest*>(
               &_GetConsumerQuotaLimitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetConsumerQuotaLimitRequest& a, GetConsumerQuotaLimitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsumerQuotaLimitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsumerQuotaLimitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsumerQuotaLimitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsumerQuotaLimitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConsumerQuotaLimitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConsumerQuotaLimitRequest& from) {
    GetConsumerQuotaLimitRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsumerQuotaLimitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest";
  }
  protected:
  explicit GetConsumerQuotaLimitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.serviceusage.v1beta1.QuotaView view = 2;
  void clear_view();
  ::google::api::serviceusage::v1beta1::QuotaView view() const;
  void set_view(::google::api::serviceusage::v1beta1::QuotaView value);
  private:
  ::google::api::serviceusage::v1beta1::QuotaView _internal_view() const;
  void _internal_set_view(::google::api::serviceusage::v1beta1::QuotaView value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int view_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class CreateAdminOverrideRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest) */ {
 public:
  inline CreateAdminOverrideRequest() : CreateAdminOverrideRequest(nullptr) {}
  ~CreateAdminOverrideRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateAdminOverrideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAdminOverrideRequest(const CreateAdminOverrideRequest& from);
  CreateAdminOverrideRequest(CreateAdminOverrideRequest&& from) noexcept
    : CreateAdminOverrideRequest() {
    *this = ::std::move(from);
  }

  inline CreateAdminOverrideRequest& operator=(const CreateAdminOverrideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAdminOverrideRequest& operator=(CreateAdminOverrideRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAdminOverrideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAdminOverrideRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAdminOverrideRequest*>(
               &_CreateAdminOverrideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateAdminOverrideRequest& a, CreateAdminOverrideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAdminOverrideRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAdminOverrideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAdminOverrideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAdminOverrideRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAdminOverrideRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAdminOverrideRequest& from) {
    CreateAdminOverrideRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAdminOverrideRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.CreateAdminOverrideRequest";
  }
  protected:
  explicit CreateAdminOverrideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceOnlyFieldNumber = 4,
    kParentFieldNumber = 1,
    kOverrideFieldNumber = 2,
    kForceFieldNumber = 3,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 4;
  int force_only_size() const;
  private:
  int _internal_force_only_size() const;
  public:
  void clear_force_only();
  private:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck _internal_force_only(int index) const;
  void _internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_force_only();
  public:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck force_only(int index) const;
  void set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  void add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& force_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_force_only();

  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.api.serviceusage.v1beta1.QuotaOverride override = 2;
  bool has_override() const;
  private:
  bool _internal_has_override() const;
  public:
  void clear_override();
  const ::google::api::serviceusage::v1beta1::QuotaOverride& override() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::QuotaOverride* release_override();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_override();
  void set_allocated_override(::google::api::serviceusage::v1beta1::QuotaOverride* override);
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_override() const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_mutable_override();
  public:
  void unsafe_arena_set_allocated_override(
      ::google::api::serviceusage::v1beta1::QuotaOverride* override);
  ::google::api::serviceusage::v1beta1::QuotaOverride* unsafe_arena_release_override();

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> force_only_;
    mutable std::atomic<int> _force_only_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::api::serviceusage::v1beta1::QuotaOverride* override_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class UpdateAdminOverrideRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest) */ {
 public:
  inline UpdateAdminOverrideRequest() : UpdateAdminOverrideRequest(nullptr) {}
  ~UpdateAdminOverrideRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateAdminOverrideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAdminOverrideRequest(const UpdateAdminOverrideRequest& from);
  UpdateAdminOverrideRequest(UpdateAdminOverrideRequest&& from) noexcept
    : UpdateAdminOverrideRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAdminOverrideRequest& operator=(const UpdateAdminOverrideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAdminOverrideRequest& operator=(UpdateAdminOverrideRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAdminOverrideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAdminOverrideRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAdminOverrideRequest*>(
               &_UpdateAdminOverrideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdateAdminOverrideRequest& a, UpdateAdminOverrideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAdminOverrideRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAdminOverrideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAdminOverrideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAdminOverrideRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAdminOverrideRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateAdminOverrideRequest& from) {
    UpdateAdminOverrideRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAdminOverrideRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest";
  }
  protected:
  explicit UpdateAdminOverrideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceOnlyFieldNumber = 5,
    kNameFieldNumber = 1,
    kOverrideFieldNumber = 2,
    kUpdateMaskFieldNumber = 4,
    kForceFieldNumber = 3,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 5;
  int force_only_size() const;
  private:
  int _internal_force_only_size() const;
  public:
  void clear_force_only();
  private:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck _internal_force_only(int index) const;
  void _internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_force_only();
  public:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck force_only(int index) const;
  void set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  void add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& force_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_force_only();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.serviceusage.v1beta1.QuotaOverride override = 2;
  bool has_override() const;
  private:
  bool _internal_has_override() const;
  public:
  void clear_override();
  const ::google::api::serviceusage::v1beta1::QuotaOverride& override() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::QuotaOverride* release_override();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_override();
  void set_allocated_override(::google::api::serviceusage::v1beta1::QuotaOverride* override);
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_override() const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_mutable_override();
  public:
  void unsafe_arena_set_allocated_override(
      ::google::api::serviceusage::v1beta1::QuotaOverride* override);
  ::google::api::serviceusage::v1beta1::QuotaOverride* unsafe_arena_release_override();

  // .google.protobuf.FieldMask update_mask = 4;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> force_only_;
    mutable std::atomic<int> _force_only_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::api::serviceusage::v1beta1::QuotaOverride* override_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class DeleteAdminOverrideRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest) */ {
 public:
  inline DeleteAdminOverrideRequest() : DeleteAdminOverrideRequest(nullptr) {}
  ~DeleteAdminOverrideRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteAdminOverrideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAdminOverrideRequest(const DeleteAdminOverrideRequest& from);
  DeleteAdminOverrideRequest(DeleteAdminOverrideRequest&& from) noexcept
    : DeleteAdminOverrideRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAdminOverrideRequest& operator=(const DeleteAdminOverrideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAdminOverrideRequest& operator=(DeleteAdminOverrideRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAdminOverrideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAdminOverrideRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAdminOverrideRequest*>(
               &_DeleteAdminOverrideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteAdminOverrideRequest& a, DeleteAdminOverrideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAdminOverrideRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAdminOverrideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAdminOverrideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAdminOverrideRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAdminOverrideRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteAdminOverrideRequest& from) {
    DeleteAdminOverrideRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAdminOverrideRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest";
  }
  protected:
  explicit DeleteAdminOverrideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceOnlyFieldNumber = 3,
    kNameFieldNumber = 1,
    kForceFieldNumber = 2,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 3;
  int force_only_size() const;
  private:
  int _internal_force_only_size() const;
  public:
  void clear_force_only();
  private:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck _internal_force_only(int index) const;
  void _internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_force_only();
  public:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck force_only(int index) const;
  void set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  void add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& force_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_force_only();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool force = 2;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> force_only_;
    mutable std::atomic<int> _force_only_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ListAdminOverridesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ListAdminOverridesRequest) */ {
 public:
  inline ListAdminOverridesRequest() : ListAdminOverridesRequest(nullptr) {}
  ~ListAdminOverridesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListAdminOverridesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAdminOverridesRequest(const ListAdminOverridesRequest& from);
  ListAdminOverridesRequest(ListAdminOverridesRequest&& from) noexcept
    : ListAdminOverridesRequest() {
    *this = ::std::move(from);
  }

  inline ListAdminOverridesRequest& operator=(const ListAdminOverridesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAdminOverridesRequest& operator=(ListAdminOverridesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAdminOverridesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAdminOverridesRequest* internal_default_instance() {
    return reinterpret_cast<const ListAdminOverridesRequest*>(
               &_ListAdminOverridesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListAdminOverridesRequest& a, ListAdminOverridesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAdminOverridesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAdminOverridesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAdminOverridesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAdminOverridesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAdminOverridesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAdminOverridesRequest& from) {
    ListAdminOverridesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAdminOverridesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ListAdminOverridesRequest";
  }
  protected:
  explicit ListAdminOverridesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ListAdminOverridesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ListAdminOverridesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ListAdminOverridesResponse) */ {
 public:
  inline ListAdminOverridesResponse() : ListAdminOverridesResponse(nullptr) {}
  ~ListAdminOverridesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListAdminOverridesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAdminOverridesResponse(const ListAdminOverridesResponse& from);
  ListAdminOverridesResponse(ListAdminOverridesResponse&& from) noexcept
    : ListAdminOverridesResponse() {
    *this = ::std::move(from);
  }

  inline ListAdminOverridesResponse& operator=(const ListAdminOverridesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAdminOverridesResponse& operator=(ListAdminOverridesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAdminOverridesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAdminOverridesResponse* internal_default_instance() {
    return reinterpret_cast<const ListAdminOverridesResponse*>(
               &_ListAdminOverridesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListAdminOverridesResponse& a, ListAdminOverridesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAdminOverridesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAdminOverridesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAdminOverridesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAdminOverridesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAdminOverridesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAdminOverridesResponse& from) {
    ListAdminOverridesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAdminOverridesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ListAdminOverridesResponse";
  }
  protected:
  explicit ListAdminOverridesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
  int overrides_size() const;
  private:
  int _internal_overrides_size() const;
  public:
  void clear_overrides();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
      mutable_overrides();
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_add_overrides();
  public:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* add_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
      overrides() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ListAdminOverridesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride > overrides_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class BatchCreateAdminOverridesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.BatchCreateAdminOverridesResponse) */ {
 public:
  inline BatchCreateAdminOverridesResponse() : BatchCreateAdminOverridesResponse(nullptr) {}
  ~BatchCreateAdminOverridesResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchCreateAdminOverridesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCreateAdminOverridesResponse(const BatchCreateAdminOverridesResponse& from);
  BatchCreateAdminOverridesResponse(BatchCreateAdminOverridesResponse&& from) noexcept
    : BatchCreateAdminOverridesResponse() {
    *this = ::std::move(from);
  }

  inline BatchCreateAdminOverridesResponse& operator=(const BatchCreateAdminOverridesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCreateAdminOverridesResponse& operator=(BatchCreateAdminOverridesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCreateAdminOverridesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCreateAdminOverridesResponse* internal_default_instance() {
    return reinterpret_cast<const BatchCreateAdminOverridesResponse*>(
               &_BatchCreateAdminOverridesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BatchCreateAdminOverridesResponse& a, BatchCreateAdminOverridesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCreateAdminOverridesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCreateAdminOverridesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCreateAdminOverridesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCreateAdminOverridesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCreateAdminOverridesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCreateAdminOverridesResponse& from) {
    BatchCreateAdminOverridesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateAdminOverridesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.BatchCreateAdminOverridesResponse";
  }
  protected:
  explicit BatchCreateAdminOverridesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 1,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
  int overrides_size() const;
  private:
  int _internal_overrides_size() const;
  public:
  void clear_overrides();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
      mutable_overrides();
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_add_overrides();
  public:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* add_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
      overrides() const;

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.BatchCreateAdminOverridesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride > overrides_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ImportAdminOverridesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest) */ {
 public:
  inline ImportAdminOverridesRequest() : ImportAdminOverridesRequest(nullptr) {}
  ~ImportAdminOverridesRequest() override;
  explicit PROTOBUF_CONSTEXPR ImportAdminOverridesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportAdminOverridesRequest(const ImportAdminOverridesRequest& from);
  ImportAdminOverridesRequest(ImportAdminOverridesRequest&& from) noexcept
    : ImportAdminOverridesRequest() {
    *this = ::std::move(from);
  }

  inline ImportAdminOverridesRequest& operator=(const ImportAdminOverridesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportAdminOverridesRequest& operator=(ImportAdminOverridesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportAdminOverridesRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kInlineSource = 2,
    SOURCE_NOT_SET = 0,
  };

  static inline const ImportAdminOverridesRequest* internal_default_instance() {
    return reinterpret_cast<const ImportAdminOverridesRequest*>(
               &_ImportAdminOverridesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ImportAdminOverridesRequest& a, ImportAdminOverridesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportAdminOverridesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportAdminOverridesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportAdminOverridesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportAdminOverridesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportAdminOverridesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportAdminOverridesRequest& from) {
    ImportAdminOverridesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportAdminOverridesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ImportAdminOverridesRequest";
  }
  protected:
  explicit ImportAdminOverridesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceOnlyFieldNumber = 4,
    kParentFieldNumber = 1,
    kForceFieldNumber = 3,
    kInlineSourceFieldNumber = 2,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 4;
  int force_only_size() const;
  private:
  int _internal_force_only_size() const;
  public:
  void clear_force_only();
  private:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck _internal_force_only(int index) const;
  void _internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_force_only();
  public:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck force_only(int index) const;
  void set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  void add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& force_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_force_only();

  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // .google.api.serviceusage.v1beta1.OverrideInlineSource inline_source = 2;
  bool has_inline_source() const;
  private:
  bool _internal_has_inline_source() const;
  public:
  void clear_inline_source();
  const ::google::api::serviceusage::v1beta1::OverrideInlineSource& inline_source() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::OverrideInlineSource* release_inline_source();
  ::google::api::serviceusage::v1beta1::OverrideInlineSource* mutable_inline_source();
  void set_allocated_inline_source(::google::api::serviceusage::v1beta1::OverrideInlineSource* inline_source);
  private:
  const ::google::api::serviceusage::v1beta1::OverrideInlineSource& _internal_inline_source() const;
  ::google::api::serviceusage::v1beta1::OverrideInlineSource* _internal_mutable_inline_source();
  public:
  void unsafe_arena_set_allocated_inline_source(
      ::google::api::serviceusage::v1beta1::OverrideInlineSource* inline_source);
  ::google::api::serviceusage::v1beta1::OverrideInlineSource* unsafe_arena_release_inline_source();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest)
 private:
  class _Internal;
  void set_has_inline_source();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> force_only_;
    mutable std::atomic<int> _force_only_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    bool force_;
    union SourceUnion {
      constexpr SourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::api::serviceusage::v1beta1::OverrideInlineSource* inline_source_;
    } source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ImportAdminOverridesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ImportAdminOverridesResponse) */ {
 public:
  inline ImportAdminOverridesResponse() : ImportAdminOverridesResponse(nullptr) {}
  ~ImportAdminOverridesResponse() override;
  explicit PROTOBUF_CONSTEXPR ImportAdminOverridesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportAdminOverridesResponse(const ImportAdminOverridesResponse& from);
  ImportAdminOverridesResponse(ImportAdminOverridesResponse&& from) noexcept
    : ImportAdminOverridesResponse() {
    *this = ::std::move(from);
  }

  inline ImportAdminOverridesResponse& operator=(const ImportAdminOverridesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportAdminOverridesResponse& operator=(ImportAdminOverridesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportAdminOverridesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportAdminOverridesResponse* internal_default_instance() {
    return reinterpret_cast<const ImportAdminOverridesResponse*>(
               &_ImportAdminOverridesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ImportAdminOverridesResponse& a, ImportAdminOverridesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportAdminOverridesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportAdminOverridesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportAdminOverridesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportAdminOverridesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportAdminOverridesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportAdminOverridesResponse& from) {
    ImportAdminOverridesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportAdminOverridesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ImportAdminOverridesResponse";
  }
  protected:
  explicit ImportAdminOverridesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 1,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
  int overrides_size() const;
  private:
  int _internal_overrides_size() const;
  public:
  void clear_overrides();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
      mutable_overrides();
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_add_overrides();
  public:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* add_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
      overrides() const;

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ImportAdminOverridesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride > overrides_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ImportAdminOverridesMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ImportAdminOverridesMetadata) */ {
 public:
  inline ImportAdminOverridesMetadata() : ImportAdminOverridesMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ImportAdminOverridesMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportAdminOverridesMetadata(const ImportAdminOverridesMetadata& from);
  ImportAdminOverridesMetadata(ImportAdminOverridesMetadata&& from) noexcept
    : ImportAdminOverridesMetadata() {
    *this = ::std::move(from);
  }

  inline ImportAdminOverridesMetadata& operator=(const ImportAdminOverridesMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportAdminOverridesMetadata& operator=(ImportAdminOverridesMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportAdminOverridesMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportAdminOverridesMetadata* internal_default_instance() {
    return reinterpret_cast<const ImportAdminOverridesMetadata*>(
               &_ImportAdminOverridesMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ImportAdminOverridesMetadata& a, ImportAdminOverridesMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportAdminOverridesMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportAdminOverridesMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportAdminOverridesMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportAdminOverridesMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ImportAdminOverridesMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ImportAdminOverridesMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ImportAdminOverridesMetadata";
  }
  protected:
  explicit ImportAdminOverridesMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ImportAdminOverridesMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class CreateConsumerOverrideRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest) */ {
 public:
  inline CreateConsumerOverrideRequest() : CreateConsumerOverrideRequest(nullptr) {}
  ~CreateConsumerOverrideRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateConsumerOverrideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateConsumerOverrideRequest(const CreateConsumerOverrideRequest& from);
  CreateConsumerOverrideRequest(CreateConsumerOverrideRequest&& from) noexcept
    : CreateConsumerOverrideRequest() {
    *this = ::std::move(from);
  }

  inline CreateConsumerOverrideRequest& operator=(const CreateConsumerOverrideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConsumerOverrideRequest& operator=(CreateConsumerOverrideRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateConsumerOverrideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateConsumerOverrideRequest* internal_default_instance() {
    return reinterpret_cast<const CreateConsumerOverrideRequest*>(
               &_CreateConsumerOverrideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CreateConsumerOverrideRequest& a, CreateConsumerOverrideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConsumerOverrideRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConsumerOverrideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateConsumerOverrideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateConsumerOverrideRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateConsumerOverrideRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateConsumerOverrideRequest& from) {
    CreateConsumerOverrideRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConsumerOverrideRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest";
  }
  protected:
  explicit CreateConsumerOverrideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceOnlyFieldNumber = 4,
    kParentFieldNumber = 1,
    kOverrideFieldNumber = 2,
    kForceFieldNumber = 3,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 4;
  int force_only_size() const;
  private:
  int _internal_force_only_size() const;
  public:
  void clear_force_only();
  private:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck _internal_force_only(int index) const;
  void _internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_force_only();
  public:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck force_only(int index) const;
  void set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  void add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& force_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_force_only();

  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.api.serviceusage.v1beta1.QuotaOverride override = 2;
  bool has_override() const;
  private:
  bool _internal_has_override() const;
  public:
  void clear_override();
  const ::google::api::serviceusage::v1beta1::QuotaOverride& override() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::QuotaOverride* release_override();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_override();
  void set_allocated_override(::google::api::serviceusage::v1beta1::QuotaOverride* override);
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_override() const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_mutable_override();
  public:
  void unsafe_arena_set_allocated_override(
      ::google::api::serviceusage::v1beta1::QuotaOverride* override);
  ::google::api::serviceusage::v1beta1::QuotaOverride* unsafe_arena_release_override();

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> force_only_;
    mutable std::atomic<int> _force_only_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::api::serviceusage::v1beta1::QuotaOverride* override_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class UpdateConsumerOverrideRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest) */ {
 public:
  inline UpdateConsumerOverrideRequest() : UpdateConsumerOverrideRequest(nullptr) {}
  ~UpdateConsumerOverrideRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateConsumerOverrideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateConsumerOverrideRequest(const UpdateConsumerOverrideRequest& from);
  UpdateConsumerOverrideRequest(UpdateConsumerOverrideRequest&& from) noexcept
    : UpdateConsumerOverrideRequest() {
    *this = ::std::move(from);
  }

  inline UpdateConsumerOverrideRequest& operator=(const UpdateConsumerOverrideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateConsumerOverrideRequest& operator=(UpdateConsumerOverrideRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateConsumerOverrideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateConsumerOverrideRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateConsumerOverrideRequest*>(
               &_UpdateConsumerOverrideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UpdateConsumerOverrideRequest& a, UpdateConsumerOverrideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateConsumerOverrideRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateConsumerOverrideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateConsumerOverrideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateConsumerOverrideRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateConsumerOverrideRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateConsumerOverrideRequest& from) {
    UpdateConsumerOverrideRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateConsumerOverrideRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest";
  }
  protected:
  explicit UpdateConsumerOverrideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceOnlyFieldNumber = 5,
    kNameFieldNumber = 1,
    kOverrideFieldNumber = 2,
    kUpdateMaskFieldNumber = 4,
    kForceFieldNumber = 3,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 5;
  int force_only_size() const;
  private:
  int _internal_force_only_size() const;
  public:
  void clear_force_only();
  private:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck _internal_force_only(int index) const;
  void _internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_force_only();
  public:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck force_only(int index) const;
  void set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  void add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& force_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_force_only();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.serviceusage.v1beta1.QuotaOverride override = 2;
  bool has_override() const;
  private:
  bool _internal_has_override() const;
  public:
  void clear_override();
  const ::google::api::serviceusage::v1beta1::QuotaOverride& override() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::QuotaOverride* release_override();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_override();
  void set_allocated_override(::google::api::serviceusage::v1beta1::QuotaOverride* override);
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_override() const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_mutable_override();
  public:
  void unsafe_arena_set_allocated_override(
      ::google::api::serviceusage::v1beta1::QuotaOverride* override);
  ::google::api::serviceusage::v1beta1::QuotaOverride* unsafe_arena_release_override();

  // .google.protobuf.FieldMask update_mask = 4;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> force_only_;
    mutable std::atomic<int> _force_only_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::api::serviceusage::v1beta1::QuotaOverride* override_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class DeleteConsumerOverrideRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest) */ {
 public:
  inline DeleteConsumerOverrideRequest() : DeleteConsumerOverrideRequest(nullptr) {}
  ~DeleteConsumerOverrideRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteConsumerOverrideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteConsumerOverrideRequest(const DeleteConsumerOverrideRequest& from);
  DeleteConsumerOverrideRequest(DeleteConsumerOverrideRequest&& from) noexcept
    : DeleteConsumerOverrideRequest() {
    *this = ::std::move(from);
  }

  inline DeleteConsumerOverrideRequest& operator=(const DeleteConsumerOverrideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConsumerOverrideRequest& operator=(DeleteConsumerOverrideRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteConsumerOverrideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteConsumerOverrideRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteConsumerOverrideRequest*>(
               &_DeleteConsumerOverrideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteConsumerOverrideRequest& a, DeleteConsumerOverrideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConsumerOverrideRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConsumerOverrideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteConsumerOverrideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteConsumerOverrideRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteConsumerOverrideRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteConsumerOverrideRequest& from) {
    DeleteConsumerOverrideRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConsumerOverrideRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest";
  }
  protected:
  explicit DeleteConsumerOverrideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceOnlyFieldNumber = 3,
    kNameFieldNumber = 1,
    kForceFieldNumber = 2,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 3;
  int force_only_size() const;
  private:
  int _internal_force_only_size() const;
  public:
  void clear_force_only();
  private:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck _internal_force_only(int index) const;
  void _internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_force_only();
  public:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck force_only(int index) const;
  void set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  void add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& force_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_force_only();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool force = 2;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> force_only_;
    mutable std::atomic<int> _force_only_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ListConsumerOverridesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest) */ {
 public:
  inline ListConsumerOverridesRequest() : ListConsumerOverridesRequest(nullptr) {}
  ~ListConsumerOverridesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListConsumerOverridesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConsumerOverridesRequest(const ListConsumerOverridesRequest& from);
  ListConsumerOverridesRequest(ListConsumerOverridesRequest&& from) noexcept
    : ListConsumerOverridesRequest() {
    *this = ::std::move(from);
  }

  inline ListConsumerOverridesRequest& operator=(const ListConsumerOverridesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConsumerOverridesRequest& operator=(ListConsumerOverridesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConsumerOverridesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConsumerOverridesRequest* internal_default_instance() {
    return reinterpret_cast<const ListConsumerOverridesRequest*>(
               &_ListConsumerOverridesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListConsumerOverridesRequest& a, ListConsumerOverridesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConsumerOverridesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConsumerOverridesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConsumerOverridesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConsumerOverridesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConsumerOverridesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListConsumerOverridesRequest& from) {
    ListConsumerOverridesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConsumerOverridesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ListConsumerOverridesRequest";
  }
  protected:
  explicit ListConsumerOverridesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ListConsumerOverridesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse) */ {
 public:
  inline ListConsumerOverridesResponse() : ListConsumerOverridesResponse(nullptr) {}
  ~ListConsumerOverridesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListConsumerOverridesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConsumerOverridesResponse(const ListConsumerOverridesResponse& from);
  ListConsumerOverridesResponse(ListConsumerOverridesResponse&& from) noexcept
    : ListConsumerOverridesResponse() {
    *this = ::std::move(from);
  }

  inline ListConsumerOverridesResponse& operator=(const ListConsumerOverridesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConsumerOverridesResponse& operator=(ListConsumerOverridesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConsumerOverridesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConsumerOverridesResponse* internal_default_instance() {
    return reinterpret_cast<const ListConsumerOverridesResponse*>(
               &_ListConsumerOverridesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListConsumerOverridesResponse& a, ListConsumerOverridesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConsumerOverridesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConsumerOverridesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConsumerOverridesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConsumerOverridesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConsumerOverridesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListConsumerOverridesResponse& from) {
    ListConsumerOverridesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConsumerOverridesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ListConsumerOverridesResponse";
  }
  protected:
  explicit ListConsumerOverridesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
  int overrides_size() const;
  private:
  int _internal_overrides_size() const;
  public:
  void clear_overrides();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
      mutable_overrides();
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_add_overrides();
  public:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* add_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
      overrides() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride > overrides_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class BatchCreateConsumerOverridesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.BatchCreateConsumerOverridesResponse) */ {
 public:
  inline BatchCreateConsumerOverridesResponse() : BatchCreateConsumerOverridesResponse(nullptr) {}
  ~BatchCreateConsumerOverridesResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchCreateConsumerOverridesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCreateConsumerOverridesResponse(const BatchCreateConsumerOverridesResponse& from);
  BatchCreateConsumerOverridesResponse(BatchCreateConsumerOverridesResponse&& from) noexcept
    : BatchCreateConsumerOverridesResponse() {
    *this = ::std::move(from);
  }

  inline BatchCreateConsumerOverridesResponse& operator=(const BatchCreateConsumerOverridesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCreateConsumerOverridesResponse& operator=(BatchCreateConsumerOverridesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCreateConsumerOverridesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCreateConsumerOverridesResponse* internal_default_instance() {
    return reinterpret_cast<const BatchCreateConsumerOverridesResponse*>(
               &_BatchCreateConsumerOverridesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BatchCreateConsumerOverridesResponse& a, BatchCreateConsumerOverridesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCreateConsumerOverridesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCreateConsumerOverridesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCreateConsumerOverridesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCreateConsumerOverridesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCreateConsumerOverridesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCreateConsumerOverridesResponse& from) {
    BatchCreateConsumerOverridesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateConsumerOverridesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.BatchCreateConsumerOverridesResponse";
  }
  protected:
  explicit BatchCreateConsumerOverridesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 1,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
  int overrides_size() const;
  private:
  int _internal_overrides_size() const;
  public:
  void clear_overrides();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
      mutable_overrides();
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_add_overrides();
  public:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* add_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
      overrides() const;

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.BatchCreateConsumerOverridesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride > overrides_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ImportConsumerOverridesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest) */ {
 public:
  inline ImportConsumerOverridesRequest() : ImportConsumerOverridesRequest(nullptr) {}
  ~ImportConsumerOverridesRequest() override;
  explicit PROTOBUF_CONSTEXPR ImportConsumerOverridesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportConsumerOverridesRequest(const ImportConsumerOverridesRequest& from);
  ImportConsumerOverridesRequest(ImportConsumerOverridesRequest&& from) noexcept
    : ImportConsumerOverridesRequest() {
    *this = ::std::move(from);
  }

  inline ImportConsumerOverridesRequest& operator=(const ImportConsumerOverridesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportConsumerOverridesRequest& operator=(ImportConsumerOverridesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportConsumerOverridesRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kInlineSource = 2,
    SOURCE_NOT_SET = 0,
  };

  static inline const ImportConsumerOverridesRequest* internal_default_instance() {
    return reinterpret_cast<const ImportConsumerOverridesRequest*>(
               &_ImportConsumerOverridesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ImportConsumerOverridesRequest& a, ImportConsumerOverridesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportConsumerOverridesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportConsumerOverridesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportConsumerOverridesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportConsumerOverridesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportConsumerOverridesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportConsumerOverridesRequest& from) {
    ImportConsumerOverridesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportConsumerOverridesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest";
  }
  protected:
  explicit ImportConsumerOverridesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceOnlyFieldNumber = 4,
    kParentFieldNumber = 1,
    kForceFieldNumber = 3,
    kInlineSourceFieldNumber = 2,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 4;
  int force_only_size() const;
  private:
  int _internal_force_only_size() const;
  public:
  void clear_force_only();
  private:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck _internal_force_only(int index) const;
  void _internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_force_only();
  public:
  ::google::api::serviceusage::v1beta1::QuotaSafetyCheck force_only(int index) const;
  void set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  void add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& force_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_force_only();

  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // .google.api.serviceusage.v1beta1.OverrideInlineSource inline_source = 2;
  bool has_inline_source() const;
  private:
  bool _internal_has_inline_source() const;
  public:
  void clear_inline_source();
  const ::google::api::serviceusage::v1beta1::OverrideInlineSource& inline_source() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::OverrideInlineSource* release_inline_source();
  ::google::api::serviceusage::v1beta1::OverrideInlineSource* mutable_inline_source();
  void set_allocated_inline_source(::google::api::serviceusage::v1beta1::OverrideInlineSource* inline_source);
  private:
  const ::google::api::serviceusage::v1beta1::OverrideInlineSource& _internal_inline_source() const;
  ::google::api::serviceusage::v1beta1::OverrideInlineSource* _internal_mutable_inline_source();
  public:
  void unsafe_arena_set_allocated_inline_source(
      ::google::api::serviceusage::v1beta1::OverrideInlineSource* inline_source);
  ::google::api::serviceusage::v1beta1::OverrideInlineSource* unsafe_arena_release_inline_source();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest)
 private:
  class _Internal;
  void set_has_inline_source();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> force_only_;
    mutable std::atomic<int> _force_only_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    bool force_;
    union SourceUnion {
      constexpr SourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::api::serviceusage::v1beta1::OverrideInlineSource* inline_source_;
    } source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ImportConsumerOverridesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse) */ {
 public:
  inline ImportConsumerOverridesResponse() : ImportConsumerOverridesResponse(nullptr) {}
  ~ImportConsumerOverridesResponse() override;
  explicit PROTOBUF_CONSTEXPR ImportConsumerOverridesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportConsumerOverridesResponse(const ImportConsumerOverridesResponse& from);
  ImportConsumerOverridesResponse(ImportConsumerOverridesResponse&& from) noexcept
    : ImportConsumerOverridesResponse() {
    *this = ::std::move(from);
  }

  inline ImportConsumerOverridesResponse& operator=(const ImportConsumerOverridesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportConsumerOverridesResponse& operator=(ImportConsumerOverridesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportConsumerOverridesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportConsumerOverridesResponse* internal_default_instance() {
    return reinterpret_cast<const ImportConsumerOverridesResponse*>(
               &_ImportConsumerOverridesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ImportConsumerOverridesResponse& a, ImportConsumerOverridesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportConsumerOverridesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportConsumerOverridesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportConsumerOverridesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportConsumerOverridesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportConsumerOverridesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportConsumerOverridesResponse& from) {
    ImportConsumerOverridesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportConsumerOverridesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse";
  }
  protected:
  explicit ImportConsumerOverridesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 1,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
  int overrides_size() const;
  private:
  int _internal_overrides_size() const;
  public:
  void clear_overrides();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
      mutable_overrides();
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_add_overrides();
  public:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* add_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
      overrides() const;

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride > overrides_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ImportConsumerOverridesMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ImportConsumerOverridesMetadata) */ {
 public:
  inline ImportConsumerOverridesMetadata() : ImportConsumerOverridesMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ImportConsumerOverridesMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportConsumerOverridesMetadata(const ImportConsumerOverridesMetadata& from);
  ImportConsumerOverridesMetadata(ImportConsumerOverridesMetadata&& from) noexcept
    : ImportConsumerOverridesMetadata() {
    *this = ::std::move(from);
  }

  inline ImportConsumerOverridesMetadata& operator=(const ImportConsumerOverridesMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportConsumerOverridesMetadata& operator=(ImportConsumerOverridesMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportConsumerOverridesMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportConsumerOverridesMetadata* internal_default_instance() {
    return reinterpret_cast<const ImportConsumerOverridesMetadata*>(
               &_ImportConsumerOverridesMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ImportConsumerOverridesMetadata& a, ImportConsumerOverridesMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportConsumerOverridesMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportConsumerOverridesMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportConsumerOverridesMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportConsumerOverridesMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ImportConsumerOverridesMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ImportConsumerOverridesMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ImportConsumerOverridesMetadata";
  }
  protected:
  explicit ImportConsumerOverridesMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ImportConsumerOverridesMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ImportAdminQuotaPoliciesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesResponse) */ {
 public:
  inline ImportAdminQuotaPoliciesResponse() : ImportAdminQuotaPoliciesResponse(nullptr) {}
  ~ImportAdminQuotaPoliciesResponse() override;
  explicit PROTOBUF_CONSTEXPR ImportAdminQuotaPoliciesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportAdminQuotaPoliciesResponse(const ImportAdminQuotaPoliciesResponse& from);
  ImportAdminQuotaPoliciesResponse(ImportAdminQuotaPoliciesResponse&& from) noexcept
    : ImportAdminQuotaPoliciesResponse() {
    *this = ::std::move(from);
  }

  inline ImportAdminQuotaPoliciesResponse& operator=(const ImportAdminQuotaPoliciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportAdminQuotaPoliciesResponse& operator=(ImportAdminQuotaPoliciesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportAdminQuotaPoliciesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportAdminQuotaPoliciesResponse* internal_default_instance() {
    return reinterpret_cast<const ImportAdminQuotaPoliciesResponse*>(
               &_ImportAdminQuotaPoliciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ImportAdminQuotaPoliciesResponse& a, ImportAdminQuotaPoliciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportAdminQuotaPoliciesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportAdminQuotaPoliciesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportAdminQuotaPoliciesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportAdminQuotaPoliciesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportAdminQuotaPoliciesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportAdminQuotaPoliciesResponse& from) {
    ImportAdminQuotaPoliciesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportAdminQuotaPoliciesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesResponse";
  }
  protected:
  explicit ImportAdminQuotaPoliciesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoliciesFieldNumber = 1,
  };
  // repeated .google.api.serviceusage.v1beta1.AdminQuotaPolicy policies = 1;
  int policies_size() const;
  private:
  int _internal_policies_size() const;
  public:
  void clear_policies();
  ::google::api::serviceusage::v1beta1::AdminQuotaPolicy* mutable_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::AdminQuotaPolicy >*
      mutable_policies();
  private:
  const ::google::api::serviceusage::v1beta1::AdminQuotaPolicy& _internal_policies(int index) const;
  ::google::api::serviceusage::v1beta1::AdminQuotaPolicy* _internal_add_policies();
  public:
  const ::google::api::serviceusage::v1beta1::AdminQuotaPolicy& policies(int index) const;
  ::google::api::serviceusage::v1beta1::AdminQuotaPolicy* add_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::AdminQuotaPolicy >&
      policies() const;

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::AdminQuotaPolicy > policies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class ImportAdminQuotaPoliciesMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesMetadata) */ {
 public:
  inline ImportAdminQuotaPoliciesMetadata() : ImportAdminQuotaPoliciesMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ImportAdminQuotaPoliciesMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportAdminQuotaPoliciesMetadata(const ImportAdminQuotaPoliciesMetadata& from);
  ImportAdminQuotaPoliciesMetadata(ImportAdminQuotaPoliciesMetadata&& from) noexcept
    : ImportAdminQuotaPoliciesMetadata() {
    *this = ::std::move(from);
  }

  inline ImportAdminQuotaPoliciesMetadata& operator=(const ImportAdminQuotaPoliciesMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportAdminQuotaPoliciesMetadata& operator=(ImportAdminQuotaPoliciesMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportAdminQuotaPoliciesMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportAdminQuotaPoliciesMetadata* internal_default_instance() {
    return reinterpret_cast<const ImportAdminQuotaPoliciesMetadata*>(
               &_ImportAdminQuotaPoliciesMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ImportAdminQuotaPoliciesMetadata& a, ImportAdminQuotaPoliciesMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportAdminQuotaPoliciesMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportAdminQuotaPoliciesMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportAdminQuotaPoliciesMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportAdminQuotaPoliciesMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ImportAdminQuotaPoliciesMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ImportAdminQuotaPoliciesMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesMetadata";
  }
  protected:
  explicit ImportAdminQuotaPoliciesMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class CreateAdminQuotaPolicyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.CreateAdminQuotaPolicyMetadata) */ {
 public:
  inline CreateAdminQuotaPolicyMetadata() : CreateAdminQuotaPolicyMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CreateAdminQuotaPolicyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAdminQuotaPolicyMetadata(const CreateAdminQuotaPolicyMetadata& from);
  CreateAdminQuotaPolicyMetadata(CreateAdminQuotaPolicyMetadata&& from) noexcept
    : CreateAdminQuotaPolicyMetadata() {
    *this = ::std::move(from);
  }

  inline CreateAdminQuotaPolicyMetadata& operator=(const CreateAdminQuotaPolicyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAdminQuotaPolicyMetadata& operator=(CreateAdminQuotaPolicyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAdminQuotaPolicyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAdminQuotaPolicyMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateAdminQuotaPolicyMetadata*>(
               &_CreateAdminQuotaPolicyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CreateAdminQuotaPolicyMetadata& a, CreateAdminQuotaPolicyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAdminQuotaPolicyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAdminQuotaPolicyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAdminQuotaPolicyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAdminQuotaPolicyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateAdminQuotaPolicyMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateAdminQuotaPolicyMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.CreateAdminQuotaPolicyMetadata";
  }
  protected:
  explicit CreateAdminQuotaPolicyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.CreateAdminQuotaPolicyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class UpdateAdminQuotaPolicyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.UpdateAdminQuotaPolicyMetadata) */ {
 public:
  inline UpdateAdminQuotaPolicyMetadata() : UpdateAdminQuotaPolicyMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateAdminQuotaPolicyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAdminQuotaPolicyMetadata(const UpdateAdminQuotaPolicyMetadata& from);
  UpdateAdminQuotaPolicyMetadata(UpdateAdminQuotaPolicyMetadata&& from) noexcept
    : UpdateAdminQuotaPolicyMetadata() {
    *this = ::std::move(from);
  }

  inline UpdateAdminQuotaPolicyMetadata& operator=(const UpdateAdminQuotaPolicyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAdminQuotaPolicyMetadata& operator=(UpdateAdminQuotaPolicyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAdminQuotaPolicyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAdminQuotaPolicyMetadata* internal_default_instance() {
    return reinterpret_cast<const UpdateAdminQuotaPolicyMetadata*>(
               &_UpdateAdminQuotaPolicyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateAdminQuotaPolicyMetadata& a, UpdateAdminQuotaPolicyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAdminQuotaPolicyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAdminQuotaPolicyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAdminQuotaPolicyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAdminQuotaPolicyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateAdminQuotaPolicyMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateAdminQuotaPolicyMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.UpdateAdminQuotaPolicyMetadata";
  }
  protected:
  explicit UpdateAdminQuotaPolicyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.UpdateAdminQuotaPolicyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class DeleteAdminQuotaPolicyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.DeleteAdminQuotaPolicyMetadata) */ {
 public:
  inline DeleteAdminQuotaPolicyMetadata() : DeleteAdminQuotaPolicyMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeleteAdminQuotaPolicyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAdminQuotaPolicyMetadata(const DeleteAdminQuotaPolicyMetadata& from);
  DeleteAdminQuotaPolicyMetadata(DeleteAdminQuotaPolicyMetadata&& from) noexcept
    : DeleteAdminQuotaPolicyMetadata() {
    *this = ::std::move(from);
  }

  inline DeleteAdminQuotaPolicyMetadata& operator=(const DeleteAdminQuotaPolicyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAdminQuotaPolicyMetadata& operator=(DeleteAdminQuotaPolicyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAdminQuotaPolicyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAdminQuotaPolicyMetadata* internal_default_instance() {
    return reinterpret_cast<const DeleteAdminQuotaPolicyMetadata*>(
               &_DeleteAdminQuotaPolicyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeleteAdminQuotaPolicyMetadata& a, DeleteAdminQuotaPolicyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAdminQuotaPolicyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAdminQuotaPolicyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAdminQuotaPolicyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAdminQuotaPolicyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteAdminQuotaPolicyMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteAdminQuotaPolicyMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.DeleteAdminQuotaPolicyMetadata";
  }
  protected:
  explicit DeleteAdminQuotaPolicyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.DeleteAdminQuotaPolicyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class GenerateServiceIdentityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.GenerateServiceIdentityRequest) */ {
 public:
  inline GenerateServiceIdentityRequest() : GenerateServiceIdentityRequest(nullptr) {}
  ~GenerateServiceIdentityRequest() override;
  explicit PROTOBUF_CONSTEXPR GenerateServiceIdentityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenerateServiceIdentityRequest(const GenerateServiceIdentityRequest& from);
  GenerateServiceIdentityRequest(GenerateServiceIdentityRequest&& from) noexcept
    : GenerateServiceIdentityRequest() {
    *this = ::std::move(from);
  }

  inline GenerateServiceIdentityRequest& operator=(const GenerateServiceIdentityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateServiceIdentityRequest& operator=(GenerateServiceIdentityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenerateServiceIdentityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenerateServiceIdentityRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateServiceIdentityRequest*>(
               &_GenerateServiceIdentityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GenerateServiceIdentityRequest& a, GenerateServiceIdentityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateServiceIdentityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateServiceIdentityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenerateServiceIdentityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenerateServiceIdentityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenerateServiceIdentityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenerateServiceIdentityRequest& from) {
    GenerateServiceIdentityRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateServiceIdentityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.GenerateServiceIdentityRequest";
  }
  protected:
  explicit GenerateServiceIdentityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.GenerateServiceIdentityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class GetServiceIdentityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.GetServiceIdentityResponse) */ {
 public:
  inline GetServiceIdentityResponse() : GetServiceIdentityResponse(nullptr) {}
  ~GetServiceIdentityResponse() override;
  explicit PROTOBUF_CONSTEXPR GetServiceIdentityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceIdentityResponse(const GetServiceIdentityResponse& from);
  GetServiceIdentityResponse(GetServiceIdentityResponse&& from) noexcept
    : GetServiceIdentityResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceIdentityResponse& operator=(const GetServiceIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceIdentityResponse& operator=(GetServiceIdentityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceIdentityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceIdentityResponse*>(
               &_GetServiceIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetServiceIdentityResponse& a, GetServiceIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceIdentityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceIdentityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceIdentityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceIdentityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceIdentityResponse& from) {
    GetServiceIdentityResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceIdentityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.GetServiceIdentityResponse";
  }
  protected:
  explicit GetServiceIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetServiceIdentityResponse_IdentityState IdentityState;
  static constexpr IdentityState IDENTITY_STATE_UNSPECIFIED =
    GetServiceIdentityResponse_IdentityState_IDENTITY_STATE_UNSPECIFIED;
  static constexpr IdentityState ACTIVE =
    GetServiceIdentityResponse_IdentityState_ACTIVE;
  static inline bool IdentityState_IsValid(int value) {
    return GetServiceIdentityResponse_IdentityState_IsValid(value);
  }
  static constexpr IdentityState IdentityState_MIN =
    GetServiceIdentityResponse_IdentityState_IdentityState_MIN;
  static constexpr IdentityState IdentityState_MAX =
    GetServiceIdentityResponse_IdentityState_IdentityState_MAX;
  static constexpr int IdentityState_ARRAYSIZE =
    GetServiceIdentityResponse_IdentityState_IdentityState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IdentityState_descriptor() {
    return GetServiceIdentityResponse_IdentityState_descriptor();
  }
  template<typename T>
  static inline const std::string& IdentityState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IdentityState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IdentityState_Name.");
    return GetServiceIdentityResponse_IdentityState_Name(enum_t_value);
  }
  static inline bool IdentityState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      IdentityState* value) {
    return GetServiceIdentityResponse_IdentityState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .google.api.serviceusage.v1beta1.ServiceIdentity identity = 1;
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;
  public:
  void clear_identity();
  const ::google::api::serviceusage::v1beta1::ServiceIdentity& identity() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::ServiceIdentity* release_identity();
  ::google::api::serviceusage::v1beta1::ServiceIdentity* mutable_identity();
  void set_allocated_identity(::google::api::serviceusage::v1beta1::ServiceIdentity* identity);
  private:
  const ::google::api::serviceusage::v1beta1::ServiceIdentity& _internal_identity() const;
  ::google::api::serviceusage::v1beta1::ServiceIdentity* _internal_mutable_identity();
  public:
  void unsafe_arena_set_allocated_identity(
      ::google::api::serviceusage::v1beta1::ServiceIdentity* identity);
  ::google::api::serviceusage::v1beta1::ServiceIdentity* unsafe_arena_release_identity();

  // .google.api.serviceusage.v1beta1.GetServiceIdentityResponse.IdentityState state = 2;
  void clear_state();
  ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState state() const;
  void set_state(::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState value);
  private:
  ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState _internal_state() const;
  void _internal_set_state(::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.GetServiceIdentityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::api::serviceusage::v1beta1::ServiceIdentity* identity_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// -------------------------------------------------------------------

class GetServiceIdentityMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.GetServiceIdentityMetadata) */ {
 public:
  inline GetServiceIdentityMetadata() : GetServiceIdentityMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetServiceIdentityMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceIdentityMetadata(const GetServiceIdentityMetadata& from);
  GetServiceIdentityMetadata(GetServiceIdentityMetadata&& from) noexcept
    : GetServiceIdentityMetadata() {
    *this = ::std::move(from);
  }

  inline GetServiceIdentityMetadata& operator=(const GetServiceIdentityMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceIdentityMetadata& operator=(GetServiceIdentityMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceIdentityMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceIdentityMetadata* internal_default_instance() {
    return reinterpret_cast<const GetServiceIdentityMetadata*>(
               &_GetServiceIdentityMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetServiceIdentityMetadata& a, GetServiceIdentityMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceIdentityMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceIdentityMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceIdentityMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceIdentityMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetServiceIdentityMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetServiceIdentityMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.GetServiceIdentityMetadata";
  }
  protected:
  explicit GetServiceIdentityMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.GetServiceIdentityMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnableServiceRequest

// string name = 1;
inline void EnableServiceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EnableServiceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.EnableServiceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnableServiceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.EnableServiceRequest.name)
}
inline std::string* EnableServiceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.EnableServiceRequest.name)
  return _s;
}
inline const std::string& EnableServiceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EnableServiceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnableServiceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EnableServiceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.EnableServiceRequest.name)
  return _impl_.name_.Release();
}
inline void EnableServiceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.EnableServiceRequest.name)
}

// -------------------------------------------------------------------

// DisableServiceRequest

// string name = 1;
inline void DisableServiceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DisableServiceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.DisableServiceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisableServiceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.DisableServiceRequest.name)
}
inline std::string* DisableServiceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.DisableServiceRequest.name)
  return _s;
}
inline const std::string& DisableServiceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DisableServiceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DisableServiceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DisableServiceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.DisableServiceRequest.name)
  return _impl_.name_.Release();
}
inline void DisableServiceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.DisableServiceRequest.name)
}

// -------------------------------------------------------------------

// GetServiceRequest

// string name = 1;
inline void GetServiceRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetServiceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.GetServiceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetServiceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.GetServiceRequest.name)
}
inline std::string* GetServiceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.GetServiceRequest.name)
  return _s;
}
inline const std::string& GetServiceRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetServiceRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetServiceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.GetServiceRequest.name)
  return _impl_.name_.Release();
}
inline void GetServiceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.GetServiceRequest.name)
}

// -------------------------------------------------------------------

// ListServicesRequest

// string parent = 1;
inline void ListServicesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListServicesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListServicesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServicesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListServicesRequest.parent)
}
inline std::string* ListServicesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListServicesRequest.parent)
  return _s;
}
inline const std::string& ListServicesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListServicesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServicesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServicesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListServicesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListServicesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListServicesRequest.parent)
}

// int32 page_size = 2;
inline void ListServicesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListServicesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListServicesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListServicesRequest.page_size)
  return _internal_page_size();
}
inline void ListServicesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListServicesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListServicesRequest.page_size)
}

// string page_token = 3;
inline void ListServicesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListServicesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListServicesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServicesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListServicesRequest.page_token)
}
inline std::string* ListServicesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListServicesRequest.page_token)
  return _s;
}
inline const std::string& ListServicesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListServicesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServicesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServicesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListServicesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListServicesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListServicesRequest.page_token)
}

// string filter = 4;
inline void ListServicesRequest::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& ListServicesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListServicesRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServicesRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListServicesRequest.filter)
}
inline std::string* ListServicesRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListServicesRequest.filter)
  return _s;
}
inline const std::string& ListServicesRequest::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void ListServicesRequest::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServicesRequest::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServicesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListServicesRequest.filter)
  return _impl_.filter_.Release();
}
inline void ListServicesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListServicesRequest.filter)
}

// -------------------------------------------------------------------

// ListServicesResponse

// repeated .google.api.serviceusage.v1beta1.Service services = 1;
inline int ListServicesResponse::_internal_services_size() const {
  return _impl_.services_.size();
}
inline int ListServicesResponse::services_size() const {
  return _internal_services_size();
}
inline ::google::api::serviceusage::v1beta1::Service* ListServicesResponse::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListServicesResponse.services)
  return _impl_.services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::Service >*
ListServicesResponse::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ListServicesResponse.services)
  return &_impl_.services_;
}
inline const ::google::api::serviceusage::v1beta1::Service& ListServicesResponse::_internal_services(int index) const {
  return _impl_.services_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::Service& ListServicesResponse::services(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListServicesResponse.services)
  return _internal_services(index);
}
inline ::google::api::serviceusage::v1beta1::Service* ListServicesResponse::_internal_add_services() {
  return _impl_.services_.Add();
}
inline ::google::api::serviceusage::v1beta1::Service* ListServicesResponse::add_services() {
  ::google::api::serviceusage::v1beta1::Service* _add = _internal_add_services();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ListServicesResponse.services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::Service >&
ListServicesResponse::services() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ListServicesResponse.services)
  return _impl_.services_;
}

// string next_page_token = 2;
inline void ListServicesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListServicesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListServicesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListServicesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListServicesResponse.next_page_token)
}
inline std::string* ListServicesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListServicesResponse.next_page_token)
  return _s;
}
inline const std::string& ListServicesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListServicesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListServicesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListServicesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListServicesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListServicesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListServicesResponse.next_page_token)
}

// -------------------------------------------------------------------

// BatchEnableServicesRequest

// string parent = 1;
inline void BatchEnableServicesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& BatchEnableServicesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchEnableServicesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.parent)
}
inline std::string* BatchEnableServicesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.parent)
  return _s;
}
inline const std::string& BatchEnableServicesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void BatchEnableServicesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchEnableServicesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchEnableServicesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.parent)
  return _impl_.parent_.Release();
}
inline void BatchEnableServicesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.parent)
}

// repeated string service_ids = 2;
inline int BatchEnableServicesRequest::_internal_service_ids_size() const {
  return _impl_.service_ids_.size();
}
inline int BatchEnableServicesRequest::service_ids_size() const {
  return _internal_service_ids_size();
}
inline void BatchEnableServicesRequest::clear_service_ids() {
  _impl_.service_ids_.Clear();
}
inline std::string* BatchEnableServicesRequest::add_service_ids() {
  std::string* _s = _internal_add_service_ids();
  // @@protoc_insertion_point(field_add_mutable:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
  return _s;
}
inline const std::string& BatchEnableServicesRequest::_internal_service_ids(int index) const {
  return _impl_.service_ids_.Get(index);
}
inline const std::string& BatchEnableServicesRequest::service_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
  return _internal_service_ids(index);
}
inline std::string* BatchEnableServicesRequest::mutable_service_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
  return _impl_.service_ids_.Mutable(index);
}
inline void BatchEnableServicesRequest::set_service_ids(int index, const std::string& value) {
  _impl_.service_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
}
inline void BatchEnableServicesRequest::set_service_ids(int index, std::string&& value) {
  _impl_.service_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
}
inline void BatchEnableServicesRequest::set_service_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.service_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
}
inline void BatchEnableServicesRequest::set_service_ids(int index, const char* value, size_t size) {
  _impl_.service_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
}
inline std::string* BatchEnableServicesRequest::_internal_add_service_ids() {
  return _impl_.service_ids_.Add();
}
inline void BatchEnableServicesRequest::add_service_ids(const std::string& value) {
  _impl_.service_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
}
inline void BatchEnableServicesRequest::add_service_ids(std::string&& value) {
  _impl_.service_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
}
inline void BatchEnableServicesRequest::add_service_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.service_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
}
inline void BatchEnableServicesRequest::add_service_ids(const char* value, size_t size) {
  _impl_.service_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchEnableServicesRequest::service_ids() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
  return _impl_.service_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchEnableServicesRequest::mutable_service_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.BatchEnableServicesRequest.service_ids)
  return &_impl_.service_ids_;
}

// -------------------------------------------------------------------

// ListConsumerQuotaMetricsRequest

// string parent = 1;
inline void ListConsumerQuotaMetricsRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListConsumerQuotaMetricsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConsumerQuotaMetricsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.parent)
}
inline std::string* ListConsumerQuotaMetricsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.parent)
  return _s;
}
inline const std::string& ListConsumerQuotaMetricsRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListConsumerQuotaMetricsRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConsumerQuotaMetricsRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConsumerQuotaMetricsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListConsumerQuotaMetricsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.parent)
}

// int32 page_size = 2;
inline void ListConsumerQuotaMetricsRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListConsumerQuotaMetricsRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListConsumerQuotaMetricsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.page_size)
  return _internal_page_size();
}
inline void ListConsumerQuotaMetricsRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListConsumerQuotaMetricsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.page_size)
}

// string page_token = 3;
inline void ListConsumerQuotaMetricsRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListConsumerQuotaMetricsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConsumerQuotaMetricsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.page_token)
}
inline std::string* ListConsumerQuotaMetricsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.page_token)
  return _s;
}
inline const std::string& ListConsumerQuotaMetricsRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListConsumerQuotaMetricsRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConsumerQuotaMetricsRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConsumerQuotaMetricsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListConsumerQuotaMetricsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.page_token)
}

// .google.api.serviceusage.v1beta1.QuotaView view = 4;
inline void ListConsumerQuotaMetricsRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::api::serviceusage::v1beta1::QuotaView ListConsumerQuotaMetricsRequest::_internal_view() const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaView >(_impl_.view_);
}
inline ::google::api::serviceusage::v1beta1::QuotaView ListConsumerQuotaMetricsRequest::view() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.view)
  return _internal_view();
}
inline void ListConsumerQuotaMetricsRequest::_internal_set_view(::google::api::serviceusage::v1beta1::QuotaView value) {
  
  _impl_.view_ = value;
}
inline void ListConsumerQuotaMetricsRequest::set_view(::google::api::serviceusage::v1beta1::QuotaView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsRequest.view)
}

// -------------------------------------------------------------------

// ListConsumerQuotaMetricsResponse

// repeated .google.api.serviceusage.v1beta1.ConsumerQuotaMetric metrics = 1;
inline int ListConsumerQuotaMetricsResponse::_internal_metrics_size() const {
  return _impl_.metrics_.size();
}
inline int ListConsumerQuotaMetricsResponse::metrics_size() const {
  return _internal_metrics_size();
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric* ListConsumerQuotaMetricsResponse::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.metrics)
  return _impl_.metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric >*
ListConsumerQuotaMetricsResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.metrics)
  return &_impl_.metrics_;
}
inline const ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric& ListConsumerQuotaMetricsResponse::_internal_metrics(int index) const {
  return _impl_.metrics_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric& ListConsumerQuotaMetricsResponse::metrics(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.metrics)
  return _internal_metrics(index);
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric* ListConsumerQuotaMetricsResponse::_internal_add_metrics() {
  return _impl_.metrics_.Add();
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric* ListConsumerQuotaMetricsResponse::add_metrics() {
  ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric >&
ListConsumerQuotaMetricsResponse::metrics() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.metrics)
  return _impl_.metrics_;
}

// string next_page_token = 2;
inline void ListConsumerQuotaMetricsResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListConsumerQuotaMetricsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConsumerQuotaMetricsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.next_page_token)
}
inline std::string* ListConsumerQuotaMetricsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.next_page_token)
  return _s;
}
inline const std::string& ListConsumerQuotaMetricsResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListConsumerQuotaMetricsResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConsumerQuotaMetricsResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConsumerQuotaMetricsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListConsumerQuotaMetricsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListConsumerQuotaMetricsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetConsumerQuotaMetricRequest

// string name = 1;
inline void GetConsumerQuotaMetricRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetConsumerQuotaMetricRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConsumerQuotaMetricRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest.name)
}
inline std::string* GetConsumerQuotaMetricRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest.name)
  return _s;
}
inline const std::string& GetConsumerQuotaMetricRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetConsumerQuotaMetricRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetConsumerQuotaMetricRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetConsumerQuotaMetricRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest.name)
  return _impl_.name_.Release();
}
inline void GetConsumerQuotaMetricRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest.name)
}

// .google.api.serviceusage.v1beta1.QuotaView view = 2;
inline void GetConsumerQuotaMetricRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::api::serviceusage::v1beta1::QuotaView GetConsumerQuotaMetricRequest::_internal_view() const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaView >(_impl_.view_);
}
inline ::google::api::serviceusage::v1beta1::QuotaView GetConsumerQuotaMetricRequest::view() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest.view)
  return _internal_view();
}
inline void GetConsumerQuotaMetricRequest::_internal_set_view(::google::api::serviceusage::v1beta1::QuotaView value) {
  
  _impl_.view_ = value;
}
inline void GetConsumerQuotaMetricRequest::set_view(::google::api::serviceusage::v1beta1::QuotaView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.GetConsumerQuotaMetricRequest.view)
}

// -------------------------------------------------------------------

// GetConsumerQuotaLimitRequest

// string name = 1;
inline void GetConsumerQuotaLimitRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetConsumerQuotaLimitRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConsumerQuotaLimitRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest.name)
}
inline std::string* GetConsumerQuotaLimitRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest.name)
  return _s;
}
inline const std::string& GetConsumerQuotaLimitRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetConsumerQuotaLimitRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetConsumerQuotaLimitRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetConsumerQuotaLimitRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest.name)
  return _impl_.name_.Release();
}
inline void GetConsumerQuotaLimitRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest.name)
}

// .google.api.serviceusage.v1beta1.QuotaView view = 2;
inline void GetConsumerQuotaLimitRequest::clear_view() {
  _impl_.view_ = 0;
}
inline ::google::api::serviceusage::v1beta1::QuotaView GetConsumerQuotaLimitRequest::_internal_view() const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaView >(_impl_.view_);
}
inline ::google::api::serviceusage::v1beta1::QuotaView GetConsumerQuotaLimitRequest::view() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest.view)
  return _internal_view();
}
inline void GetConsumerQuotaLimitRequest::_internal_set_view(::google::api::serviceusage::v1beta1::QuotaView value) {
  
  _impl_.view_ = value;
}
inline void GetConsumerQuotaLimitRequest::set_view(::google::api::serviceusage::v1beta1::QuotaView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.GetConsumerQuotaLimitRequest.view)
}

// -------------------------------------------------------------------

// CreateAdminOverrideRequest

// string parent = 1;
inline void CreateAdminOverrideRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateAdminOverrideRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAdminOverrideRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.parent)
}
inline std::string* CreateAdminOverrideRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.parent)
  return _s;
}
inline const std::string& CreateAdminOverrideRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateAdminOverrideRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAdminOverrideRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAdminOverrideRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateAdminOverrideRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.parent)
}

// .google.api.serviceusage.v1beta1.QuotaOverride override = 2;
inline bool CreateAdminOverrideRequest::_internal_has_override() const {
  return this != internal_default_instance() && _impl_.override_ != nullptr;
}
inline bool CreateAdminOverrideRequest::has_override() const {
  return _internal_has_override();
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& CreateAdminOverrideRequest::_internal_override() const {
  const ::google::api::serviceusage::v1beta1::QuotaOverride* p = _impl_.override_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::QuotaOverride&>(
      ::google::api::serviceusage::v1beta1::_QuotaOverride_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& CreateAdminOverrideRequest::override() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.override)
  return _internal_override();
}
inline void CreateAdminOverrideRequest::unsafe_arena_set_allocated_override(
    ::google::api::serviceusage::v1beta1::QuotaOverride* override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_);
  }
  _impl_.override_ = override;
  if (override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.override)
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* CreateAdminOverrideRequest::release_override() {
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.override_;
  _impl_.override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* CreateAdminOverrideRequest::unsafe_arena_release_override() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.override)
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.override_;
  _impl_.override_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* CreateAdminOverrideRequest::_internal_mutable_override() {
  
  if (_impl_.override_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride>(GetArenaForAllocation());
    _impl_.override_ = p;
  }
  return _impl_.override_;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* CreateAdminOverrideRequest::mutable_override() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _msg = _internal_mutable_override();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.override)
  return _msg;
}
inline void CreateAdminOverrideRequest::set_allocated_override(::google::api::serviceusage::v1beta1::QuotaOverride* override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_);
  }
  if (override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override));
    if (message_arena != submessage_arena) {
      override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.override_ = override;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.override)
}

// bool force = 3;
inline void CreateAdminOverrideRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool CreateAdminOverrideRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool CreateAdminOverrideRequest::force() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.force)
  return _internal_force();
}
inline void CreateAdminOverrideRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void CreateAdminOverrideRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.force)
}

// repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 4;
inline int CreateAdminOverrideRequest::_internal_force_only_size() const {
  return _impl_.force_only_.size();
}
inline int CreateAdminOverrideRequest::force_only_size() const {
  return _internal_force_only_size();
}
inline void CreateAdminOverrideRequest::clear_force_only() {
  _impl_.force_only_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck CreateAdminOverrideRequest::_internal_force_only(int index) const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck >(_impl_.force_only_.Get(index));
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck CreateAdminOverrideRequest::force_only(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.force_only)
  return _internal_force_only(index);
}
inline void CreateAdminOverrideRequest::set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.force_only)
}
inline void CreateAdminOverrideRequest::_internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Add(value);
}
inline void CreateAdminOverrideRequest::add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _internal_add_force_only(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.force_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CreateAdminOverrideRequest::force_only() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.force_only)
  return _impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateAdminOverrideRequest::_internal_mutable_force_only() {
  return &_impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateAdminOverrideRequest::mutable_force_only() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.CreateAdminOverrideRequest.force_only)
  return _internal_mutable_force_only();
}

// -------------------------------------------------------------------

// UpdateAdminOverrideRequest

// string name = 1;
inline void UpdateAdminOverrideRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UpdateAdminOverrideRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateAdminOverrideRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.name)
}
inline std::string* UpdateAdminOverrideRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.name)
  return _s;
}
inline const std::string& UpdateAdminOverrideRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UpdateAdminOverrideRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateAdminOverrideRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateAdminOverrideRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.name)
  return _impl_.name_.Release();
}
inline void UpdateAdminOverrideRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.name)
}

// .google.api.serviceusage.v1beta1.QuotaOverride override = 2;
inline bool UpdateAdminOverrideRequest::_internal_has_override() const {
  return this != internal_default_instance() && _impl_.override_ != nullptr;
}
inline bool UpdateAdminOverrideRequest::has_override() const {
  return _internal_has_override();
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& UpdateAdminOverrideRequest::_internal_override() const {
  const ::google::api::serviceusage::v1beta1::QuotaOverride* p = _impl_.override_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::QuotaOverride&>(
      ::google::api::serviceusage::v1beta1::_QuotaOverride_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& UpdateAdminOverrideRequest::override() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.override)
  return _internal_override();
}
inline void UpdateAdminOverrideRequest::unsafe_arena_set_allocated_override(
    ::google::api::serviceusage::v1beta1::QuotaOverride* override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_);
  }
  _impl_.override_ = override;
  if (override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.override)
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* UpdateAdminOverrideRequest::release_override() {
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.override_;
  _impl_.override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* UpdateAdminOverrideRequest::unsafe_arena_release_override() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.override)
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.override_;
  _impl_.override_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* UpdateAdminOverrideRequest::_internal_mutable_override() {
  
  if (_impl_.override_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride>(GetArenaForAllocation());
    _impl_.override_ = p;
  }
  return _impl_.override_;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* UpdateAdminOverrideRequest::mutable_override() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _msg = _internal_mutable_override();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.override)
  return _msg;
}
inline void UpdateAdminOverrideRequest::set_allocated_override(::google::api::serviceusage::v1beta1::QuotaOverride* override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_);
  }
  if (override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override));
    if (message_arena != submessage_arena) {
      override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.override_ = override;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.override)
}

// bool force = 3;
inline void UpdateAdminOverrideRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool UpdateAdminOverrideRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool UpdateAdminOverrideRequest::force() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.force)
  return _internal_force();
}
inline void UpdateAdminOverrideRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void UpdateAdminOverrideRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.force)
}

// .google.protobuf.FieldMask update_mask = 4;
inline bool UpdateAdminOverrideRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateAdminOverrideRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAdminOverrideRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAdminOverrideRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateAdminOverrideRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAdminOverrideRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAdminOverrideRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAdminOverrideRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAdminOverrideRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.update_mask)
  return _msg;
}
inline void UpdateAdminOverrideRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.update_mask)
}

// repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 5;
inline int UpdateAdminOverrideRequest::_internal_force_only_size() const {
  return _impl_.force_only_.size();
}
inline int UpdateAdminOverrideRequest::force_only_size() const {
  return _internal_force_only_size();
}
inline void UpdateAdminOverrideRequest::clear_force_only() {
  _impl_.force_only_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck UpdateAdminOverrideRequest::_internal_force_only(int index) const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck >(_impl_.force_only_.Get(index));
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck UpdateAdminOverrideRequest::force_only(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.force_only)
  return _internal_force_only(index);
}
inline void UpdateAdminOverrideRequest::set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.force_only)
}
inline void UpdateAdminOverrideRequest::_internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Add(value);
}
inline void UpdateAdminOverrideRequest::add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _internal_add_force_only(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.force_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UpdateAdminOverrideRequest::force_only() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.force_only)
  return _impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateAdminOverrideRequest::_internal_mutable_force_only() {
  return &_impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateAdminOverrideRequest::mutable_force_only() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.UpdateAdminOverrideRequest.force_only)
  return _internal_mutable_force_only();
}

// -------------------------------------------------------------------

// DeleteAdminOverrideRequest

// string name = 1;
inline void DeleteAdminOverrideRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteAdminOverrideRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAdminOverrideRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.name)
}
inline std::string* DeleteAdminOverrideRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.name)
  return _s;
}
inline const std::string& DeleteAdminOverrideRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteAdminOverrideRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteAdminOverrideRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteAdminOverrideRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteAdminOverrideRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.name)
}

// bool force = 2;
inline void DeleteAdminOverrideRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool DeleteAdminOverrideRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool DeleteAdminOverrideRequest::force() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.force)
  return _internal_force();
}
inline void DeleteAdminOverrideRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void DeleteAdminOverrideRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.force)
}

// repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 3;
inline int DeleteAdminOverrideRequest::_internal_force_only_size() const {
  return _impl_.force_only_.size();
}
inline int DeleteAdminOverrideRequest::force_only_size() const {
  return _internal_force_only_size();
}
inline void DeleteAdminOverrideRequest::clear_force_only() {
  _impl_.force_only_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck DeleteAdminOverrideRequest::_internal_force_only(int index) const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck >(_impl_.force_only_.Get(index));
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck DeleteAdminOverrideRequest::force_only(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.force_only)
  return _internal_force_only(index);
}
inline void DeleteAdminOverrideRequest::set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.force_only)
}
inline void DeleteAdminOverrideRequest::_internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Add(value);
}
inline void DeleteAdminOverrideRequest::add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _internal_add_force_only(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.force_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
DeleteAdminOverrideRequest::force_only() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.force_only)
  return _impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DeleteAdminOverrideRequest::_internal_mutable_force_only() {
  return &_impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DeleteAdminOverrideRequest::mutable_force_only() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.DeleteAdminOverrideRequest.force_only)
  return _internal_mutable_force_only();
}

// -------------------------------------------------------------------

// ListAdminOverridesRequest

// string parent = 1;
inline void ListAdminOverridesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListAdminOverridesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAdminOverridesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.parent)
}
inline std::string* ListAdminOverridesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.parent)
  return _s;
}
inline const std::string& ListAdminOverridesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListAdminOverridesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAdminOverridesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAdminOverridesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListAdminOverridesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.parent)
}

// int32 page_size = 2;
inline void ListAdminOverridesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListAdminOverridesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListAdminOverridesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.page_size)
  return _internal_page_size();
}
inline void ListAdminOverridesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListAdminOverridesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.page_size)
}

// string page_token = 3;
inline void ListAdminOverridesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListAdminOverridesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAdminOverridesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.page_token)
}
inline std::string* ListAdminOverridesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.page_token)
  return _s;
}
inline const std::string& ListAdminOverridesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListAdminOverridesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAdminOverridesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAdminOverridesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListAdminOverridesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListAdminOverridesRequest.page_token)
}

// -------------------------------------------------------------------

// ListAdminOverridesResponse

// repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
inline int ListAdminOverridesResponse::_internal_overrides_size() const {
  return _impl_.overrides_.size();
}
inline int ListAdminOverridesResponse::overrides_size() const {
  return _internal_overrides_size();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ListAdminOverridesResponse::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.overrides)
  return _impl_.overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
ListAdminOverridesResponse::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.overrides)
  return &_impl_.overrides_;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& ListAdminOverridesResponse::_internal_overrides(int index) const {
  return _impl_.overrides_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& ListAdminOverridesResponse::overrides(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.overrides)
  return _internal_overrides(index);
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ListAdminOverridesResponse::_internal_add_overrides() {
  return _impl_.overrides_.Add();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ListAdminOverridesResponse::add_overrides() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _add = _internal_add_overrides();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
ListAdminOverridesResponse::overrides() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.overrides)
  return _impl_.overrides_;
}

// string next_page_token = 2;
inline void ListAdminOverridesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListAdminOverridesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAdminOverridesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.next_page_token)
}
inline std::string* ListAdminOverridesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.next_page_token)
  return _s;
}
inline const std::string& ListAdminOverridesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListAdminOverridesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAdminOverridesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListAdminOverridesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListAdminOverridesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListAdminOverridesResponse.next_page_token)
}

// -------------------------------------------------------------------

// BatchCreateAdminOverridesResponse

// repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
inline int BatchCreateAdminOverridesResponse::_internal_overrides_size() const {
  return _impl_.overrides_.size();
}
inline int BatchCreateAdminOverridesResponse::overrides_size() const {
  return _internal_overrides_size();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* BatchCreateAdminOverridesResponse::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.BatchCreateAdminOverridesResponse.overrides)
  return _impl_.overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
BatchCreateAdminOverridesResponse::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.BatchCreateAdminOverridesResponse.overrides)
  return &_impl_.overrides_;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& BatchCreateAdminOverridesResponse::_internal_overrides(int index) const {
  return _impl_.overrides_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& BatchCreateAdminOverridesResponse::overrides(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.BatchCreateAdminOverridesResponse.overrides)
  return _internal_overrides(index);
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* BatchCreateAdminOverridesResponse::_internal_add_overrides() {
  return _impl_.overrides_.Add();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* BatchCreateAdminOverridesResponse::add_overrides() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _add = _internal_add_overrides();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.BatchCreateAdminOverridesResponse.overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
BatchCreateAdminOverridesResponse::overrides() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.BatchCreateAdminOverridesResponse.overrides)
  return _impl_.overrides_;
}

// -------------------------------------------------------------------

// ImportAdminOverridesRequest

// string parent = 1;
inline void ImportAdminOverridesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ImportAdminOverridesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportAdminOverridesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.parent)
}
inline std::string* ImportAdminOverridesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.parent)
  return _s;
}
inline const std::string& ImportAdminOverridesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ImportAdminOverridesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportAdminOverridesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportAdminOverridesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ImportAdminOverridesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.parent)
}

// .google.api.serviceusage.v1beta1.OverrideInlineSource inline_source = 2;
inline bool ImportAdminOverridesRequest::_internal_has_inline_source() const {
  return source_case() == kInlineSource;
}
inline bool ImportAdminOverridesRequest::has_inline_source() const {
  return _internal_has_inline_source();
}
inline void ImportAdminOverridesRequest::set_has_inline_source() {
  _impl_._oneof_case_[0] = kInlineSource;
}
inline ::google::api::serviceusage::v1beta1::OverrideInlineSource* ImportAdminOverridesRequest::release_inline_source() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.inline_source)
  if (_internal_has_inline_source()) {
    clear_has_source();
    ::google::api::serviceusage::v1beta1::OverrideInlineSource* temp = _impl_.source_.inline_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_.inline_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::serviceusage::v1beta1::OverrideInlineSource& ImportAdminOverridesRequest::_internal_inline_source() const {
  return _internal_has_inline_source()
      ? *_impl_.source_.inline_source_
      : reinterpret_cast< ::google::api::serviceusage::v1beta1::OverrideInlineSource&>(::google::api::serviceusage::v1beta1::_OverrideInlineSource_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::OverrideInlineSource& ImportAdminOverridesRequest::inline_source() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.inline_source)
  return _internal_inline_source();
}
inline ::google::api::serviceusage::v1beta1::OverrideInlineSource* ImportAdminOverridesRequest::unsafe_arena_release_inline_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.inline_source)
  if (_internal_has_inline_source()) {
    clear_has_source();
    ::google::api::serviceusage::v1beta1::OverrideInlineSource* temp = _impl_.source_.inline_source_;
    _impl_.source_.inline_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImportAdminOverridesRequest::unsafe_arena_set_allocated_inline_source(::google::api::serviceusage::v1beta1::OverrideInlineSource* inline_source) {
  clear_source();
  if (inline_source) {
    set_has_inline_source();
    _impl_.source_.inline_source_ = inline_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.inline_source)
}
inline ::google::api::serviceusage::v1beta1::OverrideInlineSource* ImportAdminOverridesRequest::_internal_mutable_inline_source() {
  if (!_internal_has_inline_source()) {
    clear_source();
    set_has_inline_source();
    _impl_.source_.inline_source_ = CreateMaybeMessage< ::google::api::serviceusage::v1beta1::OverrideInlineSource >(GetArenaForAllocation());
  }
  return _impl_.source_.inline_source_;
}
inline ::google::api::serviceusage::v1beta1::OverrideInlineSource* ImportAdminOverridesRequest::mutable_inline_source() {
  ::google::api::serviceusage::v1beta1::OverrideInlineSource* _msg = _internal_mutable_inline_source();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.inline_source)
  return _msg;
}

// bool force = 3;
inline void ImportAdminOverridesRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool ImportAdminOverridesRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool ImportAdminOverridesRequest::force() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.force)
  return _internal_force();
}
inline void ImportAdminOverridesRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void ImportAdminOverridesRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.force)
}

// repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 4;
inline int ImportAdminOverridesRequest::_internal_force_only_size() const {
  return _impl_.force_only_.size();
}
inline int ImportAdminOverridesRequest::force_only_size() const {
  return _internal_force_only_size();
}
inline void ImportAdminOverridesRequest::clear_force_only() {
  _impl_.force_only_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck ImportAdminOverridesRequest::_internal_force_only(int index) const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck >(_impl_.force_only_.Get(index));
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck ImportAdminOverridesRequest::force_only(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.force_only)
  return _internal_force_only(index);
}
inline void ImportAdminOverridesRequest::set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.force_only)
}
inline void ImportAdminOverridesRequest::_internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Add(value);
}
inline void ImportAdminOverridesRequest::add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _internal_add_force_only(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.force_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ImportAdminOverridesRequest::force_only() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.force_only)
  return _impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ImportAdminOverridesRequest::_internal_mutable_force_only() {
  return &_impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ImportAdminOverridesRequest::mutable_force_only() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ImportAdminOverridesRequest.force_only)
  return _internal_mutable_force_only();
}

inline bool ImportAdminOverridesRequest::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void ImportAdminOverridesRequest::clear_has_source() {
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline ImportAdminOverridesRequest::SourceCase ImportAdminOverridesRequest::source_case() const {
  return ImportAdminOverridesRequest::SourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ImportAdminOverridesResponse

// repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
inline int ImportAdminOverridesResponse::_internal_overrides_size() const {
  return _impl_.overrides_.size();
}
inline int ImportAdminOverridesResponse::overrides_size() const {
  return _internal_overrides_size();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ImportAdminOverridesResponse::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ImportAdminOverridesResponse.overrides)
  return _impl_.overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
ImportAdminOverridesResponse::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ImportAdminOverridesResponse.overrides)
  return &_impl_.overrides_;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& ImportAdminOverridesResponse::_internal_overrides(int index) const {
  return _impl_.overrides_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& ImportAdminOverridesResponse::overrides(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportAdminOverridesResponse.overrides)
  return _internal_overrides(index);
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ImportAdminOverridesResponse::_internal_add_overrides() {
  return _impl_.overrides_.Add();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ImportAdminOverridesResponse::add_overrides() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _add = _internal_add_overrides();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ImportAdminOverridesResponse.overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
ImportAdminOverridesResponse::overrides() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ImportAdminOverridesResponse.overrides)
  return _impl_.overrides_;
}

// -------------------------------------------------------------------

// ImportAdminOverridesMetadata

// -------------------------------------------------------------------

// CreateConsumerOverrideRequest

// string parent = 1;
inline void CreateConsumerOverrideRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& CreateConsumerOverrideRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateConsumerOverrideRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.parent)
}
inline std::string* CreateConsumerOverrideRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.parent)
  return _s;
}
inline const std::string& CreateConsumerOverrideRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void CreateConsumerOverrideRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateConsumerOverrideRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateConsumerOverrideRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.parent)
  return _impl_.parent_.Release();
}
inline void CreateConsumerOverrideRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.parent)
}

// .google.api.serviceusage.v1beta1.QuotaOverride override = 2;
inline bool CreateConsumerOverrideRequest::_internal_has_override() const {
  return this != internal_default_instance() && _impl_.override_ != nullptr;
}
inline bool CreateConsumerOverrideRequest::has_override() const {
  return _internal_has_override();
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& CreateConsumerOverrideRequest::_internal_override() const {
  const ::google::api::serviceusage::v1beta1::QuotaOverride* p = _impl_.override_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::QuotaOverride&>(
      ::google::api::serviceusage::v1beta1::_QuotaOverride_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& CreateConsumerOverrideRequest::override() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.override)
  return _internal_override();
}
inline void CreateConsumerOverrideRequest::unsafe_arena_set_allocated_override(
    ::google::api::serviceusage::v1beta1::QuotaOverride* override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_);
  }
  _impl_.override_ = override;
  if (override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.override)
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* CreateConsumerOverrideRequest::release_override() {
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.override_;
  _impl_.override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* CreateConsumerOverrideRequest::unsafe_arena_release_override() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.override)
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.override_;
  _impl_.override_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* CreateConsumerOverrideRequest::_internal_mutable_override() {
  
  if (_impl_.override_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride>(GetArenaForAllocation());
    _impl_.override_ = p;
  }
  return _impl_.override_;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* CreateConsumerOverrideRequest::mutable_override() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _msg = _internal_mutable_override();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.override)
  return _msg;
}
inline void CreateConsumerOverrideRequest::set_allocated_override(::google::api::serviceusage::v1beta1::QuotaOverride* override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_);
  }
  if (override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override));
    if (message_arena != submessage_arena) {
      override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.override_ = override;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.override)
}

// bool force = 3;
inline void CreateConsumerOverrideRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool CreateConsumerOverrideRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool CreateConsumerOverrideRequest::force() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.force)
  return _internal_force();
}
inline void CreateConsumerOverrideRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void CreateConsumerOverrideRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.force)
}

// repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 4;
inline int CreateConsumerOverrideRequest::_internal_force_only_size() const {
  return _impl_.force_only_.size();
}
inline int CreateConsumerOverrideRequest::force_only_size() const {
  return _internal_force_only_size();
}
inline void CreateConsumerOverrideRequest::clear_force_only() {
  _impl_.force_only_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck CreateConsumerOverrideRequest::_internal_force_only(int index) const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck >(_impl_.force_only_.Get(index));
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck CreateConsumerOverrideRequest::force_only(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.force_only)
  return _internal_force_only(index);
}
inline void CreateConsumerOverrideRequest::set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.force_only)
}
inline void CreateConsumerOverrideRequest::_internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Add(value);
}
inline void CreateConsumerOverrideRequest::add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _internal_add_force_only(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.force_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CreateConsumerOverrideRequest::force_only() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.force_only)
  return _impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateConsumerOverrideRequest::_internal_mutable_force_only() {
  return &_impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CreateConsumerOverrideRequest::mutable_force_only() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.CreateConsumerOverrideRequest.force_only)
  return _internal_mutable_force_only();
}

// -------------------------------------------------------------------

// UpdateConsumerOverrideRequest

// string name = 1;
inline void UpdateConsumerOverrideRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UpdateConsumerOverrideRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateConsumerOverrideRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.name)
}
inline std::string* UpdateConsumerOverrideRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.name)
  return _s;
}
inline const std::string& UpdateConsumerOverrideRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UpdateConsumerOverrideRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateConsumerOverrideRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateConsumerOverrideRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.name)
  return _impl_.name_.Release();
}
inline void UpdateConsumerOverrideRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.name)
}

// .google.api.serviceusage.v1beta1.QuotaOverride override = 2;
inline bool UpdateConsumerOverrideRequest::_internal_has_override() const {
  return this != internal_default_instance() && _impl_.override_ != nullptr;
}
inline bool UpdateConsumerOverrideRequest::has_override() const {
  return _internal_has_override();
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& UpdateConsumerOverrideRequest::_internal_override() const {
  const ::google::api::serviceusage::v1beta1::QuotaOverride* p = _impl_.override_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::QuotaOverride&>(
      ::google::api::serviceusage::v1beta1::_QuotaOverride_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& UpdateConsumerOverrideRequest::override() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.override)
  return _internal_override();
}
inline void UpdateConsumerOverrideRequest::unsafe_arena_set_allocated_override(
    ::google::api::serviceusage::v1beta1::QuotaOverride* override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_);
  }
  _impl_.override_ = override;
  if (override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.override)
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* UpdateConsumerOverrideRequest::release_override() {
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.override_;
  _impl_.override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* UpdateConsumerOverrideRequest::unsafe_arena_release_override() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.override)
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.override_;
  _impl_.override_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* UpdateConsumerOverrideRequest::_internal_mutable_override() {
  
  if (_impl_.override_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride>(GetArenaForAllocation());
    _impl_.override_ = p;
  }
  return _impl_.override_;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* UpdateConsumerOverrideRequest::mutable_override() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _msg = _internal_mutable_override();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.override)
  return _msg;
}
inline void UpdateConsumerOverrideRequest::set_allocated_override(::google::api::serviceusage::v1beta1::QuotaOverride* override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.override_);
  }
  if (override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override));
    if (message_arena != submessage_arena) {
      override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.override_ = override;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.override)
}

// bool force = 3;
inline void UpdateConsumerOverrideRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool UpdateConsumerOverrideRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool UpdateConsumerOverrideRequest::force() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.force)
  return _internal_force();
}
inline void UpdateConsumerOverrideRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void UpdateConsumerOverrideRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.force)
}

// .google.protobuf.FieldMask update_mask = 4;
inline bool UpdateConsumerOverrideRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && _impl_.update_mask_ != nullptr;
}
inline bool UpdateConsumerOverrideRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateConsumerOverrideRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateConsumerOverrideRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateConsumerOverrideRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConsumerOverrideRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConsumerOverrideRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConsumerOverrideRequest::_internal_mutable_update_mask() {
  
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateConsumerOverrideRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.update_mask)
  return _msg;
}
inline void UpdateConsumerOverrideRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.update_mask)
}

// repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 5;
inline int UpdateConsumerOverrideRequest::_internal_force_only_size() const {
  return _impl_.force_only_.size();
}
inline int UpdateConsumerOverrideRequest::force_only_size() const {
  return _internal_force_only_size();
}
inline void UpdateConsumerOverrideRequest::clear_force_only() {
  _impl_.force_only_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck UpdateConsumerOverrideRequest::_internal_force_only(int index) const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck >(_impl_.force_only_.Get(index));
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck UpdateConsumerOverrideRequest::force_only(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.force_only)
  return _internal_force_only(index);
}
inline void UpdateConsumerOverrideRequest::set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.force_only)
}
inline void UpdateConsumerOverrideRequest::_internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Add(value);
}
inline void UpdateConsumerOverrideRequest::add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _internal_add_force_only(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.force_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UpdateConsumerOverrideRequest::force_only() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.force_only)
  return _impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateConsumerOverrideRequest::_internal_mutable_force_only() {
  return &_impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateConsumerOverrideRequest::mutable_force_only() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.UpdateConsumerOverrideRequest.force_only)
  return _internal_mutable_force_only();
}

// -------------------------------------------------------------------

// DeleteConsumerOverrideRequest

// string name = 1;
inline void DeleteConsumerOverrideRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeleteConsumerOverrideRequest::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteConsumerOverrideRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.name)
}
inline std::string* DeleteConsumerOverrideRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.name)
  return _s;
}
inline const std::string& DeleteConsumerOverrideRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeleteConsumerOverrideRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteConsumerOverrideRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteConsumerOverrideRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.name)
  return _impl_.name_.Release();
}
inline void DeleteConsumerOverrideRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.name)
}

// bool force = 2;
inline void DeleteConsumerOverrideRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool DeleteConsumerOverrideRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool DeleteConsumerOverrideRequest::force() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.force)
  return _internal_force();
}
inline void DeleteConsumerOverrideRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void DeleteConsumerOverrideRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.force)
}

// repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 3;
inline int DeleteConsumerOverrideRequest::_internal_force_only_size() const {
  return _impl_.force_only_.size();
}
inline int DeleteConsumerOverrideRequest::force_only_size() const {
  return _internal_force_only_size();
}
inline void DeleteConsumerOverrideRequest::clear_force_only() {
  _impl_.force_only_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck DeleteConsumerOverrideRequest::_internal_force_only(int index) const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck >(_impl_.force_only_.Get(index));
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck DeleteConsumerOverrideRequest::force_only(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.force_only)
  return _internal_force_only(index);
}
inline void DeleteConsumerOverrideRequest::set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.force_only)
}
inline void DeleteConsumerOverrideRequest::_internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Add(value);
}
inline void DeleteConsumerOverrideRequest::add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _internal_add_force_only(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.force_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
DeleteConsumerOverrideRequest::force_only() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.force_only)
  return _impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DeleteConsumerOverrideRequest::_internal_mutable_force_only() {
  return &_impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DeleteConsumerOverrideRequest::mutable_force_only() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.DeleteConsumerOverrideRequest.force_only)
  return _internal_mutable_force_only();
}

// -------------------------------------------------------------------

// ListConsumerOverridesRequest

// string parent = 1;
inline void ListConsumerOverridesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListConsumerOverridesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConsumerOverridesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.parent)
}
inline std::string* ListConsumerOverridesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.parent)
  return _s;
}
inline const std::string& ListConsumerOverridesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListConsumerOverridesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConsumerOverridesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConsumerOverridesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListConsumerOverridesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.parent)
}

// int32 page_size = 2;
inline void ListConsumerOverridesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListConsumerOverridesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListConsumerOverridesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.page_size)
  return _internal_page_size();
}
inline void ListConsumerOverridesRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListConsumerOverridesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.page_size)
}

// string page_token = 3;
inline void ListConsumerOverridesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListConsumerOverridesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConsumerOverridesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.page_token)
}
inline std::string* ListConsumerOverridesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.page_token)
  return _s;
}
inline const std::string& ListConsumerOverridesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListConsumerOverridesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConsumerOverridesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConsumerOverridesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListConsumerOverridesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListConsumerOverridesRequest.page_token)
}

// -------------------------------------------------------------------

// ListConsumerOverridesResponse

// repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
inline int ListConsumerOverridesResponse::_internal_overrides_size() const {
  return _impl_.overrides_.size();
}
inline int ListConsumerOverridesResponse::overrides_size() const {
  return _internal_overrides_size();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ListConsumerOverridesResponse::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.overrides)
  return _impl_.overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
ListConsumerOverridesResponse::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.overrides)
  return &_impl_.overrides_;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& ListConsumerOverridesResponse::_internal_overrides(int index) const {
  return _impl_.overrides_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& ListConsumerOverridesResponse::overrides(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.overrides)
  return _internal_overrides(index);
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ListConsumerOverridesResponse::_internal_add_overrides() {
  return _impl_.overrides_.Add();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ListConsumerOverridesResponse::add_overrides() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _add = _internal_add_overrides();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
ListConsumerOverridesResponse::overrides() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.overrides)
  return _impl_.overrides_;
}

// string next_page_token = 2;
inline void ListConsumerOverridesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListConsumerOverridesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConsumerOverridesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.next_page_token)
}
inline std::string* ListConsumerOverridesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.next_page_token)
  return _s;
}
inline const std::string& ListConsumerOverridesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListConsumerOverridesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListConsumerOverridesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListConsumerOverridesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListConsumerOverridesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ListConsumerOverridesResponse.next_page_token)
}

// -------------------------------------------------------------------

// BatchCreateConsumerOverridesResponse

// repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
inline int BatchCreateConsumerOverridesResponse::_internal_overrides_size() const {
  return _impl_.overrides_.size();
}
inline int BatchCreateConsumerOverridesResponse::overrides_size() const {
  return _internal_overrides_size();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* BatchCreateConsumerOverridesResponse::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.BatchCreateConsumerOverridesResponse.overrides)
  return _impl_.overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
BatchCreateConsumerOverridesResponse::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.BatchCreateConsumerOverridesResponse.overrides)
  return &_impl_.overrides_;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& BatchCreateConsumerOverridesResponse::_internal_overrides(int index) const {
  return _impl_.overrides_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& BatchCreateConsumerOverridesResponse::overrides(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.BatchCreateConsumerOverridesResponse.overrides)
  return _internal_overrides(index);
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* BatchCreateConsumerOverridesResponse::_internal_add_overrides() {
  return _impl_.overrides_.Add();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* BatchCreateConsumerOverridesResponse::add_overrides() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _add = _internal_add_overrides();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.BatchCreateConsumerOverridesResponse.overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
BatchCreateConsumerOverridesResponse::overrides() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.BatchCreateConsumerOverridesResponse.overrides)
  return _impl_.overrides_;
}

// -------------------------------------------------------------------

// ImportConsumerOverridesRequest

// string parent = 1;
inline void ImportConsumerOverridesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ImportConsumerOverridesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportConsumerOverridesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.parent)
}
inline std::string* ImportConsumerOverridesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.parent)
  return _s;
}
inline const std::string& ImportConsumerOverridesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ImportConsumerOverridesRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportConsumerOverridesRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportConsumerOverridesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ImportConsumerOverridesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.parent)
}

// .google.api.serviceusage.v1beta1.OverrideInlineSource inline_source = 2;
inline bool ImportConsumerOverridesRequest::_internal_has_inline_source() const {
  return source_case() == kInlineSource;
}
inline bool ImportConsumerOverridesRequest::has_inline_source() const {
  return _internal_has_inline_source();
}
inline void ImportConsumerOverridesRequest::set_has_inline_source() {
  _impl_._oneof_case_[0] = kInlineSource;
}
inline ::google::api::serviceusage::v1beta1::OverrideInlineSource* ImportConsumerOverridesRequest::release_inline_source() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.inline_source)
  if (_internal_has_inline_source()) {
    clear_has_source();
    ::google::api::serviceusage::v1beta1::OverrideInlineSource* temp = _impl_.source_.inline_source_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_.inline_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::serviceusage::v1beta1::OverrideInlineSource& ImportConsumerOverridesRequest::_internal_inline_source() const {
  return _internal_has_inline_source()
      ? *_impl_.source_.inline_source_
      : reinterpret_cast< ::google::api::serviceusage::v1beta1::OverrideInlineSource&>(::google::api::serviceusage::v1beta1::_OverrideInlineSource_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::OverrideInlineSource& ImportConsumerOverridesRequest::inline_source() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.inline_source)
  return _internal_inline_source();
}
inline ::google::api::serviceusage::v1beta1::OverrideInlineSource* ImportConsumerOverridesRequest::unsafe_arena_release_inline_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.inline_source)
  if (_internal_has_inline_source()) {
    clear_has_source();
    ::google::api::serviceusage::v1beta1::OverrideInlineSource* temp = _impl_.source_.inline_source_;
    _impl_.source_.inline_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImportConsumerOverridesRequest::unsafe_arena_set_allocated_inline_source(::google::api::serviceusage::v1beta1::OverrideInlineSource* inline_source) {
  clear_source();
  if (inline_source) {
    set_has_inline_source();
    _impl_.source_.inline_source_ = inline_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.inline_source)
}
inline ::google::api::serviceusage::v1beta1::OverrideInlineSource* ImportConsumerOverridesRequest::_internal_mutable_inline_source() {
  if (!_internal_has_inline_source()) {
    clear_source();
    set_has_inline_source();
    _impl_.source_.inline_source_ = CreateMaybeMessage< ::google::api::serviceusage::v1beta1::OverrideInlineSource >(GetArenaForAllocation());
  }
  return _impl_.source_.inline_source_;
}
inline ::google::api::serviceusage::v1beta1::OverrideInlineSource* ImportConsumerOverridesRequest::mutable_inline_source() {
  ::google::api::serviceusage::v1beta1::OverrideInlineSource* _msg = _internal_mutable_inline_source();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.inline_source)
  return _msg;
}

// bool force = 3;
inline void ImportConsumerOverridesRequest::clear_force() {
  _impl_.force_ = false;
}
inline bool ImportConsumerOverridesRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool ImportConsumerOverridesRequest::force() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.force)
  return _internal_force();
}
inline void ImportConsumerOverridesRequest::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void ImportConsumerOverridesRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.force)
}

// repeated .google.api.serviceusage.v1beta1.QuotaSafetyCheck force_only = 4;
inline int ImportConsumerOverridesRequest::_internal_force_only_size() const {
  return _impl_.force_only_.size();
}
inline int ImportConsumerOverridesRequest::force_only_size() const {
  return _internal_force_only_size();
}
inline void ImportConsumerOverridesRequest::clear_force_only() {
  _impl_.force_only_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck ImportConsumerOverridesRequest::_internal_force_only(int index) const {
  return static_cast< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck >(_impl_.force_only_.Get(index));
}
inline ::google::api::serviceusage::v1beta1::QuotaSafetyCheck ImportConsumerOverridesRequest::force_only(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.force_only)
  return _internal_force_only(index);
}
inline void ImportConsumerOverridesRequest::set_force_only(int index, ::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.force_only)
}
inline void ImportConsumerOverridesRequest::_internal_add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _impl_.force_only_.Add(value);
}
inline void ImportConsumerOverridesRequest::add_force_only(::google::api::serviceusage::v1beta1::QuotaSafetyCheck value) {
  _internal_add_force_only(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.force_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ImportConsumerOverridesRequest::force_only() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.force_only)
  return _impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ImportConsumerOverridesRequest::_internal_mutable_force_only() {
  return &_impl_.force_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ImportConsumerOverridesRequest::mutable_force_only() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ImportConsumerOverridesRequest.force_only)
  return _internal_mutable_force_only();
}

inline bool ImportConsumerOverridesRequest::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void ImportConsumerOverridesRequest::clear_has_source() {
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline ImportConsumerOverridesRequest::SourceCase ImportConsumerOverridesRequest::source_case() const {
  return ImportConsumerOverridesRequest::SourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ImportConsumerOverridesResponse

// repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
inline int ImportConsumerOverridesResponse::_internal_overrides_size() const {
  return _impl_.overrides_.size();
}
inline int ImportConsumerOverridesResponse::overrides_size() const {
  return _internal_overrides_size();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ImportConsumerOverridesResponse::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse.overrides)
  return _impl_.overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
ImportConsumerOverridesResponse::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse.overrides)
  return &_impl_.overrides_;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& ImportConsumerOverridesResponse::_internal_overrides(int index) const {
  return _impl_.overrides_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& ImportConsumerOverridesResponse::overrides(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse.overrides)
  return _internal_overrides(index);
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ImportConsumerOverridesResponse::_internal_add_overrides() {
  return _impl_.overrides_.Add();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* ImportConsumerOverridesResponse::add_overrides() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _add = _internal_add_overrides();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse.overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
ImportConsumerOverridesResponse::overrides() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse.overrides)
  return _impl_.overrides_;
}

// -------------------------------------------------------------------

// ImportConsumerOverridesMetadata

// -------------------------------------------------------------------

// ImportAdminQuotaPoliciesResponse

// repeated .google.api.serviceusage.v1beta1.AdminQuotaPolicy policies = 1;
inline int ImportAdminQuotaPoliciesResponse::_internal_policies_size() const {
  return _impl_.policies_.size();
}
inline int ImportAdminQuotaPoliciesResponse::policies_size() const {
  return _internal_policies_size();
}
inline ::google::api::serviceusage::v1beta1::AdminQuotaPolicy* ImportAdminQuotaPoliciesResponse::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesResponse.policies)
  return _impl_.policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::AdminQuotaPolicy >*
ImportAdminQuotaPoliciesResponse::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesResponse.policies)
  return &_impl_.policies_;
}
inline const ::google::api::serviceusage::v1beta1::AdminQuotaPolicy& ImportAdminQuotaPoliciesResponse::_internal_policies(int index) const {
  return _impl_.policies_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::AdminQuotaPolicy& ImportAdminQuotaPoliciesResponse::policies(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesResponse.policies)
  return _internal_policies(index);
}
inline ::google::api::serviceusage::v1beta1::AdminQuotaPolicy* ImportAdminQuotaPoliciesResponse::_internal_add_policies() {
  return _impl_.policies_.Add();
}
inline ::google::api::serviceusage::v1beta1::AdminQuotaPolicy* ImportAdminQuotaPoliciesResponse::add_policies() {
  ::google::api::serviceusage::v1beta1::AdminQuotaPolicy* _add = _internal_add_policies();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesResponse.policies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::AdminQuotaPolicy >&
ImportAdminQuotaPoliciesResponse::policies() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ImportAdminQuotaPoliciesResponse.policies)
  return _impl_.policies_;
}

// -------------------------------------------------------------------

// ImportAdminQuotaPoliciesMetadata

// -------------------------------------------------------------------

// CreateAdminQuotaPolicyMetadata

// -------------------------------------------------------------------

// UpdateAdminQuotaPolicyMetadata

// -------------------------------------------------------------------

// DeleteAdminQuotaPolicyMetadata

// -------------------------------------------------------------------

// GenerateServiceIdentityRequest

// string parent = 1;
inline void GenerateServiceIdentityRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& GenerateServiceIdentityRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.GenerateServiceIdentityRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenerateServiceIdentityRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.GenerateServiceIdentityRequest.parent)
}
inline std::string* GenerateServiceIdentityRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.GenerateServiceIdentityRequest.parent)
  return _s;
}
inline const std::string& GenerateServiceIdentityRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void GenerateServiceIdentityRequest::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* GenerateServiceIdentityRequest::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* GenerateServiceIdentityRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.GenerateServiceIdentityRequest.parent)
  return _impl_.parent_.Release();
}
inline void GenerateServiceIdentityRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.GenerateServiceIdentityRequest.parent)
}

// -------------------------------------------------------------------

// GetServiceIdentityResponse

// .google.api.serviceusage.v1beta1.ServiceIdentity identity = 1;
inline bool GetServiceIdentityResponse::_internal_has_identity() const {
  return this != internal_default_instance() && _impl_.identity_ != nullptr;
}
inline bool GetServiceIdentityResponse::has_identity() const {
  return _internal_has_identity();
}
inline const ::google::api::serviceusage::v1beta1::ServiceIdentity& GetServiceIdentityResponse::_internal_identity() const {
  const ::google::api::serviceusage::v1beta1::ServiceIdentity* p = _impl_.identity_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::ServiceIdentity&>(
      ::google::api::serviceusage::v1beta1::_ServiceIdentity_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::ServiceIdentity& GetServiceIdentityResponse::identity() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.GetServiceIdentityResponse.identity)
  return _internal_identity();
}
inline void GetServiceIdentityResponse::unsafe_arena_set_allocated_identity(
    ::google::api::serviceusage::v1beta1::ServiceIdentity* identity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identity_);
  }
  _impl_.identity_ = identity;
  if (identity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.GetServiceIdentityResponse.identity)
}
inline ::google::api::serviceusage::v1beta1::ServiceIdentity* GetServiceIdentityResponse::release_identity() {
  
  ::google::api::serviceusage::v1beta1::ServiceIdentity* temp = _impl_.identity_;
  _impl_.identity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::ServiceIdentity* GetServiceIdentityResponse::unsafe_arena_release_identity() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.GetServiceIdentityResponse.identity)
  
  ::google::api::serviceusage::v1beta1::ServiceIdentity* temp = _impl_.identity_;
  _impl_.identity_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::ServiceIdentity* GetServiceIdentityResponse::_internal_mutable_identity() {
  
  if (_impl_.identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::ServiceIdentity>(GetArenaForAllocation());
    _impl_.identity_ = p;
  }
  return _impl_.identity_;
}
inline ::google::api::serviceusage::v1beta1::ServiceIdentity* GetServiceIdentityResponse::mutable_identity() {
  ::google::api::serviceusage::v1beta1::ServiceIdentity* _msg = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.GetServiceIdentityResponse.identity)
  return _msg;
}
inline void GetServiceIdentityResponse::set_allocated_identity(::google::api::serviceusage::v1beta1::ServiceIdentity* identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identity_);
  }
  if (identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity));
    if (message_arena != submessage_arena) {
      identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.GetServiceIdentityResponse.identity)
}

// .google.api.serviceusage.v1beta1.GetServiceIdentityResponse.IdentityState state = 2;
inline void GetServiceIdentityResponse::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState GetServiceIdentityResponse::_internal_state() const {
  return static_cast< ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState >(_impl_.state_);
}
inline ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState GetServiceIdentityResponse::state() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.GetServiceIdentityResponse.state)
  return _internal_state();
}
inline void GetServiceIdentityResponse::_internal_set_state(::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState value) {
  
  _impl_.state_ = value;
}
inline void GetServiceIdentityResponse::set_state(::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.GetServiceIdentityResponse.state)
}

// -------------------------------------------------------------------

// GetServiceIdentityMetadata

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace serviceusage
}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState>() {
  return ::google::api::serviceusage::v1beta1::GetServiceIdentityResponse_IdentityState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fserviceusage_2fv1beta1_2fserviceusage_2eproto

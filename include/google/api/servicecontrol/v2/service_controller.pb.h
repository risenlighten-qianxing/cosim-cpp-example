// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v2/service_controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/rpc/context/attribute_context.pb.h"
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v2 {
class CheckRequest;
struct CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class CheckResponse;
struct CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
class CheckResponse_HeadersEntry_DoNotUse;
struct CheckResponse_HeadersEntry_DoNotUseDefaultTypeInternal;
extern CheckResponse_HeadersEntry_DoNotUseDefaultTypeInternal _CheckResponse_HeadersEntry_DoNotUse_default_instance_;
class ReportRequest;
struct ReportRequestDefaultTypeInternal;
extern ReportRequestDefaultTypeInternal _ReportRequest_default_instance_;
class ReportResponse;
struct ReportResponseDefaultTypeInternal;
extern ReportResponseDefaultTypeInternal _ReportResponse_default_instance_;
class ResourceInfo;
struct ResourceInfoDefaultTypeInternal;
extern ResourceInfoDefaultTypeInternal _ResourceInfo_default_instance_;
}  // namespace v2
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::servicecontrol::v2::CheckRequest* Arena::CreateMaybeMessage<::google::api::servicecontrol::v2::CheckRequest>(Arena*);
template<> ::google::api::servicecontrol::v2::CheckResponse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v2::CheckResponse>(Arena*);
template<> ::google::api::servicecontrol::v2::CheckResponse_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v2::CheckResponse_HeadersEntry_DoNotUse>(Arena*);
template<> ::google::api::servicecontrol::v2::ReportRequest* Arena::CreateMaybeMessage<::google::api::servicecontrol::v2::ReportRequest>(Arena*);
template<> ::google::api::servicecontrol::v2::ReportResponse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v2::ReportResponse>(Arena*);
template<> ::google::api::servicecontrol::v2::ResourceInfo* Arena::CreateMaybeMessage<::google::api::servicecontrol::v2::ResourceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace servicecontrol {
namespace v2 {

// ===================================================================

class CheckRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v2.CheckRequest) */ {
 public:
  inline CheckRequest() : CheckRequest(nullptr) {}
  ~CheckRequest() override;
  explicit PROTOBUF_CONSTEXPR CheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRequest(const CheckRequest& from);
  CheckRequest(CheckRequest&& from) noexcept
    : CheckRequest() {
    *this = ::std::move(from);
  }

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRequest& operator=(CheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckRequest& a, CheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckRequest& from) {
    CheckRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v2.CheckRequest";
  }
  protected:
  explicit CheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 4,
    kServiceNameFieldNumber = 1,
    kServiceConfigIdFieldNumber = 2,
    kFlagsFieldNumber = 5,
    kAttributesFieldNumber = 3,
  };
  // repeated .google.api.servicecontrol.v2.ResourceInfo resources = 4;
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  ::google::api::servicecontrol::v2::ResourceInfo* mutable_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v2::ResourceInfo >*
      mutable_resources();
  private:
  const ::google::api::servicecontrol::v2::ResourceInfo& _internal_resources(int index) const;
  ::google::api::servicecontrol::v2::ResourceInfo* _internal_add_resources();
  public:
  const ::google::api::servicecontrol::v2::ResourceInfo& resources(int index) const;
  ::google::api::servicecontrol::v2::ResourceInfo* add_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v2::ResourceInfo >&
      resources() const;

  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string service_config_id = 2;
  void clear_service_config_id();
  const std::string& service_config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_config_id();
  PROTOBUF_NODISCARD std::string* release_service_config_id();
  void set_allocated_service_config_id(std::string* service_config_id);
  private:
  const std::string& _internal_service_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_config_id(const std::string& value);
  std::string* _internal_mutable_service_config_id();
  public:

  // string flags = 5;
  void clear_flags();
  const std::string& flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flags();
  PROTOBUF_NODISCARD std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .google.rpc.context.AttributeContext attributes = 3;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::google::rpc::context::AttributeContext& attributes() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext* release_attributes();
  ::google::rpc::context::AttributeContext* mutable_attributes();
  void set_allocated_attributes(::google::rpc::context::AttributeContext* attributes);
  private:
  const ::google::rpc::context::AttributeContext& _internal_attributes() const;
  ::google::rpc::context::AttributeContext* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::google::rpc::context::AttributeContext* attributes);
  ::google::rpc::context::AttributeContext* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v2.CheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v2::ResourceInfo > resources_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_config_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
    ::google::rpc::context::AttributeContext* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class ResourceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v2.ResourceInfo) */ {
 public:
  inline ResourceInfo() : ResourceInfo(nullptr) {}
  ~ResourceInfo() override;
  explicit PROTOBUF_CONSTEXPR ResourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceInfo(const ResourceInfo& from);
  ResourceInfo(ResourceInfo&& from) noexcept
    : ResourceInfo() {
    *this = ::std::move(from);
  }

  inline ResourceInfo& operator=(const ResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceInfo& operator=(ResourceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceInfo* internal_default_instance() {
    return reinterpret_cast<const ResourceInfo*>(
               &_ResourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceInfo& a, ResourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceInfo& from) {
    ResourceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v2.ResourceInfo";
  }
  protected:
  explicit ResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPermissionFieldNumber = 3,
    kContainerFieldNumber = 4,
    kLocationFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string permission = 3;
  void clear_permission();
  const std::string& permission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permission();
  PROTOBUF_NODISCARD std::string* release_permission();
  void set_allocated_permission(std::string* permission);
  private:
  const std::string& _internal_permission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permission(const std::string& value);
  std::string* _internal_mutable_permission();
  public:

  // string container = 4;
  void clear_container();
  const std::string& container() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container();
  PROTOBUF_NODISCARD std::string* release_container();
  void set_allocated_container(std::string* container);
  private:
  const std::string& _internal_container() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container(const std::string& value);
  std::string* _internal_mutable_container();
  public:

  // string location = 5;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v2.ResourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class CheckResponse_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CheckResponse_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CheckResponse_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CheckResponse_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CheckResponse_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CheckResponse_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CheckResponse_HeadersEntry_DoNotUse& other);
  static const CheckResponse_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckResponse_HeadersEntry_DoNotUse*>(&_CheckResponse_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v2.CheckResponse.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v2.CheckResponse.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto;
};

// -------------------------------------------------------------------

class CheckResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v2.CheckResponse) */ {
 public:
  inline CheckResponse() : CheckResponse(nullptr) {}
  ~CheckResponse() override;
  explicit PROTOBUF_CONSTEXPR CheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckResponse(const CheckResponse& from);
  CheckResponse(CheckResponse&& from) noexcept
    : CheckResponse() {
    *this = ::std::move(from);
  }

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckResponse& operator=(CheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
               &_CheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CheckResponse& a, CheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckResponse& from) {
    CheckResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v2.CheckResponse";
  }
  protected:
  explicit CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, string> headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // .google.rpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v2.CheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CheckResponse_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::google::rpc::Status* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class ReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v2.ReportRequest) */ {
 public:
  inline ReportRequest() : ReportRequest(nullptr) {}
  ~ReportRequest() override;
  explicit PROTOBUF_CONSTEXPR ReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportRequest(const ReportRequest& from);
  ReportRequest(ReportRequest&& from) noexcept
    : ReportRequest() {
    *this = ::std::move(from);
  }

  inline ReportRequest& operator=(const ReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportRequest& operator=(ReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportRequest* internal_default_instance() {
    return reinterpret_cast<const ReportRequest*>(
               &_ReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReportRequest& a, ReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportRequest& from) {
    ReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v2.ReportRequest";
  }
  protected:
  explicit ReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 3,
    kServiceNameFieldNumber = 1,
    kServiceConfigIdFieldNumber = 2,
  };
  // repeated .google.rpc.context.AttributeContext operations = 3;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::google::rpc::context::AttributeContext* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::context::AttributeContext >*
      mutable_operations();
  private:
  const ::google::rpc::context::AttributeContext& _internal_operations(int index) const;
  ::google::rpc::context::AttributeContext* _internal_add_operations();
  public:
  const ::google::rpc::context::AttributeContext& operations(int index) const;
  ::google::rpc::context::AttributeContext* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::context::AttributeContext >&
      operations() const;

  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string service_config_id = 2;
  void clear_service_config_id();
  const std::string& service_config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_config_id();
  PROTOBUF_NODISCARD std::string* release_service_config_id();
  void set_allocated_service_config_id(std::string* service_config_id);
  private:
  const std::string& _internal_service_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_config_id(const std::string& value);
  std::string* _internal_mutable_service_config_id();
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v2.ReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::context::AttributeContext > operations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_config_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class ReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v2.ReportResponse) */ {
 public:
  inline ReportResponse() : ReportResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportResponse(const ReportResponse& from);
  ReportResponse(ReportResponse&& from) noexcept
    : ReportResponse() {
    *this = ::std::move(from);
  }

  inline ReportResponse& operator=(const ReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportResponse& operator=(ReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportResponse* internal_default_instance() {
    return reinterpret_cast<const ReportResponse*>(
               &_ReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReportResponse& a, ReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReportResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReportResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v2.ReportResponse";
  }
  protected:
  explicit ReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v2.ReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckRequest

// string service_name = 1;
inline void CheckRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& CheckRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.CheckRequest.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRequest::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.CheckRequest.service_name)
}
inline std::string* CheckRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.CheckRequest.service_name)
  return _s;
}
inline const std::string& CheckRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void CheckRequest::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRequest::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.CheckRequest.service_name)
  return _impl_.service_name_.Release();
}
inline void CheckRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.CheckRequest.service_name)
}

// string service_config_id = 2;
inline void CheckRequest::clear_service_config_id() {
  _impl_.service_config_id_.ClearToEmpty();
}
inline const std::string& CheckRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.CheckRequest.service_config_id)
  return _internal_service_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRequest::set_service_config_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_config_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.CheckRequest.service_config_id)
}
inline std::string* CheckRequest::mutable_service_config_id() {
  std::string* _s = _internal_mutable_service_config_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.CheckRequest.service_config_id)
  return _s;
}
inline const std::string& CheckRequest::_internal_service_config_id() const {
  return _impl_.service_config_id_.Get();
}
inline void CheckRequest::_internal_set_service_config_id(const std::string& value) {
  
  _impl_.service_config_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRequest::_internal_mutable_service_config_id() {
  
  return _impl_.service_config_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.CheckRequest.service_config_id)
  return _impl_.service_config_id_.Release();
}
inline void CheckRequest::set_allocated_service_config_id(std::string* service_config_id) {
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  _impl_.service_config_id_.SetAllocated(service_config_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_config_id_.IsDefault()) {
    _impl_.service_config_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.CheckRequest.service_config_id)
}

// .google.rpc.context.AttributeContext attributes = 3;
inline bool CheckRequest::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool CheckRequest::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::google::rpc::context::AttributeContext& CheckRequest::_internal_attributes() const {
  const ::google::rpc::context::AttributeContext* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext&>(
      ::google::rpc::context::_AttributeContext_default_instance_);
}
inline const ::google::rpc::context::AttributeContext& CheckRequest::attributes() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.CheckRequest.attributes)
  return _internal_attributes();
}
inline void CheckRequest::unsafe_arena_set_allocated_attributes(
    ::google::rpc::context::AttributeContext* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v2.CheckRequest.attributes)
}
inline ::google::rpc::context::AttributeContext* CheckRequest::release_attributes() {
  
  ::google::rpc::context::AttributeContext* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::context::AttributeContext* CheckRequest::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.CheckRequest.attributes)
  
  ::google::rpc::context::AttributeContext* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext* CheckRequest::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::google::rpc::context::AttributeContext* CheckRequest::mutable_attributes() {
  ::google::rpc::context::AttributeContext* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.CheckRequest.attributes)
  return _msg;
}
inline void CheckRequest::set_allocated_attributes(::google::rpc::context::AttributeContext* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.CheckRequest.attributes)
}

// repeated .google.api.servicecontrol.v2.ResourceInfo resources = 4;
inline int CheckRequest::_internal_resources_size() const {
  return _impl_.resources_.size();
}
inline int CheckRequest::resources_size() const {
  return _internal_resources_size();
}
inline void CheckRequest::clear_resources() {
  _impl_.resources_.Clear();
}
inline ::google::api::servicecontrol::v2::ResourceInfo* CheckRequest::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.CheckRequest.resources)
  return _impl_.resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v2::ResourceInfo >*
CheckRequest::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v2.CheckRequest.resources)
  return &_impl_.resources_;
}
inline const ::google::api::servicecontrol::v2::ResourceInfo& CheckRequest::_internal_resources(int index) const {
  return _impl_.resources_.Get(index);
}
inline const ::google::api::servicecontrol::v2::ResourceInfo& CheckRequest::resources(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.CheckRequest.resources)
  return _internal_resources(index);
}
inline ::google::api::servicecontrol::v2::ResourceInfo* CheckRequest::_internal_add_resources() {
  return _impl_.resources_.Add();
}
inline ::google::api::servicecontrol::v2::ResourceInfo* CheckRequest::add_resources() {
  ::google::api::servicecontrol::v2::ResourceInfo* _add = _internal_add_resources();
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v2.CheckRequest.resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v2::ResourceInfo >&
CheckRequest::resources() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v2.CheckRequest.resources)
  return _impl_.resources_;
}

// string flags = 5;
inline void CheckRequest::clear_flags() {
  _impl_.flags_.ClearToEmpty();
}
inline const std::string& CheckRequest::flags() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.CheckRequest.flags)
  return _internal_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRequest::set_flags(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flags_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.CheckRequest.flags)
}
inline std::string* CheckRequest::mutable_flags() {
  std::string* _s = _internal_mutable_flags();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.CheckRequest.flags)
  return _s;
}
inline const std::string& CheckRequest::_internal_flags() const {
  return _impl_.flags_.Get();
}
inline void CheckRequest::_internal_set_flags(const std::string& value) {
  
  _impl_.flags_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRequest::_internal_mutable_flags() {
  
  return _impl_.flags_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRequest::release_flags() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.CheckRequest.flags)
  return _impl_.flags_.Release();
}
inline void CheckRequest::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  _impl_.flags_.SetAllocated(flags, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flags_.IsDefault()) {
    _impl_.flags_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.CheckRequest.flags)
}

// -------------------------------------------------------------------

// ResourceInfo

// string name = 1;
inline void ResourceInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ResourceInfo::name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.ResourceInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.ResourceInfo.name)
}
inline std::string* ResourceInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.ResourceInfo.name)
  return _s;
}
inline const std::string& ResourceInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ResourceInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.ResourceInfo.name)
  return _impl_.name_.Release();
}
inline void ResourceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.ResourceInfo.name)
}

// string type = 2;
inline void ResourceInfo::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ResourceInfo::type() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.ResourceInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.ResourceInfo.type)
}
inline std::string* ResourceInfo::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.ResourceInfo.type)
  return _s;
}
inline const std::string& ResourceInfo::_internal_type() const {
  return _impl_.type_.Get();
}
inline void ResourceInfo::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_type() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.ResourceInfo.type)
  return _impl_.type_.Release();
}
inline void ResourceInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.ResourceInfo.type)
}

// string permission = 3;
inline void ResourceInfo::clear_permission() {
  _impl_.permission_.ClearToEmpty();
}
inline const std::string& ResourceInfo::permission() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.ResourceInfo.permission)
  return _internal_permission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_permission(ArgT0&& arg0, ArgT... args) {
 
 _impl_.permission_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.ResourceInfo.permission)
}
inline std::string* ResourceInfo::mutable_permission() {
  std::string* _s = _internal_mutable_permission();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.ResourceInfo.permission)
  return _s;
}
inline const std::string& ResourceInfo::_internal_permission() const {
  return _impl_.permission_.Get();
}
inline void ResourceInfo::_internal_set_permission(const std::string& value) {
  
  _impl_.permission_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_permission() {
  
  return _impl_.permission_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_permission() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.ResourceInfo.permission)
  return _impl_.permission_.Release();
}
inline void ResourceInfo::set_allocated_permission(std::string* permission) {
  if (permission != nullptr) {
    
  } else {
    
  }
  _impl_.permission_.SetAllocated(permission, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.permission_.IsDefault()) {
    _impl_.permission_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.ResourceInfo.permission)
}

// string container = 4;
inline void ResourceInfo::clear_container() {
  _impl_.container_.ClearToEmpty();
}
inline const std::string& ResourceInfo::container() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.ResourceInfo.container)
  return _internal_container();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_container(ArgT0&& arg0, ArgT... args) {
 
 _impl_.container_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.ResourceInfo.container)
}
inline std::string* ResourceInfo::mutable_container() {
  std::string* _s = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.ResourceInfo.container)
  return _s;
}
inline const std::string& ResourceInfo::_internal_container() const {
  return _impl_.container_.Get();
}
inline void ResourceInfo::_internal_set_container(const std::string& value) {
  
  _impl_.container_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_container() {
  
  return _impl_.container_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_container() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.ResourceInfo.container)
  return _impl_.container_.Release();
}
inline void ResourceInfo::set_allocated_container(std::string* container) {
  if (container != nullptr) {
    
  } else {
    
  }
  _impl_.container_.SetAllocated(container, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.container_.IsDefault()) {
    _impl_.container_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.ResourceInfo.container)
}

// string location = 5;
inline void ResourceInfo::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& ResourceInfo::location() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.ResourceInfo.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceInfo::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.ResourceInfo.location)
}
inline std::string* ResourceInfo::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.ResourceInfo.location)
  return _s;
}
inline const std::string& ResourceInfo::_internal_location() const {
  return _impl_.location_.Get();
}
inline void ResourceInfo::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceInfo::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceInfo::release_location() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.ResourceInfo.location)
  return _impl_.location_.Release();
}
inline void ResourceInfo::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.ResourceInfo.location)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CheckResponse

// .google.rpc.Status status = 1;
inline bool CheckResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CheckResponse::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& CheckResponse::_internal_status() const {
  const ::google::rpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& CheckResponse::status() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.CheckResponse.status)
  return _internal_status();
}
inline void CheckResponse::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v2.CheckResponse.status)
}
inline ::google::rpc::Status* CheckResponse::release_status() {
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* CheckResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.CheckResponse.status)
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* CheckResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::google::rpc::Status* CheckResponse::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.CheckResponse.status)
  return _msg;
}
inline void CheckResponse::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.CheckResponse.status)
}

// map<string, string> headers = 2;
inline int CheckResponse::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int CheckResponse::headers_size() const {
  return _internal_headers_size();
}
inline void CheckResponse::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CheckResponse::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CheckResponse::headers() const {
  // @@protoc_insertion_point(field_map:google.api.servicecontrol.v2.CheckResponse.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CheckResponse::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CheckResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:google.api.servicecontrol.v2.CheckResponse.headers)
  return _internal_mutable_headers();
}

// -------------------------------------------------------------------

// ReportRequest

// string service_name = 1;
inline void ReportRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& ReportRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.ReportRequest.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportRequest::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.ReportRequest.service_name)
}
inline std::string* ReportRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.ReportRequest.service_name)
  return _s;
}
inline const std::string& ReportRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void ReportRequest::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportRequest::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.ReportRequest.service_name)
  return _impl_.service_name_.Release();
}
inline void ReportRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.ReportRequest.service_name)
}

// string service_config_id = 2;
inline void ReportRequest::clear_service_config_id() {
  _impl_.service_config_id_.ClearToEmpty();
}
inline const std::string& ReportRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.ReportRequest.service_config_id)
  return _internal_service_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportRequest::set_service_config_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_config_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v2.ReportRequest.service_config_id)
}
inline std::string* ReportRequest::mutable_service_config_id() {
  std::string* _s = _internal_mutable_service_config_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.ReportRequest.service_config_id)
  return _s;
}
inline const std::string& ReportRequest::_internal_service_config_id() const {
  return _impl_.service_config_id_.Get();
}
inline void ReportRequest::_internal_set_service_config_id(const std::string& value) {
  
  _impl_.service_config_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportRequest::_internal_mutable_service_config_id() {
  
  return _impl_.service_config_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v2.ReportRequest.service_config_id)
  return _impl_.service_config_id_.Release();
}
inline void ReportRequest::set_allocated_service_config_id(std::string* service_config_id) {
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  _impl_.service_config_id_.SetAllocated(service_config_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_config_id_.IsDefault()) {
    _impl_.service_config_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v2.ReportRequest.service_config_id)
}

// repeated .google.rpc.context.AttributeContext operations = 3;
inline int ReportRequest::_internal_operations_size() const {
  return _impl_.operations_.size();
}
inline int ReportRequest::operations_size() const {
  return _internal_operations_size();
}
inline ::google::rpc::context::AttributeContext* ReportRequest::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v2.ReportRequest.operations)
  return _impl_.operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::context::AttributeContext >*
ReportRequest::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v2.ReportRequest.operations)
  return &_impl_.operations_;
}
inline const ::google::rpc::context::AttributeContext& ReportRequest::_internal_operations(int index) const {
  return _impl_.operations_.Get(index);
}
inline const ::google::rpc::context::AttributeContext& ReportRequest::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v2.ReportRequest.operations)
  return _internal_operations(index);
}
inline ::google::rpc::context::AttributeContext* ReportRequest::_internal_add_operations() {
  return _impl_.operations_.Add();
}
inline ::google::rpc::context::AttributeContext* ReportRequest::add_operations() {
  ::google::rpc::context::AttributeContext* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v2.ReportRequest.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::rpc::context::AttributeContext >&
ReportRequest::operations() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v2.ReportRequest.operations)
  return _impl_.operations_;
}

// -------------------------------------------------------------------

// ReportResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv2_2fservice_5fcontroller_2eproto

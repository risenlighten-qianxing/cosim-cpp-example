// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/check_error.proto

#include "google/api/servicecontrol/v1/check_error.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
PROTOBUF_CONSTEXPR CheckError::CheckError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckErrorDefaultTypeInternal() {}
  union {
    CheckError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckErrorDefaultTypeInternal _CheckError_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckError, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckError, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckError, _impl_.detail_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckError, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::api::servicecontrol::v1::CheckError)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::api::servicecontrol::v1::_CheckError_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.google/api/servicecontrol/v1/check_err"
  "or.proto\022\034google.api.servicecontrol.v1\032\027"
  "google/rpc/status.proto\"\256\005\n\nCheckError\022;"
  "\n\004code\030\001 \001(\0162-.google.api.servicecontrol"
  ".v1.CheckError.Code\022\017\n\007subject\030\004 \001(\t\022\016\n\006"
  "detail\030\002 \001(\t\022\"\n\006status\030\003 \001(\0132\022.google.rp"
  "c.Status\"\235\004\n\004Code\022\032\n\026ERROR_CODE_UNSPECIF"
  "IED\020\000\022\r\n\tNOT_FOUND\020\005\022\025\n\021PERMISSION_DENIE"
  "D\020\007\022\026\n\022RESOURCE_EXHAUSTED\020\010\022\031\n\025SERVICE_N"
  "OT_ACTIVATED\020h\022\024\n\020BILLING_DISABLED\020k\022\023\n\017"
  "PROJECT_DELETED\020l\022\023\n\017PROJECT_INVALID\020r\022\024"
  "\n\020CONSUMER_INVALID\020}\022\026\n\022IP_ADDRESS_BLOCK"
  "ED\020m\022\023\n\017REFERER_BLOCKED\020n\022\026\n\022CLIENT_APP_"
  "BLOCKED\020o\022\026\n\022API_TARGET_BLOCKED\020z\022\023\n\017API"
  "_KEY_INVALID\020i\022\023\n\017API_KEY_EXPIRED\020p\022\025\n\021A"
  "PI_KEY_NOT_FOUND\020q\022\026\n\022INVALID_CREDENTIAL"
  "\020{\022!\n\034NAMESPACE_LOOKUP_UNAVAILABLE\020\254\002\022\037\n"
  "\032SERVICE_STATUS_UNAVAILABLE\020\255\002\022\037\n\032BILLIN"
  "G_STATUS_UNAVAILABLE\020\256\002\022/\n*CLOUD_RESOURC"
  "E_MANAGER_BACKEND_UNAVAILABLE\020\261\002B\352\001\n com"
  ".google.api.servicecontrol.v1B\017CheckErro"
  "rProtoP\001ZJgoogle.golang.org/genproto/goo"
  "gleapis/api/servicecontrol/v1;servicecon"
  "trol\370\001\001\252\002\036Google.Cloud.ServiceControl.V1"
  "\312\002\036Google\\Cloud\\ServiceControl\\V1\352\002!Goog"
  "le::Cloud::ServiceControl::V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto_deps[1] = {
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto = {
    false, false, 1037, descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto,
    "google/api/servicecontrol/v1/check_error.proto",
    &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto_once, descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto::offsets,
    file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto, file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto,
    file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto);
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckError_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto[0];
}
bool CheckError_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 7:
    case 8:
    case 104:
    case 105:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 122:
    case 123:
    case 125:
    case 300:
    case 301:
    case 302:
    case 305:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CheckError_Code CheckError::ERROR_CODE_UNSPECIFIED;
constexpr CheckError_Code CheckError::NOT_FOUND;
constexpr CheckError_Code CheckError::PERMISSION_DENIED;
constexpr CheckError_Code CheckError::RESOURCE_EXHAUSTED;
constexpr CheckError_Code CheckError::SERVICE_NOT_ACTIVATED;
constexpr CheckError_Code CheckError::BILLING_DISABLED;
constexpr CheckError_Code CheckError::PROJECT_DELETED;
constexpr CheckError_Code CheckError::PROJECT_INVALID;
constexpr CheckError_Code CheckError::CONSUMER_INVALID;
constexpr CheckError_Code CheckError::IP_ADDRESS_BLOCKED;
constexpr CheckError_Code CheckError::REFERER_BLOCKED;
constexpr CheckError_Code CheckError::CLIENT_APP_BLOCKED;
constexpr CheckError_Code CheckError::API_TARGET_BLOCKED;
constexpr CheckError_Code CheckError::API_KEY_INVALID;
constexpr CheckError_Code CheckError::API_KEY_EXPIRED;
constexpr CheckError_Code CheckError::API_KEY_NOT_FOUND;
constexpr CheckError_Code CheckError::INVALID_CREDENTIAL;
constexpr CheckError_Code CheckError::NAMESPACE_LOOKUP_UNAVAILABLE;
constexpr CheckError_Code CheckError::SERVICE_STATUS_UNAVAILABLE;
constexpr CheckError_Code CheckError::BILLING_STATUS_UNAVAILABLE;
constexpr CheckError_Code CheckError::CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE;
constexpr CheckError_Code CheckError::Code_MIN;
constexpr CheckError_Code CheckError::Code_MAX;
constexpr int CheckError::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CheckError::_Internal {
 public:
  static const ::google::rpc::Status& status(const CheckError* msg);
};

const ::google::rpc::Status&
CheckError::_Internal::status(const CheckError* msg) {
  return *msg->_impl_.status_;
}
void CheckError::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
CheckError::CheckError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.CheckError)
}
CheckError::CheckError(const CheckError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail().empty()) {
    _this->_impl_.detail_.Set(from._internal_detail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::google::rpc::Status(*from._impl_.status_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.CheckError)
}

inline void CheckError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckError::~CheckError() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.CheckError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detail_.Destroy();
  _impl_.subject_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void CheckError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckError::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.CheckError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detail_.ClearToEmpty();
  _impl_.subject_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.servicecontrol.v1.CheckError.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::google::api::servicecontrol::v1::CheckError_Code>(val));
        } else
          goto handle_unusual;
        continue;
      // string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.CheckError.detail"));
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.CheckError.subject"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.CheckError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.servicecontrol.v1.CheckError.Code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string detail = 2;
  if (!this->_internal_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.CheckError.detail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail(), target);
  }

  // .google.rpc.Status status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string subject = 4;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.CheckError.subject");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_subject(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.CheckError)
  return target;
}

size_t CheckError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.CheckError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 2;
  if (!this->_internal_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // string subject = 4;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .google.rpc.Status status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .google.api.servicecontrol.v1.CheckError.Code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckError::GetClassData() const { return &_class_data_; }


void CheckError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckError*>(&to_msg);
  auto& from = static_cast<const CheckError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.CheckError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_detail().empty()) {
    _this->_internal_set_detail(from._internal_detail());
  }
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::google::rpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckError::CopyFrom(const CheckError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.CheckError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckError::IsInitialized() const {
  return true;
}

void CheckError::InternalSwap(CheckError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detail_, lhs_arena,
      &other->_impl_.detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckError, _impl_.code_)
      + sizeof(CheckError::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(CheckError, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto_getter, &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto_once,
      file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::CheckError*
Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::CheckError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::CheckError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

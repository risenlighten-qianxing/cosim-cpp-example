// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/check_error.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class CheckError;
struct CheckErrorDefaultTypeInternal;
extern CheckErrorDefaultTypeInternal _CheckError_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::servicecontrol::v1::CheckError* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

enum CheckError_Code : int {
  CheckError_Code_ERROR_CODE_UNSPECIFIED = 0,
  CheckError_Code_NOT_FOUND = 5,
  CheckError_Code_PERMISSION_DENIED = 7,
  CheckError_Code_RESOURCE_EXHAUSTED = 8,
  CheckError_Code_SERVICE_NOT_ACTIVATED = 104,
  CheckError_Code_BILLING_DISABLED = 107,
  CheckError_Code_PROJECT_DELETED = 108,
  CheckError_Code_PROJECT_INVALID = 114,
  CheckError_Code_CONSUMER_INVALID = 125,
  CheckError_Code_IP_ADDRESS_BLOCKED = 109,
  CheckError_Code_REFERER_BLOCKED = 110,
  CheckError_Code_CLIENT_APP_BLOCKED = 111,
  CheckError_Code_API_TARGET_BLOCKED = 122,
  CheckError_Code_API_KEY_INVALID = 105,
  CheckError_Code_API_KEY_EXPIRED = 112,
  CheckError_Code_API_KEY_NOT_FOUND = 113,
  CheckError_Code_INVALID_CREDENTIAL = 123,
  CheckError_Code_NAMESPACE_LOOKUP_UNAVAILABLE = 300,
  CheckError_Code_SERVICE_STATUS_UNAVAILABLE = 301,
  CheckError_Code_BILLING_STATUS_UNAVAILABLE = 302,
  CheckError_Code_CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE = 305,
  CheckError_Code_CheckError_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CheckError_Code_CheckError_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CheckError_Code_IsValid(int value);
constexpr CheckError_Code CheckError_Code_Code_MIN = CheckError_Code_ERROR_CODE_UNSPECIFIED;
constexpr CheckError_Code CheckError_Code_Code_MAX = CheckError_Code_CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE;
constexpr int CheckError_Code_Code_ARRAYSIZE = CheckError_Code_Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckError_Code_descriptor();
template<typename T>
inline const std::string& CheckError_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CheckError_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CheckError_Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CheckError_Code_descriptor(), enum_t_value);
}
inline bool CheckError_Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CheckError_Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CheckError_Code>(
    CheckError_Code_descriptor(), name, value);
}
// ===================================================================

class CheckError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckError) */ {
 public:
  inline CheckError() : CheckError(nullptr) {}
  ~CheckError() override;
  explicit PROTOBUF_CONSTEXPR CheckError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckError(const CheckError& from);
  CheckError(CheckError&& from) noexcept
    : CheckError() {
    *this = ::std::move(from);
  }

  inline CheckError& operator=(const CheckError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckError& operator=(CheckError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckError* internal_default_instance() {
    return reinterpret_cast<const CheckError*>(
               &_CheckError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckError& a, CheckError& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckError& from) {
    CheckError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.CheckError";
  }
  protected:
  explicit CheckError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CheckError_Code Code;
  static constexpr Code ERROR_CODE_UNSPECIFIED =
    CheckError_Code_ERROR_CODE_UNSPECIFIED;
  static constexpr Code NOT_FOUND =
    CheckError_Code_NOT_FOUND;
  static constexpr Code PERMISSION_DENIED =
    CheckError_Code_PERMISSION_DENIED;
  static constexpr Code RESOURCE_EXHAUSTED =
    CheckError_Code_RESOURCE_EXHAUSTED;
  static constexpr Code SERVICE_NOT_ACTIVATED =
    CheckError_Code_SERVICE_NOT_ACTIVATED;
  static constexpr Code BILLING_DISABLED =
    CheckError_Code_BILLING_DISABLED;
  static constexpr Code PROJECT_DELETED =
    CheckError_Code_PROJECT_DELETED;
  static constexpr Code PROJECT_INVALID =
    CheckError_Code_PROJECT_INVALID;
  static constexpr Code CONSUMER_INVALID =
    CheckError_Code_CONSUMER_INVALID;
  static constexpr Code IP_ADDRESS_BLOCKED =
    CheckError_Code_IP_ADDRESS_BLOCKED;
  static constexpr Code REFERER_BLOCKED =
    CheckError_Code_REFERER_BLOCKED;
  static constexpr Code CLIENT_APP_BLOCKED =
    CheckError_Code_CLIENT_APP_BLOCKED;
  static constexpr Code API_TARGET_BLOCKED =
    CheckError_Code_API_TARGET_BLOCKED;
  static constexpr Code API_KEY_INVALID =
    CheckError_Code_API_KEY_INVALID;
  static constexpr Code API_KEY_EXPIRED =
    CheckError_Code_API_KEY_EXPIRED;
  static constexpr Code API_KEY_NOT_FOUND =
    CheckError_Code_API_KEY_NOT_FOUND;
  static constexpr Code INVALID_CREDENTIAL =
    CheckError_Code_INVALID_CREDENTIAL;
  static constexpr Code NAMESPACE_LOOKUP_UNAVAILABLE =
    CheckError_Code_NAMESPACE_LOOKUP_UNAVAILABLE;
  static constexpr Code SERVICE_STATUS_UNAVAILABLE =
    CheckError_Code_SERVICE_STATUS_UNAVAILABLE;
  static constexpr Code BILLING_STATUS_UNAVAILABLE =
    CheckError_Code_BILLING_STATUS_UNAVAILABLE;
  static constexpr Code CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE =
    CheckError_Code_CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE;
  static inline bool Code_IsValid(int value) {
    return CheckError_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    CheckError_Code_Code_MIN;
  static constexpr Code Code_MAX =
    CheckError_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    CheckError_Code_Code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Code_descriptor() {
    return CheckError_Code_descriptor();
  }
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return CheckError_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Code* value) {
    return CheckError_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 2,
    kSubjectFieldNumber = 4,
    kStatusFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string detail = 2;
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // string subject = 4;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // .google.rpc.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // .google.api.servicecontrol.v1.CheckError.Code code = 1;
  void clear_code();
  ::google::api::servicecontrol::v1::CheckError_Code code() const;
  void set_code(::google::api::servicecontrol::v1::CheckError_Code value);
  private:
  ::google::api::servicecontrol::v1::CheckError_Code _internal_code() const;
  void _internal_set_code(::google::api::servicecontrol::v1::CheckError_Code value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::google::rpc::Status* status_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckError

// .google.api.servicecontrol.v1.CheckError.Code code = 1;
inline void CheckError::clear_code() {
  _impl_.code_ = 0;
}
inline ::google::api::servicecontrol::v1::CheckError_Code CheckError::_internal_code() const {
  return static_cast< ::google::api::servicecontrol::v1::CheckError_Code >(_impl_.code_);
}
inline ::google::api::servicecontrol::v1::CheckError_Code CheckError::code() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckError.code)
  return _internal_code();
}
inline void CheckError::_internal_set_code(::google::api::servicecontrol::v1::CheckError_Code value) {
  
  _impl_.code_ = value;
}
inline void CheckError::set_code(::google::api::servicecontrol::v1::CheckError_Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckError.code)
}

// string subject = 4;
inline void CheckError::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& CheckError::subject() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckError.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckError::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckError.subject)
}
inline std::string* CheckError::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckError.subject)
  return _s;
}
inline const std::string& CheckError::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void CheckError::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckError::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckError::release_subject() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckError.subject)
  return _impl_.subject_.Release();
}
inline void CheckError::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckError.subject)
}

// string detail = 2;
inline void CheckError::clear_detail() {
  _impl_.detail_.ClearToEmpty();
}
inline const std::string& CheckError::detail() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckError.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckError::set_detail(ArgT0&& arg0, ArgT... args) {
 
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckError.detail)
}
inline std::string* CheckError::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckError.detail)
  return _s;
}
inline const std::string& CheckError::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void CheckError::_internal_set_detail(const std::string& value) {
  
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckError::_internal_mutable_detail() {
  
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckError::release_detail() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckError.detail)
  return _impl_.detail_.Release();
}
inline void CheckError::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckError.detail)
}

// .google.rpc.Status status = 3;
inline bool CheckError::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CheckError::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& CheckError::_internal_status() const {
  const ::google::rpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& CheckError::status() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckError.status)
  return _internal_status();
}
inline void CheckError::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckError.status)
}
inline ::google::rpc::Status* CheckError::release_status() {
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* CheckError::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckError.status)
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* CheckError::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::google::rpc::Status* CheckError::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckError.status)
  return _msg;
}
inline void CheckError::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckError.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::servicecontrol::v1::CheckError_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::servicecontrol::v1::CheckError_Code>() {
  return ::google::api::servicecontrol::v1::CheckError_Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto

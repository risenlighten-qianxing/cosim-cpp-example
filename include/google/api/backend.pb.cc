// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/backend.proto

#include "google/api/backend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace api {
PROTOBUF_CONSTEXPR Backend::Backend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BackendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackendDefaultTypeInternal() {}
  union {
    Backend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackendDefaultTypeInternal _Backend_default_instance_;
PROTOBUF_CONSTEXPR BackendRule::BackendRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.selector_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deadline_)*/0
  , /*decltype(_impl_.min_deadline_)*/0
  , /*decltype(_impl_.operation_deadline_)*/0
  , /*decltype(_impl_.path_translation_)*/0
  , /*decltype(_impl_.authentication_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BackendRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackendRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackendRuleDefaultTypeInternal() {}
  union {
    BackendRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackendRuleDefaultTypeInternal _BackendRule_default_instance_;
}  // namespace api
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2fapi_2fbackend_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fbackend_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fbackend_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fbackend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Backend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Backend, _impl_.rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_.selector_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_.deadline_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_.min_deadline_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_.operation_deadline_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_.path_translation_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _impl_.authentication_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::api::Backend)},
  { 7, -1, -1, sizeof(::google::api::BackendRule)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::api::_Backend_default_instance_._instance,
  &::google::api::_BackendRule_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fapi_2fbackend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030google/api/backend.proto\022\ngoogle.api\"1"
  "\n\007Backend\022&\n\005rules\030\001 \003(\0132\027.google.api.Ba"
  "ckendRule\"\366\002\n\013BackendRule\022\020\n\010selector\030\001 "
  "\001(\t\022\017\n\007address\030\002 \001(\t\022\020\n\010deadline\030\003 \001(\001\022\030"
  "\n\014min_deadline\030\004 \001(\001B\002\030\001\022\032\n\022operation_de"
  "adline\030\005 \001(\001\022A\n\020path_translation\030\006 \001(\0162\'"
  ".google.api.BackendRule.PathTranslation\022"
  "\026\n\014jwt_audience\030\007 \001(\tH\000\022\026\n\014disable_auth\030"
  "\010 \001(\010H\000\022\020\n\010protocol\030\t \001(\t\"e\n\017PathTransla"
  "tion\022 \n\034PATH_TRANSLATION_UNSPECIFIED\020\000\022\024"
  "\n\020CONSTANT_ADDRESS\020\001\022\032\n\026APPEND_PATH_TO_A"
  "DDRESS\020\002B\020\n\016authenticationBn\n\016com.google"
  ".apiB\014BackendProtoP\001ZEgoogle.golang.org/"
  "genproto/googleapis/api/serviceconfig;se"
  "rviceconfig\242\002\004GAPIb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_google_2fapi_2fbackend_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fbackend_2eproto = {
    false, false, 586, descriptor_table_protodef_google_2fapi_2fbackend_2eproto,
    "google/api/backend.proto",
    &descriptor_table_google_2fapi_2fbackend_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_google_2fapi_2fbackend_2eproto::offsets,
    file_level_metadata_google_2fapi_2fbackend_2eproto, file_level_enum_descriptors_google_2fapi_2fbackend_2eproto,
    file_level_service_descriptors_google_2fapi_2fbackend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fbackend_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fbackend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fbackend_2eproto(&descriptor_table_google_2fapi_2fbackend_2eproto);
namespace google {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackendRule_PathTranslation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fbackend_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fbackend_2eproto[0];
}
bool BackendRule_PathTranslation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BackendRule_PathTranslation BackendRule::PATH_TRANSLATION_UNSPECIFIED;
constexpr BackendRule_PathTranslation BackendRule::CONSTANT_ADDRESS;
constexpr BackendRule_PathTranslation BackendRule::APPEND_PATH_TO_ADDRESS;
constexpr BackendRule_PathTranslation BackendRule::PathTranslation_MIN;
constexpr BackendRule_PathTranslation BackendRule::PathTranslation_MAX;
constexpr int BackendRule::PathTranslation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Backend::_Internal {
 public:
};

Backend::Backend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.Backend)
}
Backend::Backend(const Backend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Backend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){from._impl_.rules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.Backend)
}

inline void Backend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Backend::~Backend() {
  // @@protoc_insertion_point(destructor:google.api.Backend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Backend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_.~RepeatedPtrField();
}

void Backend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Backend::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Backend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.api.BackendRule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Backend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Backend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.BackendRule rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Backend)
  return target;
}

size_t Backend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Backend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.BackendRule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_impl_.rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Backend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Backend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Backend::GetClassData() const { return &_class_data_; }


void Backend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Backend*>(&to_msg);
  auto& from = static_cast<const Backend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.Backend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_.MergeFrom(from._impl_.rules_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Backend::CopyFrom(const Backend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Backend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backend::IsInitialized() const {
  return true;
}

void Backend::InternalSwap(Backend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fbackend_2eproto_getter, &descriptor_table_google_2fapi_2fbackend_2eproto_once,
      file_level_metadata_google_2fapi_2fbackend_2eproto[0]);
}

// ===================================================================

class BackendRule::_Internal {
 public:
};

BackendRule::BackendRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.BackendRule)
}
BackendRule::BackendRule(const BackendRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BackendRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.selector_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.deadline_){}
    , decltype(_impl_.min_deadline_){}
    , decltype(_impl_.operation_deadline_){}
    , decltype(_impl_.path_translation_){}
    , decltype(_impl_.authentication_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selector().empty()) {
    _this->_impl_.selector_.Set(from._internal_selector(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.deadline_, &from._impl_.deadline_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.path_translation_) -
    reinterpret_cast<char*>(&_impl_.deadline_)) + sizeof(_impl_.path_translation_));
  clear_has_authentication();
  switch (from.authentication_case()) {
    case kJwtAudience: {
      _this->_internal_set_jwt_audience(from._internal_jwt_audience());
      break;
    }
    case kDisableAuth: {
      _this->_internal_set_disable_auth(from._internal_disable_auth());
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.BackendRule)
}

inline void BackendRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.selector_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.deadline_){0}
    , decltype(_impl_.min_deadline_){0}
    , decltype(_impl_.operation_deadline_){0}
    , decltype(_impl_.path_translation_){0}
    , decltype(_impl_.authentication_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.selector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_authentication();
}

BackendRule::~BackendRule() {
  // @@protoc_insertion_point(destructor:google.api.BackendRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackendRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selector_.Destroy();
  _impl_.address_.Destroy();
  _impl_.protocol_.Destroy();
  if (has_authentication()) {
    clear_authentication();
  }
}

void BackendRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackendRule::clear_authentication() {
// @@protoc_insertion_point(one_of_clear_start:google.api.BackendRule)
  switch (authentication_case()) {
    case kJwtAudience: {
      _impl_.authentication_.jwt_audience_.Destroy();
      break;
    }
    case kDisableAuth: {
      // No need to clear
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = AUTHENTICATION_NOT_SET;
}


void BackendRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.BackendRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selector_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.protocol_.ClearToEmpty();
  ::memset(&_impl_.deadline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.path_translation_) -
      reinterpret_cast<char*>(&_impl_.deadline_)) + sizeof(_impl_.path_translation_));
  clear_authentication();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackendRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string selector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.BackendRule.selector"));
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.BackendRule.address"));
        } else
          goto handle_unusual;
        continue;
      // double deadline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_deadline = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.min_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double operation_deadline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.operation_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.api.BackendRule.PathTranslation path_translation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_path_translation(static_cast<::google::api::BackendRule_PathTranslation>(val));
        } else
          goto handle_unusual;
        continue;
      // string jwt_audience = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_jwt_audience();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.BackendRule.jwt_audience"));
        } else
          goto handle_unusual;
        continue;
      // bool disable_auth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_disable_auth(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.BackendRule.protocol"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackendRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.BackendRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector = 1;
  if (!this->_internal_selector().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selector().data(), static_cast<int>(this->_internal_selector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.selector");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selector(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // double deadline = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_deadline = this->_internal_deadline();
  uint64_t raw_deadline;
  memcpy(&raw_deadline, &tmp_deadline, sizeof(tmp_deadline));
  if (raw_deadline != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_deadline(), target);
  }

  // double min_deadline = 4 [deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_deadline = this->_internal_min_deadline();
  uint64_t raw_min_deadline;
  memcpy(&raw_min_deadline, &tmp_min_deadline, sizeof(tmp_min_deadline));
  if (raw_min_deadline != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_deadline(), target);
  }

  // double operation_deadline = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_operation_deadline = this->_internal_operation_deadline();
  uint64_t raw_operation_deadline;
  memcpy(&raw_operation_deadline, &tmp_operation_deadline, sizeof(tmp_operation_deadline));
  if (raw_operation_deadline != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_operation_deadline(), target);
  }

  // .google.api.BackendRule.PathTranslation path_translation = 6;
  if (this->_internal_path_translation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_path_translation(), target);
  }

  // string jwt_audience = 7;
  if (_internal_has_jwt_audience()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jwt_audience().data(), static_cast<int>(this->_internal_jwt_audience().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.jwt_audience");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_jwt_audience(), target);
  }

  // bool disable_auth = 8;
  if (_internal_has_disable_auth()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_disable_auth(), target);
  }

  // string protocol = 9;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.protocol");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.BackendRule)
  return target;
}

size_t BackendRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.BackendRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string selector = 1;
  if (!this->_internal_selector().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selector());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string protocol = 9;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // double deadline = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_deadline = this->_internal_deadline();
  uint64_t raw_deadline;
  memcpy(&raw_deadline, &tmp_deadline, sizeof(tmp_deadline));
  if (raw_deadline != 0) {
    total_size += 1 + 8;
  }

  // double min_deadline = 4 [deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_deadline = this->_internal_min_deadline();
  uint64_t raw_min_deadline;
  memcpy(&raw_min_deadline, &tmp_min_deadline, sizeof(tmp_min_deadline));
  if (raw_min_deadline != 0) {
    total_size += 1 + 8;
  }

  // double operation_deadline = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_operation_deadline = this->_internal_operation_deadline();
  uint64_t raw_operation_deadline;
  memcpy(&raw_operation_deadline, &tmp_operation_deadline, sizeof(tmp_operation_deadline));
  if (raw_operation_deadline != 0) {
    total_size += 1 + 8;
  }

  // .google.api.BackendRule.PathTranslation path_translation = 6;
  if (this->_internal_path_translation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_path_translation());
  }

  switch (authentication_case()) {
    // string jwt_audience = 7;
    case kJwtAudience: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_jwt_audience());
      break;
    }
    // bool disable_auth = 8;
    case kDisableAuth: {
      total_size += 1 + 1;
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackendRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BackendRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackendRule::GetClassData() const { return &_class_data_; }


void BackendRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BackendRule*>(&to_msg);
  auto& from = static_cast<const BackendRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.BackendRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_selector().empty()) {
    _this->_internal_set_selector(from._internal_selector());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_deadline = from._internal_deadline();
  uint64_t raw_deadline;
  memcpy(&raw_deadline, &tmp_deadline, sizeof(tmp_deadline));
  if (raw_deadline != 0) {
    _this->_internal_set_deadline(from._internal_deadline());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_deadline = from._internal_min_deadline();
  uint64_t raw_min_deadline;
  memcpy(&raw_min_deadline, &tmp_min_deadline, sizeof(tmp_min_deadline));
  if (raw_min_deadline != 0) {
    _this->_internal_set_min_deadline(from._internal_min_deadline());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_operation_deadline = from._internal_operation_deadline();
  uint64_t raw_operation_deadline;
  memcpy(&raw_operation_deadline, &tmp_operation_deadline, sizeof(tmp_operation_deadline));
  if (raw_operation_deadline != 0) {
    _this->_internal_set_operation_deadline(from._internal_operation_deadline());
  }
  if (from._internal_path_translation() != 0) {
    _this->_internal_set_path_translation(from._internal_path_translation());
  }
  switch (from.authentication_case()) {
    case kJwtAudience: {
      _this->_internal_set_jwt_audience(from._internal_jwt_audience());
      break;
    }
    case kDisableAuth: {
      _this->_internal_set_disable_auth(from._internal_disable_auth());
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackendRule::CopyFrom(const BackendRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.BackendRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackendRule::IsInitialized() const {
  return true;
}

void BackendRule::InternalSwap(BackendRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selector_, lhs_arena,
      &other->_impl_.selector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackendRule, _impl_.path_translation_)
      + sizeof(BackendRule::_impl_.path_translation_)
      - PROTOBUF_FIELD_OFFSET(BackendRule, _impl_.deadline_)>(
          reinterpret_cast<char*>(&_impl_.deadline_),
          reinterpret_cast<char*>(&other->_impl_.deadline_));
  swap(_impl_.authentication_, other->_impl_.authentication_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BackendRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fbackend_2eproto_getter, &descriptor_table_google_2fapi_2fbackend_2eproto_once,
      file_level_metadata_google_2fapi_2fbackend_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::Backend*
Arena::CreateMaybeMessage< ::google::api::Backend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Backend >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::BackendRule*
Arena::CreateMaybeMessage< ::google::api::BackendRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::BackendRule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/service.proto

#include "google/api/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace api {
PROTOBUF_CONSTEXPR Service::Service(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apis_)*/{}
  , /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_.enums_)*/{}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_.monitored_resources_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.producer_project_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.documentation_)*/nullptr
  , /*decltype(_impl_.backend_)*/nullptr
  , /*decltype(_impl_.http_)*/nullptr
  , /*decltype(_impl_.quota_)*/nullptr
  , /*decltype(_impl_.authentication_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_.usage_)*/nullptr
  , /*decltype(_impl_.config_version_)*/nullptr
  , /*decltype(_impl_.control_)*/nullptr
  , /*decltype(_impl_.billing_)*/nullptr
  , /*decltype(_impl_.logging_)*/nullptr
  , /*decltype(_impl_.monitoring_)*/nullptr
  , /*decltype(_impl_.system_parameters_)*/nullptr
  , /*decltype(_impl_.source_info_)*/nullptr
  , /*decltype(_impl_.publishing_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceDefaultTypeInternal() {}
  union {
    Service _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceDefaultTypeInternal _Service_default_instance_;
}  // namespace api
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2fapi_2fservice_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_google_2fapi_2fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fservice_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.producer_project_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.apis_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.types_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.enums_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.documentation_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.backend_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.http_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.quota_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.authentication_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.usage_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.control_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.logs_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.monitored_resources_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.billing_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.logging_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.monitoring_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.system_parameters_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.source_info_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.publishing_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _impl_.config_version_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::api::Service)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::api::_Service_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fapi_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030google/api/service.proto\022\ngoogle.api\032\025"
  "google/api/auth.proto\032\030google/api/backen"
  "d.proto\032\030google/api/billing.proto\032\027googl"
  "e/api/client.proto\032\030google/api/context.p"
  "roto\032\030google/api/control.proto\032\036google/a"
  "pi/documentation.proto\032\031google/api/endpo"
  "int.proto\032\025google/api/http.proto\032\024google"
  "/api/log.proto\032\030google/api/logging.proto"
  "\032\027google/api/metric.proto\032#google/api/mo"
  "nitored_resource.proto\032\033google/api/monit"
  "oring.proto\032\026google/api/quota.proto\032\034goo"
  "gle/api/source_info.proto\032!google/api/sy"
  "stem_parameter.proto\032\026google/api/usage.p"
  "roto\032\031google/protobuf/api.proto\032\032google/"
  "protobuf/type.proto\032\036google/protobuf/wra"
  "ppers.proto\"\202\010\n\007Service\022\014\n\004name\030\001 \001(\t\022\r\n"
  "\005title\030\002 \001(\t\022\033\n\023producer_project_id\030\026 \001("
  "\t\022\n\n\002id\030! \001(\t\022\"\n\004apis\030\003 \003(\0132\024.google.pro"
  "tobuf.Api\022$\n\005types\030\004 \003(\0132\025.google.protob"
  "uf.Type\022$\n\005enums\030\005 \003(\0132\025.google.protobuf"
  ".Enum\0220\n\rdocumentation\030\006 \001(\0132\031.google.ap"
  "i.Documentation\022$\n\007backend\030\010 \001(\0132\023.googl"
  "e.api.Backend\022\036\n\004http\030\t \001(\0132\020.google.api"
  ".Http\022 \n\005quota\030\n \001(\0132\021.google.api.Quota\022"
  "2\n\016authentication\030\013 \001(\0132\032.google.api.Aut"
  "hentication\022$\n\007context\030\014 \001(\0132\023.google.ap"
  "i.Context\022 \n\005usage\030\017 \001(\0132\021.google.api.Us"
  "age\022\'\n\tendpoints\030\022 \003(\0132\024.google.api.Endp"
  "oint\022$\n\007control\030\025 \001(\0132\023.google.api.Contr"
  "ol\022\'\n\004logs\030\027 \003(\0132\031.google.api.LogDescrip"
  "tor\022-\n\007metrics\030\030 \003(\0132\034.google.api.Metric"
  "Descriptor\022D\n\023monitored_resources\030\031 \003(\0132"
  "\'.google.api.MonitoredResourceDescriptor"
  "\022$\n\007billing\030\032 \001(\0132\023.google.api.Billing\022$"
  "\n\007logging\030\033 \001(\0132\023.google.api.Logging\022*\n\n"
  "monitoring\030\034 \001(\0132\026.google.api.Monitoring"
  "\0227\n\021system_parameters\030\035 \001(\0132\034.google.api"
  ".SystemParameters\022+\n\013source_info\030% \001(\0132\026"
  ".google.api.SourceInfo\022*\n\npublishing\030- \001"
  "(\0132\026.google.api.Publishing\0224\n\016config_ver"
  "sion\030\024 \001(\0132\034.google.protobuf.UInt32Value"
  "Bn\n\016com.google.apiB\014ServiceProtoP\001ZEgoog"
  "le.golang.org/genproto/googleapis/api/se"
  "rviceconfig;serviceconfig\242\002\004GAPIb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fservice_2eproto_deps[21] = {
  &::descriptor_table_google_2fapi_2fauth_2eproto,
  &::descriptor_table_google_2fapi_2fbackend_2eproto,
  &::descriptor_table_google_2fapi_2fbilling_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2fcontext_2eproto,
  &::descriptor_table_google_2fapi_2fcontrol_2eproto,
  &::descriptor_table_google_2fapi_2fdocumentation_2eproto,
  &::descriptor_table_google_2fapi_2fendpoint_2eproto,
  &::descriptor_table_google_2fapi_2fhttp_2eproto,
  &::descriptor_table_google_2fapi_2flog_2eproto,
  &::descriptor_table_google_2fapi_2flogging_2eproto,
  &::descriptor_table_google_2fapi_2fmetric_2eproto,
  &::descriptor_table_google_2fapi_2fmonitored_5fresource_2eproto,
  &::descriptor_table_google_2fapi_2fmonitoring_2eproto,
  &::descriptor_table_google_2fapi_2fquota_2eproto,
  &::descriptor_table_google_2fapi_2fsource_5finfo_2eproto,
  &::descriptor_table_google_2fapi_2fsystem_5fparameter_2eproto,
  &::descriptor_table_google_2fapi_2fusage_2eproto,
  &::descriptor_table_google_2fprotobuf_2fapi_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftype_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fapi_2fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fservice_2eproto = {
    false, false, 1760, descriptor_table_protodef_google_2fapi_2fservice_2eproto,
    "google/api/service.proto",
    &descriptor_table_google_2fapi_2fservice_2eproto_once, descriptor_table_google_2fapi_2fservice_2eproto_deps, 21, 1,
    schemas, file_default_instances, TableStruct_google_2fapi_2fservice_2eproto::offsets,
    file_level_metadata_google_2fapi_2fservice_2eproto, file_level_enum_descriptors_google_2fapi_2fservice_2eproto,
    file_level_service_descriptors_google_2fapi_2fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fservice_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fservice_2eproto(&descriptor_table_google_2fapi_2fservice_2eproto);
namespace google {
namespace api {

// ===================================================================

class Service::_Internal {
 public:
  static const ::google::api::Documentation& documentation(const Service* msg);
  static const ::google::api::Backend& backend(const Service* msg);
  static const ::google::api::Http& http(const Service* msg);
  static const ::google::api::Quota& quota(const Service* msg);
  static const ::google::api::Authentication& authentication(const Service* msg);
  static const ::google::api::Context& context(const Service* msg);
  static const ::google::api::Usage& usage(const Service* msg);
  static const ::google::api::Control& control(const Service* msg);
  static const ::google::api::Billing& billing(const Service* msg);
  static const ::google::api::Logging& logging(const Service* msg);
  static const ::google::api::Monitoring& monitoring(const Service* msg);
  static const ::google::api::SystemParameters& system_parameters(const Service* msg);
  static const ::google::api::SourceInfo& source_info(const Service* msg);
  static const ::google::api::Publishing& publishing(const Service* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& config_version(const Service* msg);
};

const ::google::api::Documentation&
Service::_Internal::documentation(const Service* msg) {
  return *msg->_impl_.documentation_;
}
const ::google::api::Backend&
Service::_Internal::backend(const Service* msg) {
  return *msg->_impl_.backend_;
}
const ::google::api::Http&
Service::_Internal::http(const Service* msg) {
  return *msg->_impl_.http_;
}
const ::google::api::Quota&
Service::_Internal::quota(const Service* msg) {
  return *msg->_impl_.quota_;
}
const ::google::api::Authentication&
Service::_Internal::authentication(const Service* msg) {
  return *msg->_impl_.authentication_;
}
const ::google::api::Context&
Service::_Internal::context(const Service* msg) {
  return *msg->_impl_.context_;
}
const ::google::api::Usage&
Service::_Internal::usage(const Service* msg) {
  return *msg->_impl_.usage_;
}
const ::google::api::Control&
Service::_Internal::control(const Service* msg) {
  return *msg->_impl_.control_;
}
const ::google::api::Billing&
Service::_Internal::billing(const Service* msg) {
  return *msg->_impl_.billing_;
}
const ::google::api::Logging&
Service::_Internal::logging(const Service* msg) {
  return *msg->_impl_.logging_;
}
const ::google::api::Monitoring&
Service::_Internal::monitoring(const Service* msg) {
  return *msg->_impl_.monitoring_;
}
const ::google::api::SystemParameters&
Service::_Internal::system_parameters(const Service* msg) {
  return *msg->_impl_.system_parameters_;
}
const ::google::api::SourceInfo&
Service::_Internal::source_info(const Service* msg) {
  return *msg->_impl_.source_info_;
}
const ::google::api::Publishing&
Service::_Internal::publishing(const Service* msg) {
  return *msg->_impl_.publishing_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Service::_Internal::config_version(const Service* msg) {
  return *msg->_impl_.config_version_;
}
void Service::clear_apis() {
  _impl_.apis_.Clear();
}
void Service::clear_types() {
  _impl_.types_.Clear();
}
void Service::clear_enums() {
  _impl_.enums_.Clear();
}
void Service::clear_documentation() {
  if (GetArenaForAllocation() == nullptr && _impl_.documentation_ != nullptr) {
    delete _impl_.documentation_;
  }
  _impl_.documentation_ = nullptr;
}
void Service::clear_backend() {
  if (GetArenaForAllocation() == nullptr && _impl_.backend_ != nullptr) {
    delete _impl_.backend_;
  }
  _impl_.backend_ = nullptr;
}
void Service::clear_http() {
  if (GetArenaForAllocation() == nullptr && _impl_.http_ != nullptr) {
    delete _impl_.http_;
  }
  _impl_.http_ = nullptr;
}
void Service::clear_quota() {
  if (GetArenaForAllocation() == nullptr && _impl_.quota_ != nullptr) {
    delete _impl_.quota_;
  }
  _impl_.quota_ = nullptr;
}
void Service::clear_authentication() {
  if (GetArenaForAllocation() == nullptr && _impl_.authentication_ != nullptr) {
    delete _impl_.authentication_;
  }
  _impl_.authentication_ = nullptr;
}
void Service::clear_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
}
void Service::clear_usage() {
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
}
void Service::clear_endpoints() {
  _impl_.endpoints_.Clear();
}
void Service::clear_control() {
  if (GetArenaForAllocation() == nullptr && _impl_.control_ != nullptr) {
    delete _impl_.control_;
  }
  _impl_.control_ = nullptr;
}
void Service::clear_logs() {
  _impl_.logs_.Clear();
}
void Service::clear_metrics() {
  _impl_.metrics_.Clear();
}
void Service::clear_monitored_resources() {
  _impl_.monitored_resources_.Clear();
}
void Service::clear_billing() {
  if (GetArenaForAllocation() == nullptr && _impl_.billing_ != nullptr) {
    delete _impl_.billing_;
  }
  _impl_.billing_ = nullptr;
}
void Service::clear_logging() {
  if (GetArenaForAllocation() == nullptr && _impl_.logging_ != nullptr) {
    delete _impl_.logging_;
  }
  _impl_.logging_ = nullptr;
}
void Service::clear_monitoring() {
  if (GetArenaForAllocation() == nullptr && _impl_.monitoring_ != nullptr) {
    delete _impl_.monitoring_;
  }
  _impl_.monitoring_ = nullptr;
}
void Service::clear_system_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.system_parameters_ != nullptr) {
    delete _impl_.system_parameters_;
  }
  _impl_.system_parameters_ = nullptr;
}
void Service::clear_source_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_info_ != nullptr) {
    delete _impl_.source_info_;
  }
  _impl_.source_info_ = nullptr;
}
void Service::clear_publishing() {
  if (GetArenaForAllocation() == nullptr && _impl_.publishing_ != nullptr) {
    delete _impl_.publishing_;
  }
  _impl_.publishing_ = nullptr;
}
void Service::clear_config_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_version_ != nullptr) {
    delete _impl_.config_version_;
  }
  _impl_.config_version_ = nullptr;
}
Service::Service(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.Service)
}
Service::Service(const Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Service* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.apis_){from._impl_.apis_}
    , decltype(_impl_.types_){from._impl_.types_}
    , decltype(_impl_.enums_){from._impl_.enums_}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.logs_){from._impl_.logs_}
    , decltype(_impl_.metrics_){from._impl_.metrics_}
    , decltype(_impl_.monitored_resources_){from._impl_.monitored_resources_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.producer_project_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.documentation_){nullptr}
    , decltype(_impl_.backend_){nullptr}
    , decltype(_impl_.http_){nullptr}
    , decltype(_impl_.quota_){nullptr}
    , decltype(_impl_.authentication_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.config_version_){nullptr}
    , decltype(_impl_.control_){nullptr}
    , decltype(_impl_.billing_){nullptr}
    , decltype(_impl_.logging_){nullptr}
    , decltype(_impl_.monitoring_){nullptr}
    , decltype(_impl_.system_parameters_){nullptr}
    , decltype(_impl_.source_info_){nullptr}
    , decltype(_impl_.publishing_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.producer_project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_project_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producer_project_id().empty()) {
    _this->_impl_.producer_project_id_.Set(from._internal_producer_project_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_documentation()) {
    _this->_impl_.documentation_ = new ::google::api::Documentation(*from._impl_.documentation_);
  }
  if (from._internal_has_backend()) {
    _this->_impl_.backend_ = new ::google::api::Backend(*from._impl_.backend_);
  }
  if (from._internal_has_http()) {
    _this->_impl_.http_ = new ::google::api::Http(*from._impl_.http_);
  }
  if (from._internal_has_quota()) {
    _this->_impl_.quota_ = new ::google::api::Quota(*from._impl_.quota_);
  }
  if (from._internal_has_authentication()) {
    _this->_impl_.authentication_ = new ::google::api::Authentication(*from._impl_.authentication_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::google::api::Context(*from._impl_.context_);
  }
  if (from._internal_has_usage()) {
    _this->_impl_.usage_ = new ::google::api::Usage(*from._impl_.usage_);
  }
  if (from._internal_has_config_version()) {
    _this->_impl_.config_version_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from._impl_.config_version_);
  }
  if (from._internal_has_control()) {
    _this->_impl_.control_ = new ::google::api::Control(*from._impl_.control_);
  }
  if (from._internal_has_billing()) {
    _this->_impl_.billing_ = new ::google::api::Billing(*from._impl_.billing_);
  }
  if (from._internal_has_logging()) {
    _this->_impl_.logging_ = new ::google::api::Logging(*from._impl_.logging_);
  }
  if (from._internal_has_monitoring()) {
    _this->_impl_.monitoring_ = new ::google::api::Monitoring(*from._impl_.monitoring_);
  }
  if (from._internal_has_system_parameters()) {
    _this->_impl_.system_parameters_ = new ::google::api::SystemParameters(*from._impl_.system_parameters_);
  }
  if (from._internal_has_source_info()) {
    _this->_impl_.source_info_ = new ::google::api::SourceInfo(*from._impl_.source_info_);
  }
  if (from._internal_has_publishing()) {
    _this->_impl_.publishing_ = new ::google::api::Publishing(*from._impl_.publishing_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.Service)
}

inline void Service::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.apis_){arena}
    , decltype(_impl_.types_){arena}
    , decltype(_impl_.enums_){arena}
    , decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.logs_){arena}
    , decltype(_impl_.metrics_){arena}
    , decltype(_impl_.monitored_resources_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.producer_project_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.documentation_){nullptr}
    , decltype(_impl_.backend_){nullptr}
    , decltype(_impl_.http_){nullptr}
    , decltype(_impl_.quota_){nullptr}
    , decltype(_impl_.authentication_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.usage_){nullptr}
    , decltype(_impl_.config_version_){nullptr}
    , decltype(_impl_.control_){nullptr}
    , decltype(_impl_.billing_){nullptr}
    , decltype(_impl_.logging_){nullptr}
    , decltype(_impl_.monitoring_){nullptr}
    , decltype(_impl_.system_parameters_){nullptr}
    , decltype(_impl_.source_info_){nullptr}
    , decltype(_impl_.publishing_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.producer_project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_project_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:google.api.Service)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Service::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apis_.~RepeatedPtrField();
  _impl_.types_.~RepeatedPtrField();
  _impl_.enums_.~RepeatedPtrField();
  _impl_.endpoints_.~RepeatedPtrField();
  _impl_.logs_.~RepeatedPtrField();
  _impl_.metrics_.~RepeatedPtrField();
  _impl_.monitored_resources_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.title_.Destroy();
  _impl_.producer_project_id_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.documentation_;
  if (this != internal_default_instance()) delete _impl_.backend_;
  if (this != internal_default_instance()) delete _impl_.http_;
  if (this != internal_default_instance()) delete _impl_.quota_;
  if (this != internal_default_instance()) delete _impl_.authentication_;
  if (this != internal_default_instance()) delete _impl_.context_;
  if (this != internal_default_instance()) delete _impl_.usage_;
  if (this != internal_default_instance()) delete _impl_.config_version_;
  if (this != internal_default_instance()) delete _impl_.control_;
  if (this != internal_default_instance()) delete _impl_.billing_;
  if (this != internal_default_instance()) delete _impl_.logging_;
  if (this != internal_default_instance()) delete _impl_.monitoring_;
  if (this != internal_default_instance()) delete _impl_.system_parameters_;
  if (this != internal_default_instance()) delete _impl_.source_info_;
  if (this != internal_default_instance()) delete _impl_.publishing_;
}

void Service::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Service)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apis_.Clear();
  _impl_.types_.Clear();
  _impl_.enums_.Clear();
  _impl_.endpoints_.Clear();
  _impl_.logs_.Clear();
  _impl_.metrics_.Clear();
  _impl_.monitored_resources_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.producer_project_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.documentation_ != nullptr) {
    delete _impl_.documentation_;
  }
  _impl_.documentation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.backend_ != nullptr) {
    delete _impl_.backend_;
  }
  _impl_.backend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.http_ != nullptr) {
    delete _impl_.http_;
  }
  _impl_.http_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quota_ != nullptr) {
    delete _impl_.quota_;
  }
  _impl_.quota_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.authentication_ != nullptr) {
    delete _impl_.authentication_;
  }
  _impl_.authentication_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usage_ != nullptr) {
    delete _impl_.usage_;
  }
  _impl_.usage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.config_version_ != nullptr) {
    delete _impl_.config_version_;
  }
  _impl_.config_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.control_ != nullptr) {
    delete _impl_.control_;
  }
  _impl_.control_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.billing_ != nullptr) {
    delete _impl_.billing_;
  }
  _impl_.billing_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.logging_ != nullptr) {
    delete _impl_.logging_;
  }
  _impl_.logging_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.monitoring_ != nullptr) {
    delete _impl_.monitoring_;
  }
  _impl_.monitoring_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.system_parameters_ != nullptr) {
    delete _impl_.system_parameters_;
  }
  _impl_.system_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_info_ != nullptr) {
    delete _impl_.source_info_;
  }
  _impl_.source_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.publishing_ != nullptr) {
    delete _impl_.publishing_;
  }
  _impl_.publishing_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Service::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.Service.name"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.Service.title"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Api apis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Type types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Enum enums = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enums(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.Documentation documentation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Backend backend = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_backend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Http http = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_http(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Quota quota = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_quota(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Authentication authentication = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_authentication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Context context = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Usage usage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.Endpoint endpoints = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_endpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value config_version = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_config_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Control control = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string producer_project_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_producer_project_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.Service.producer_project_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.LogDescriptor logs = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.MetricDescriptor metrics = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_monitored_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.Billing billing = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_billing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Logging logging = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_logging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Monitoring monitoring = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_monitoring(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.SystemParameters system_parameters = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.Service.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.api.SourceInfo source_info = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Publishing publishing = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_publishing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Service::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Service)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Service.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Service.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // repeated .google.protobuf.Api apis = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_apis_size()); i < n; i++) {
    const auto& repfield = this->_internal_apis(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Type types = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Enum enums = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enums_size()); i < n; i++) {
    const auto& repfield = this->_internal_enums(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.api.Documentation documentation = 6;
  if (this->_internal_has_documentation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::documentation(this),
        _Internal::documentation(this).GetCachedSize(), target, stream);
  }

  // .google.api.Backend backend = 8;
  if (this->_internal_has_backend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::backend(this),
        _Internal::backend(this).GetCachedSize(), target, stream);
  }

  // .google.api.Http http = 9;
  if (this->_internal_has_http()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::http(this),
        _Internal::http(this).GetCachedSize(), target, stream);
  }

  // .google.api.Quota quota = 10;
  if (this->_internal_has_quota()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::quota(this),
        _Internal::quota(this).GetCachedSize(), target, stream);
  }

  // .google.api.Authentication authentication = 11;
  if (this->_internal_has_authentication()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::authentication(this),
        _Internal::authentication(this).GetCachedSize(), target, stream);
  }

  // .google.api.Context context = 12;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // .google.api.Usage usage = 15;
  if (this->_internal_has_usage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::usage(this),
        _Internal::usage(this).GetCachedSize(), target, stream);
  }

  // repeated .google.api.Endpoint endpoints = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_endpoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_endpoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value config_version = 20;
  if (this->_internal_has_config_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::config_version(this),
        _Internal::config_version(this).GetCachedSize(), target, stream);
  }

  // .google.api.Control control = 21;
  if (this->_internal_has_control()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::control(this),
        _Internal::control(this).GetCachedSize(), target, stream);
  }

  // string producer_project_id = 22;
  if (!this->_internal_producer_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_producer_project_id().data(), static_cast<int>(this->_internal_producer_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Service.producer_project_id");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_producer_project_id(), target);
  }

  // repeated .google.api.LogDescriptor logs = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .google.api.MetricDescriptor metrics = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_monitored_resources_size()); i < n; i++) {
    const auto& repfield = this->_internal_monitored_resources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.api.Billing billing = 26;
  if (this->_internal_has_billing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::billing(this),
        _Internal::billing(this).GetCachedSize(), target, stream);
  }

  // .google.api.Logging logging = 27;
  if (this->_internal_has_logging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::logging(this),
        _Internal::logging(this).GetCachedSize(), target, stream);
  }

  // .google.api.Monitoring monitoring = 28;
  if (this->_internal_has_monitoring()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::monitoring(this),
        _Internal::monitoring(this).GetCachedSize(), target, stream);
  }

  // .google.api.SystemParameters system_parameters = 29;
  if (this->_internal_has_system_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::system_parameters(this),
        _Internal::system_parameters(this).GetCachedSize(), target, stream);
  }

  // string id = 33;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Service.id");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_id(), target);
  }

  // .google.api.SourceInfo source_info = 37;
  if (this->_internal_has_source_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::source_info(this),
        _Internal::source_info(this).GetCachedSize(), target, stream);
  }

  // .google.api.Publishing publishing = 45;
  if (this->_internal_has_publishing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::publishing(this),
        _Internal::publishing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Service)
  return target;
}

size_t Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Service)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Api apis = 3;
  total_size += 1UL * this->_internal_apis_size();
  for (const auto& msg : this->_impl_.apis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Type types = 4;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->_impl_.types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Enum enums = 5;
  total_size += 1UL * this->_internal_enums_size();
  for (const auto& msg : this->_impl_.enums_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.Endpoint endpoints = 18;
  total_size += 2UL * this->_internal_endpoints_size();
  for (const auto& msg : this->_impl_.endpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.LogDescriptor logs = 23;
  total_size += 2UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.MetricDescriptor metrics = 24;
  total_size += 2UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
  total_size += 2UL * this->_internal_monitored_resources_size();
  for (const auto& msg : this->_impl_.monitored_resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string producer_project_id = 22;
  if (!this->_internal_producer_project_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_producer_project_id());
  }

  // string id = 33;
  if (!this->_internal_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.api.Documentation documentation = 6;
  if (this->_internal_has_documentation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.documentation_);
  }

  // .google.api.Backend backend = 8;
  if (this->_internal_has_backend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.backend_);
  }

  // .google.api.Http http = 9;
  if (this->_internal_has_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.http_);
  }

  // .google.api.Quota quota = 10;
  if (this->_internal_has_quota()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quota_);
  }

  // .google.api.Authentication authentication = 11;
  if (this->_internal_has_authentication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.authentication_);
  }

  // .google.api.Context context = 12;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  // .google.api.Usage usage = 15;
  if (this->_internal_has_usage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usage_);
  }

  // .google.protobuf.UInt32Value config_version = 20;
  if (this->_internal_has_config_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_version_);
  }

  // .google.api.Control control = 21;
  if (this->_internal_has_control()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.control_);
  }

  // .google.api.Billing billing = 26;
  if (this->_internal_has_billing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.billing_);
  }

  // .google.api.Logging logging = 27;
  if (this->_internal_has_logging()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logging_);
  }

  // .google.api.Monitoring monitoring = 28;
  if (this->_internal_has_monitoring()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.monitoring_);
  }

  // .google.api.SystemParameters system_parameters = 29;
  if (this->_internal_has_system_parameters()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.system_parameters_);
  }

  // .google.api.SourceInfo source_info = 37;
  if (this->_internal_has_source_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_info_);
  }

  // .google.api.Publishing publishing = 45;
  if (this->_internal_has_publishing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.publishing_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Service::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Service::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Service::GetClassData() const { return &_class_data_; }


void Service::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Service*>(&to_msg);
  auto& from = static_cast<const Service&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.Service)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apis_.MergeFrom(from._impl_.apis_);
  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  _this->_impl_.enums_.MergeFrom(from._impl_.enums_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  _this->_impl_.monitored_resources_.MergeFrom(from._impl_.monitored_resources_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_producer_project_id().empty()) {
    _this->_internal_set_producer_project_id(from._internal_producer_project_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_documentation()) {
    _this->_internal_mutable_documentation()->::google::api::Documentation::MergeFrom(
        from._internal_documentation());
  }
  if (from._internal_has_backend()) {
    _this->_internal_mutable_backend()->::google::api::Backend::MergeFrom(
        from._internal_backend());
  }
  if (from._internal_has_http()) {
    _this->_internal_mutable_http()->::google::api::Http::MergeFrom(
        from._internal_http());
  }
  if (from._internal_has_quota()) {
    _this->_internal_mutable_quota()->::google::api::Quota::MergeFrom(
        from._internal_quota());
  }
  if (from._internal_has_authentication()) {
    _this->_internal_mutable_authentication()->::google::api::Authentication::MergeFrom(
        from._internal_authentication());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::google::api::Context::MergeFrom(
        from._internal_context());
  }
  if (from._internal_has_usage()) {
    _this->_internal_mutable_usage()->::google::api::Usage::MergeFrom(
        from._internal_usage());
  }
  if (from._internal_has_config_version()) {
    _this->_internal_mutable_config_version()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(
        from._internal_config_version());
  }
  if (from._internal_has_control()) {
    _this->_internal_mutable_control()->::google::api::Control::MergeFrom(
        from._internal_control());
  }
  if (from._internal_has_billing()) {
    _this->_internal_mutable_billing()->::google::api::Billing::MergeFrom(
        from._internal_billing());
  }
  if (from._internal_has_logging()) {
    _this->_internal_mutable_logging()->::google::api::Logging::MergeFrom(
        from._internal_logging());
  }
  if (from._internal_has_monitoring()) {
    _this->_internal_mutable_monitoring()->::google::api::Monitoring::MergeFrom(
        from._internal_monitoring());
  }
  if (from._internal_has_system_parameters()) {
    _this->_internal_mutable_system_parameters()->::google::api::SystemParameters::MergeFrom(
        from._internal_system_parameters());
  }
  if (from._internal_has_source_info()) {
    _this->_internal_mutable_source_info()->::google::api::SourceInfo::MergeFrom(
        from._internal_source_info());
  }
  if (from._internal_has_publishing()) {
    _this->_internal_mutable_publishing()->::google::api::Publishing::MergeFrom(
        from._internal_publishing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  return true;
}

void Service::InternalSwap(Service* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apis_.InternalSwap(&other->_impl_.apis_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
  _impl_.enums_.InternalSwap(&other->_impl_.enums_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  _impl_.monitored_resources_.InternalSwap(&other->_impl_.monitored_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.producer_project_id_, lhs_arena,
      &other->_impl_.producer_project_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Service, _impl_.publishing_)
      + sizeof(Service::_impl_.publishing_)
      - PROTOBUF_FIELD_OFFSET(Service, _impl_.documentation_)>(
          reinterpret_cast<char*>(&_impl_.documentation_),
          reinterpret_cast<char*>(&other->_impl_.documentation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Service::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fservice_2eproto_getter, &descriptor_table_google_2fapi_2fservice_2eproto_once,
      file_level_metadata_google_2fapi_2fservice_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::Service*
Arena::CreateMaybeMessage< ::google::api::Service >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Service >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

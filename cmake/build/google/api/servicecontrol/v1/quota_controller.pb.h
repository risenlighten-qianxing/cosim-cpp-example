// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/quota_controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/servicecontrol/v1/metric_value.pb.h"
#include "google/rpc/status.pb.h"
#include "google/api/client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class AllocateQuotaRequest;
struct AllocateQuotaRequestDefaultTypeInternal;
extern AllocateQuotaRequestDefaultTypeInternal _AllocateQuotaRequest_default_instance_;
class AllocateQuotaResponse;
struct AllocateQuotaResponseDefaultTypeInternal;
extern AllocateQuotaResponseDefaultTypeInternal _AllocateQuotaResponse_default_instance_;
class QuotaError;
struct QuotaErrorDefaultTypeInternal;
extern QuotaErrorDefaultTypeInternal _QuotaError_default_instance_;
class QuotaOperation;
struct QuotaOperationDefaultTypeInternal;
extern QuotaOperationDefaultTypeInternal _QuotaOperation_default_instance_;
class QuotaOperation_LabelsEntry_DoNotUse;
struct QuotaOperation_LabelsEntry_DoNotUseDefaultTypeInternal;
extern QuotaOperation_LabelsEntry_DoNotUseDefaultTypeInternal _QuotaOperation_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::servicecontrol::v1::AllocateQuotaRequest* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::AllocateQuotaRequest>(Arena*);
template<> ::google::api::servicecontrol::v1::AllocateQuotaResponse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::AllocateQuotaResponse>(Arena*);
template<> ::google::api::servicecontrol::v1::QuotaError* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::QuotaError>(Arena*);
template<> ::google::api::servicecontrol::v1::QuotaOperation* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::QuotaOperation>(Arena*);
template<> ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

enum QuotaOperation_QuotaMode : int {
  QuotaOperation_QuotaMode_UNSPECIFIED = 0,
  QuotaOperation_QuotaMode_NORMAL = 1,
  QuotaOperation_QuotaMode_BEST_EFFORT = 2,
  QuotaOperation_QuotaMode_CHECK_ONLY = 3,
  QuotaOperation_QuotaMode_QUERY_ONLY = 4,
  QuotaOperation_QuotaMode_ADJUST_ONLY = 5,
  QuotaOperation_QuotaMode_QuotaOperation_QuotaMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QuotaOperation_QuotaMode_QuotaOperation_QuotaMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QuotaOperation_QuotaMode_IsValid(int value);
constexpr QuotaOperation_QuotaMode QuotaOperation_QuotaMode_QuotaMode_MIN = QuotaOperation_QuotaMode_UNSPECIFIED;
constexpr QuotaOperation_QuotaMode QuotaOperation_QuotaMode_QuotaMode_MAX = QuotaOperation_QuotaMode_ADJUST_ONLY;
constexpr int QuotaOperation_QuotaMode_QuotaMode_ARRAYSIZE = QuotaOperation_QuotaMode_QuotaMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaOperation_QuotaMode_descriptor();
template<typename T>
inline const std::string& QuotaOperation_QuotaMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuotaOperation_QuotaMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuotaOperation_QuotaMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QuotaOperation_QuotaMode_descriptor(), enum_t_value);
}
inline bool QuotaOperation_QuotaMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuotaOperation_QuotaMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QuotaOperation_QuotaMode>(
    QuotaOperation_QuotaMode_descriptor(), name, value);
}
enum QuotaError_Code : int {
  QuotaError_Code_UNSPECIFIED = 0,
  QuotaError_Code_RESOURCE_EXHAUSTED = 8,
  QuotaError_Code_BILLING_NOT_ACTIVE = 107,
  QuotaError_Code_PROJECT_DELETED = 108,
  QuotaError_Code_API_KEY_INVALID = 105,
  QuotaError_Code_API_KEY_EXPIRED = 112,
  QuotaError_Code_QuotaError_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QuotaError_Code_QuotaError_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QuotaError_Code_IsValid(int value);
constexpr QuotaError_Code QuotaError_Code_Code_MIN = QuotaError_Code_UNSPECIFIED;
constexpr QuotaError_Code QuotaError_Code_Code_MAX = QuotaError_Code_API_KEY_EXPIRED;
constexpr int QuotaError_Code_Code_ARRAYSIZE = QuotaError_Code_Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaError_Code_descriptor();
template<typename T>
inline const std::string& QuotaError_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuotaError_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuotaError_Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QuotaError_Code_descriptor(), enum_t_value);
}
inline bool QuotaError_Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuotaError_Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QuotaError_Code>(
    QuotaError_Code_descriptor(), name, value);
}
// ===================================================================

class AllocateQuotaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.AllocateQuotaRequest) */ {
 public:
  inline AllocateQuotaRequest() : AllocateQuotaRequest(nullptr) {}
  ~AllocateQuotaRequest() override;
  explicit PROTOBUF_CONSTEXPR AllocateQuotaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllocateQuotaRequest(const AllocateQuotaRequest& from);
  AllocateQuotaRequest(AllocateQuotaRequest&& from) noexcept
    : AllocateQuotaRequest() {
    *this = ::std::move(from);
  }

  inline AllocateQuotaRequest& operator=(const AllocateQuotaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllocateQuotaRequest& operator=(AllocateQuotaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllocateQuotaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllocateQuotaRequest* internal_default_instance() {
    return reinterpret_cast<const AllocateQuotaRequest*>(
               &_AllocateQuotaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AllocateQuotaRequest& a, AllocateQuotaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AllocateQuotaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllocateQuotaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllocateQuotaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllocateQuotaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllocateQuotaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllocateQuotaRequest& from) {
    AllocateQuotaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateQuotaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.AllocateQuotaRequest";
  }
  protected:
  explicit AllocateQuotaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kServiceConfigIdFieldNumber = 4,
    kAllocateOperationFieldNumber = 2,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string service_config_id = 4;
  void clear_service_config_id();
  const std::string& service_config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_config_id();
  PROTOBUF_NODISCARD std::string* release_service_config_id();
  void set_allocated_service_config_id(std::string* service_config_id);
  private:
  const std::string& _internal_service_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_config_id(const std::string& value);
  std::string* _internal_mutable_service_config_id();
  public:

  // .google.api.servicecontrol.v1.QuotaOperation allocate_operation = 2;
  bool has_allocate_operation() const;
  private:
  bool _internal_has_allocate_operation() const;
  public:
  void clear_allocate_operation();
  const ::google::api::servicecontrol::v1::QuotaOperation& allocate_operation() const;
  PROTOBUF_NODISCARD ::google::api::servicecontrol::v1::QuotaOperation* release_allocate_operation();
  ::google::api::servicecontrol::v1::QuotaOperation* mutable_allocate_operation();
  void set_allocated_allocate_operation(::google::api::servicecontrol::v1::QuotaOperation* allocate_operation);
  private:
  const ::google::api::servicecontrol::v1::QuotaOperation& _internal_allocate_operation() const;
  ::google::api::servicecontrol::v1::QuotaOperation* _internal_mutable_allocate_operation();
  public:
  void unsafe_arena_set_allocated_allocate_operation(
      ::google::api::servicecontrol::v1::QuotaOperation* allocate_operation);
  ::google::api::servicecontrol::v1::QuotaOperation* unsafe_arena_release_allocate_operation();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.AllocateQuotaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_config_id_;
    ::google::api::servicecontrol::v1::QuotaOperation* allocate_operation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class QuotaOperation_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaOperation_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaOperation_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  QuotaOperation_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR QuotaOperation_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit QuotaOperation_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QuotaOperation_LabelsEntry_DoNotUse& other);
  static const QuotaOperation_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QuotaOperation_LabelsEntry_DoNotUse*>(&_QuotaOperation_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v1.QuotaOperation.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v1.QuotaOperation.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
};

// -------------------------------------------------------------------

class QuotaOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.QuotaOperation) */ {
 public:
  inline QuotaOperation() : QuotaOperation(nullptr) {}
  ~QuotaOperation() override;
  explicit PROTOBUF_CONSTEXPR QuotaOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuotaOperation(const QuotaOperation& from);
  QuotaOperation(QuotaOperation&& from) noexcept
    : QuotaOperation() {
    *this = ::std::move(from);
  }

  inline QuotaOperation& operator=(const QuotaOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuotaOperation& operator=(QuotaOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuotaOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuotaOperation* internal_default_instance() {
    return reinterpret_cast<const QuotaOperation*>(
               &_QuotaOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuotaOperation& a, QuotaOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(QuotaOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuotaOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuotaOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuotaOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuotaOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuotaOperation& from) {
    QuotaOperation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.QuotaOperation";
  }
  protected:
  explicit QuotaOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef QuotaOperation_QuotaMode QuotaMode;
  static constexpr QuotaMode UNSPECIFIED =
    QuotaOperation_QuotaMode_UNSPECIFIED;
  static constexpr QuotaMode NORMAL =
    QuotaOperation_QuotaMode_NORMAL;
  static constexpr QuotaMode BEST_EFFORT =
    QuotaOperation_QuotaMode_BEST_EFFORT;
  static constexpr QuotaMode CHECK_ONLY =
    QuotaOperation_QuotaMode_CHECK_ONLY;
  static constexpr QuotaMode QUERY_ONLY =
    QuotaOperation_QuotaMode_QUERY_ONLY;
  static constexpr QuotaMode ADJUST_ONLY =
    QuotaOperation_QuotaMode_ADJUST_ONLY;
  static inline bool QuotaMode_IsValid(int value) {
    return QuotaOperation_QuotaMode_IsValid(value);
  }
  static constexpr QuotaMode QuotaMode_MIN =
    QuotaOperation_QuotaMode_QuotaMode_MIN;
  static constexpr QuotaMode QuotaMode_MAX =
    QuotaOperation_QuotaMode_QuotaMode_MAX;
  static constexpr int QuotaMode_ARRAYSIZE =
    QuotaOperation_QuotaMode_QuotaMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  QuotaMode_descriptor() {
    return QuotaOperation_QuotaMode_descriptor();
  }
  template<typename T>
  static inline const std::string& QuotaMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, QuotaMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function QuotaMode_Name.");
    return QuotaOperation_QuotaMode_Name(enum_t_value);
  }
  static inline bool QuotaMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      QuotaMode* value) {
    return QuotaOperation_QuotaMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kQuotaMetricsFieldNumber = 5,
    kOperationIdFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kConsumerIdFieldNumber = 3,
    kQuotaModeFieldNumber = 6,
  };
  // map<string, string> labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 5;
  int quota_metrics_size() const;
  private:
  int _internal_quota_metrics_size() const;
  public:
  void clear_quota_metrics();
  ::google::api::servicecontrol::v1::MetricValueSet* mutable_quota_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >*
      mutable_quota_metrics();
  private:
  const ::google::api::servicecontrol::v1::MetricValueSet& _internal_quota_metrics(int index) const;
  ::google::api::servicecontrol::v1::MetricValueSet* _internal_add_quota_metrics();
  public:
  const ::google::api::servicecontrol::v1::MetricValueSet& quota_metrics(int index) const;
  ::google::api::servicecontrol::v1::MetricValueSet* add_quota_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >&
      quota_metrics() const;

  // string operation_id = 1;
  void clear_operation_id();
  const std::string& operation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation_id();
  PROTOBUF_NODISCARD std::string* release_operation_id();
  void set_allocated_operation_id(std::string* operation_id);
  private:
  const std::string& _internal_operation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_id(const std::string& value);
  std::string* _internal_mutable_operation_id();
  public:

  // string method_name = 2;
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // string consumer_id = 3;
  void clear_consumer_id();
  const std::string& consumer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumer_id();
  PROTOBUF_NODISCARD std::string* release_consumer_id();
  void set_allocated_consumer_id(std::string* consumer_id);
  private:
  const std::string& _internal_consumer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumer_id(const std::string& value);
  std::string* _internal_mutable_consumer_id();
  public:

  // .google.api.servicecontrol.v1.QuotaOperation.QuotaMode quota_mode = 6;
  void clear_quota_mode();
  ::google::api::servicecontrol::v1::QuotaOperation_QuotaMode quota_mode() const;
  void set_quota_mode(::google::api::servicecontrol::v1::QuotaOperation_QuotaMode value);
  private:
  ::google::api::servicecontrol::v1::QuotaOperation_QuotaMode _internal_quota_mode() const;
  void _internal_set_quota_mode(::google::api::servicecontrol::v1::QuotaOperation_QuotaMode value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.QuotaOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        QuotaOperation_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet > quota_metrics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_id_;
    int quota_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class AllocateQuotaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.AllocateQuotaResponse) */ {
 public:
  inline AllocateQuotaResponse() : AllocateQuotaResponse(nullptr) {}
  ~AllocateQuotaResponse() override;
  explicit PROTOBUF_CONSTEXPR AllocateQuotaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllocateQuotaResponse(const AllocateQuotaResponse& from);
  AllocateQuotaResponse(AllocateQuotaResponse&& from) noexcept
    : AllocateQuotaResponse() {
    *this = ::std::move(from);
  }

  inline AllocateQuotaResponse& operator=(const AllocateQuotaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllocateQuotaResponse& operator=(AllocateQuotaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllocateQuotaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllocateQuotaResponse* internal_default_instance() {
    return reinterpret_cast<const AllocateQuotaResponse*>(
               &_AllocateQuotaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AllocateQuotaResponse& a, AllocateQuotaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AllocateQuotaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllocateQuotaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllocateQuotaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllocateQuotaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllocateQuotaResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllocateQuotaResponse& from) {
    AllocateQuotaResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateQuotaResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.AllocateQuotaResponse";
  }
  protected:
  explicit AllocateQuotaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllocateErrorsFieldNumber = 2,
    kQuotaMetricsFieldNumber = 3,
    kOperationIdFieldNumber = 1,
    kServiceConfigIdFieldNumber = 4,
  };
  // repeated .google.api.servicecontrol.v1.QuotaError allocate_errors = 2;
  int allocate_errors_size() const;
  private:
  int _internal_allocate_errors_size() const;
  public:
  void clear_allocate_errors();
  ::google::api::servicecontrol::v1::QuotaError* mutable_allocate_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::QuotaError >*
      mutable_allocate_errors();
  private:
  const ::google::api::servicecontrol::v1::QuotaError& _internal_allocate_errors(int index) const;
  ::google::api::servicecontrol::v1::QuotaError* _internal_add_allocate_errors();
  public:
  const ::google::api::servicecontrol::v1::QuotaError& allocate_errors(int index) const;
  ::google::api::servicecontrol::v1::QuotaError* add_allocate_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::QuotaError >&
      allocate_errors() const;

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 3;
  int quota_metrics_size() const;
  private:
  int _internal_quota_metrics_size() const;
  public:
  void clear_quota_metrics();
  ::google::api::servicecontrol::v1::MetricValueSet* mutable_quota_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >*
      mutable_quota_metrics();
  private:
  const ::google::api::servicecontrol::v1::MetricValueSet& _internal_quota_metrics(int index) const;
  ::google::api::servicecontrol::v1::MetricValueSet* _internal_add_quota_metrics();
  public:
  const ::google::api::servicecontrol::v1::MetricValueSet& quota_metrics(int index) const;
  ::google::api::servicecontrol::v1::MetricValueSet* add_quota_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >&
      quota_metrics() const;

  // string operation_id = 1;
  void clear_operation_id();
  const std::string& operation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation_id();
  PROTOBUF_NODISCARD std::string* release_operation_id();
  void set_allocated_operation_id(std::string* operation_id);
  private:
  const std::string& _internal_operation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_id(const std::string& value);
  std::string* _internal_mutable_operation_id();
  public:

  // string service_config_id = 4;
  void clear_service_config_id();
  const std::string& service_config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_config_id();
  PROTOBUF_NODISCARD std::string* release_service_config_id();
  void set_allocated_service_config_id(std::string* service_config_id);
  private:
  const std::string& _internal_service_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_config_id(const std::string& value);
  std::string* _internal_mutable_service_config_id();
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.AllocateQuotaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::QuotaError > allocate_errors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet > quota_metrics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_config_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class QuotaError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.QuotaError) */ {
 public:
  inline QuotaError() : QuotaError(nullptr) {}
  ~QuotaError() override;
  explicit PROTOBUF_CONSTEXPR QuotaError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuotaError(const QuotaError& from);
  QuotaError(QuotaError&& from) noexcept
    : QuotaError() {
    *this = ::std::move(from);
  }

  inline QuotaError& operator=(const QuotaError& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuotaError& operator=(QuotaError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuotaError& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuotaError* internal_default_instance() {
    return reinterpret_cast<const QuotaError*>(
               &_QuotaError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QuotaError& a, QuotaError& b) {
    a.Swap(&b);
  }
  inline void Swap(QuotaError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuotaError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuotaError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuotaError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuotaError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuotaError& from) {
    QuotaError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.QuotaError";
  }
  protected:
  explicit QuotaError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QuotaError_Code Code;
  static constexpr Code UNSPECIFIED =
    QuotaError_Code_UNSPECIFIED;
  static constexpr Code RESOURCE_EXHAUSTED =
    QuotaError_Code_RESOURCE_EXHAUSTED;
  static constexpr Code BILLING_NOT_ACTIVE =
    QuotaError_Code_BILLING_NOT_ACTIVE;
  static constexpr Code PROJECT_DELETED =
    QuotaError_Code_PROJECT_DELETED;
  static constexpr Code API_KEY_INVALID =
    QuotaError_Code_API_KEY_INVALID;
  static constexpr Code API_KEY_EXPIRED =
    QuotaError_Code_API_KEY_EXPIRED;
  static inline bool Code_IsValid(int value) {
    return QuotaError_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    QuotaError_Code_Code_MIN;
  static constexpr Code Code_MAX =
    QuotaError_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    QuotaError_Code_Code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Code_descriptor() {
    return QuotaError_Code_descriptor();
  }
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return QuotaError_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Code* value) {
    return QuotaError_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kStatusFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string subject = 2;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.rpc.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // .google.api.servicecontrol.v1.QuotaError.Code code = 1;
  void clear_code();
  ::google::api::servicecontrol::v1::QuotaError_Code code() const;
  void set_code(::google::api::servicecontrol::v1::QuotaError_Code value);
  private:
  ::google::api::servicecontrol::v1::QuotaError_Code _internal_code() const;
  void _internal_set_code(::google::api::servicecontrol::v1::QuotaError_Code value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.QuotaError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::google::rpc::Status* status_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AllocateQuotaRequest

// string service_name = 1;
inline void AllocateQuotaRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& AllocateQuotaRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.AllocateQuotaRequest.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllocateQuotaRequest::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.AllocateQuotaRequest.service_name)
}
inline std::string* AllocateQuotaRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.AllocateQuotaRequest.service_name)
  return _s;
}
inline const std::string& AllocateQuotaRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void AllocateQuotaRequest::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AllocateQuotaRequest::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AllocateQuotaRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.AllocateQuotaRequest.service_name)
  return _impl_.service_name_.Release();
}
inline void AllocateQuotaRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.AllocateQuotaRequest.service_name)
}

// .google.api.servicecontrol.v1.QuotaOperation allocate_operation = 2;
inline bool AllocateQuotaRequest::_internal_has_allocate_operation() const {
  return this != internal_default_instance() && _impl_.allocate_operation_ != nullptr;
}
inline bool AllocateQuotaRequest::has_allocate_operation() const {
  return _internal_has_allocate_operation();
}
inline void AllocateQuotaRequest::clear_allocate_operation() {
  if (GetArenaForAllocation() == nullptr && _impl_.allocate_operation_ != nullptr) {
    delete _impl_.allocate_operation_;
  }
  _impl_.allocate_operation_ = nullptr;
}
inline const ::google::api::servicecontrol::v1::QuotaOperation& AllocateQuotaRequest::_internal_allocate_operation() const {
  const ::google::api::servicecontrol::v1::QuotaOperation* p = _impl_.allocate_operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::servicecontrol::v1::QuotaOperation&>(
      ::google::api::servicecontrol::v1::_QuotaOperation_default_instance_);
}
inline const ::google::api::servicecontrol::v1::QuotaOperation& AllocateQuotaRequest::allocate_operation() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.AllocateQuotaRequest.allocate_operation)
  return _internal_allocate_operation();
}
inline void AllocateQuotaRequest::unsafe_arena_set_allocated_allocate_operation(
    ::google::api::servicecontrol::v1::QuotaOperation* allocate_operation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allocate_operation_);
  }
  _impl_.allocate_operation_ = allocate_operation;
  if (allocate_operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.AllocateQuotaRequest.allocate_operation)
}
inline ::google::api::servicecontrol::v1::QuotaOperation* AllocateQuotaRequest::release_allocate_operation() {
  
  ::google::api::servicecontrol::v1::QuotaOperation* temp = _impl_.allocate_operation_;
  _impl_.allocate_operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::servicecontrol::v1::QuotaOperation* AllocateQuotaRequest::unsafe_arena_release_allocate_operation() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.AllocateQuotaRequest.allocate_operation)
  
  ::google::api::servicecontrol::v1::QuotaOperation* temp = _impl_.allocate_operation_;
  _impl_.allocate_operation_ = nullptr;
  return temp;
}
inline ::google::api::servicecontrol::v1::QuotaOperation* AllocateQuotaRequest::_internal_mutable_allocate_operation() {
  
  if (_impl_.allocate_operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::QuotaOperation>(GetArenaForAllocation());
    _impl_.allocate_operation_ = p;
  }
  return _impl_.allocate_operation_;
}
inline ::google::api::servicecontrol::v1::QuotaOperation* AllocateQuotaRequest::mutable_allocate_operation() {
  ::google::api::servicecontrol::v1::QuotaOperation* _msg = _internal_mutable_allocate_operation();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.AllocateQuotaRequest.allocate_operation)
  return _msg;
}
inline void AllocateQuotaRequest::set_allocated_allocate_operation(::google::api::servicecontrol::v1::QuotaOperation* allocate_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.allocate_operation_;
  }
  if (allocate_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(allocate_operation);
    if (message_arena != submessage_arena) {
      allocate_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allocate_operation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.allocate_operation_ = allocate_operation;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.AllocateQuotaRequest.allocate_operation)
}

// string service_config_id = 4;
inline void AllocateQuotaRequest::clear_service_config_id() {
  _impl_.service_config_id_.ClearToEmpty();
}
inline const std::string& AllocateQuotaRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id)
  return _internal_service_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllocateQuotaRequest::set_service_config_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_config_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id)
}
inline std::string* AllocateQuotaRequest::mutable_service_config_id() {
  std::string* _s = _internal_mutable_service_config_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id)
  return _s;
}
inline const std::string& AllocateQuotaRequest::_internal_service_config_id() const {
  return _impl_.service_config_id_.Get();
}
inline void AllocateQuotaRequest::_internal_set_service_config_id(const std::string& value) {
  
  _impl_.service_config_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AllocateQuotaRequest::_internal_mutable_service_config_id() {
  
  return _impl_.service_config_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AllocateQuotaRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id)
  return _impl_.service_config_id_.Release();
}
inline void AllocateQuotaRequest::set_allocated_service_config_id(std::string* service_config_id) {
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  _impl_.service_config_id_.SetAllocated(service_config_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_config_id_.IsDefault()) {
    _impl_.service_config_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QuotaOperation

// string operation_id = 1;
inline void QuotaOperation::clear_operation_id() {
  _impl_.operation_id_.ClearToEmpty();
}
inline const std::string& QuotaOperation::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaOperation.operation_id)
  return _internal_operation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaOperation::set_operation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operation_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.QuotaOperation.operation_id)
}
inline std::string* QuotaOperation::mutable_operation_id() {
  std::string* _s = _internal_mutable_operation_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.QuotaOperation.operation_id)
  return _s;
}
inline const std::string& QuotaOperation::_internal_operation_id() const {
  return _impl_.operation_id_.Get();
}
inline void QuotaOperation::_internal_set_operation_id(const std::string& value) {
  
  _impl_.operation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaOperation::_internal_mutable_operation_id() {
  
  return _impl_.operation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaOperation::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.QuotaOperation.operation_id)
  return _impl_.operation_id_.Release();
}
inline void QuotaOperation::set_allocated_operation_id(std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  _impl_.operation_id_.SetAllocated(operation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operation_id_.IsDefault()) {
    _impl_.operation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.QuotaOperation.operation_id)
}

// string method_name = 2;
inline void QuotaOperation::clear_method_name() {
  _impl_.method_name_.ClearToEmpty();
}
inline const std::string& QuotaOperation::method_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaOperation.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaOperation::set_method_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.QuotaOperation.method_name)
}
inline std::string* QuotaOperation::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.QuotaOperation.method_name)
  return _s;
}
inline const std::string& QuotaOperation::_internal_method_name() const {
  return _impl_.method_name_.Get();
}
inline void QuotaOperation::_internal_set_method_name(const std::string& value) {
  
  _impl_.method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaOperation::_internal_mutable_method_name() {
  
  return _impl_.method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaOperation::release_method_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.QuotaOperation.method_name)
  return _impl_.method_name_.Release();
}
inline void QuotaOperation::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  _impl_.method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.QuotaOperation.method_name)
}

// string consumer_id = 3;
inline void QuotaOperation::clear_consumer_id() {
  _impl_.consumer_id_.ClearToEmpty();
}
inline const std::string& QuotaOperation::consumer_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaOperation.consumer_id)
  return _internal_consumer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaOperation::set_consumer_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consumer_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.QuotaOperation.consumer_id)
}
inline std::string* QuotaOperation::mutable_consumer_id() {
  std::string* _s = _internal_mutable_consumer_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.QuotaOperation.consumer_id)
  return _s;
}
inline const std::string& QuotaOperation::_internal_consumer_id() const {
  return _impl_.consumer_id_.Get();
}
inline void QuotaOperation::_internal_set_consumer_id(const std::string& value) {
  
  _impl_.consumer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaOperation::_internal_mutable_consumer_id() {
  
  return _impl_.consumer_id_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaOperation::release_consumer_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.QuotaOperation.consumer_id)
  return _impl_.consumer_id_.Release();
}
inline void QuotaOperation::set_allocated_consumer_id(std::string* consumer_id) {
  if (consumer_id != nullptr) {
    
  } else {
    
  }
  _impl_.consumer_id_.SetAllocated(consumer_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consumer_id_.IsDefault()) {
    _impl_.consumer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.QuotaOperation.consumer_id)
}

// map<string, string> labels = 4;
inline int QuotaOperation::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int QuotaOperation::labels_size() const {
  return _internal_labels_size();
}
inline void QuotaOperation::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QuotaOperation::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QuotaOperation::labels() const {
  // @@protoc_insertion_point(field_map:google.api.servicecontrol.v1.QuotaOperation.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QuotaOperation::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QuotaOperation::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.servicecontrol.v1.QuotaOperation.labels)
  return _internal_mutable_labels();
}

// repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 5;
inline int QuotaOperation::_internal_quota_metrics_size() const {
  return _impl_.quota_metrics_.size();
}
inline int QuotaOperation::quota_metrics_size() const {
  return _internal_quota_metrics_size();
}
inline ::google::api::servicecontrol::v1::MetricValueSet* QuotaOperation::mutable_quota_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.QuotaOperation.quota_metrics)
  return _impl_.quota_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >*
QuotaOperation::mutable_quota_metrics() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.QuotaOperation.quota_metrics)
  return &_impl_.quota_metrics_;
}
inline const ::google::api::servicecontrol::v1::MetricValueSet& QuotaOperation::_internal_quota_metrics(int index) const {
  return _impl_.quota_metrics_.Get(index);
}
inline const ::google::api::servicecontrol::v1::MetricValueSet& QuotaOperation::quota_metrics(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaOperation.quota_metrics)
  return _internal_quota_metrics(index);
}
inline ::google::api::servicecontrol::v1::MetricValueSet* QuotaOperation::_internal_add_quota_metrics() {
  return _impl_.quota_metrics_.Add();
}
inline ::google::api::servicecontrol::v1::MetricValueSet* QuotaOperation::add_quota_metrics() {
  ::google::api::servicecontrol::v1::MetricValueSet* _add = _internal_add_quota_metrics();
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.QuotaOperation.quota_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >&
QuotaOperation::quota_metrics() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.QuotaOperation.quota_metrics)
  return _impl_.quota_metrics_;
}

// .google.api.servicecontrol.v1.QuotaOperation.QuotaMode quota_mode = 6;
inline void QuotaOperation::clear_quota_mode() {
  _impl_.quota_mode_ = 0;
}
inline ::google::api::servicecontrol::v1::QuotaOperation_QuotaMode QuotaOperation::_internal_quota_mode() const {
  return static_cast< ::google::api::servicecontrol::v1::QuotaOperation_QuotaMode >(_impl_.quota_mode_);
}
inline ::google::api::servicecontrol::v1::QuotaOperation_QuotaMode QuotaOperation::quota_mode() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaOperation.quota_mode)
  return _internal_quota_mode();
}
inline void QuotaOperation::_internal_set_quota_mode(::google::api::servicecontrol::v1::QuotaOperation_QuotaMode value) {
  
  _impl_.quota_mode_ = value;
}
inline void QuotaOperation::set_quota_mode(::google::api::servicecontrol::v1::QuotaOperation_QuotaMode value) {
  _internal_set_quota_mode(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.QuotaOperation.quota_mode)
}

// -------------------------------------------------------------------

// AllocateQuotaResponse

// string operation_id = 1;
inline void AllocateQuotaResponse::clear_operation_id() {
  _impl_.operation_id_.ClearToEmpty();
}
inline const std::string& AllocateQuotaResponse::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id)
  return _internal_operation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllocateQuotaResponse::set_operation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operation_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id)
}
inline std::string* AllocateQuotaResponse::mutable_operation_id() {
  std::string* _s = _internal_mutable_operation_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id)
  return _s;
}
inline const std::string& AllocateQuotaResponse::_internal_operation_id() const {
  return _impl_.operation_id_.Get();
}
inline void AllocateQuotaResponse::_internal_set_operation_id(const std::string& value) {
  
  _impl_.operation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AllocateQuotaResponse::_internal_mutable_operation_id() {
  
  return _impl_.operation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AllocateQuotaResponse::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id)
  return _impl_.operation_id_.Release();
}
inline void AllocateQuotaResponse::set_allocated_operation_id(std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  _impl_.operation_id_.SetAllocated(operation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operation_id_.IsDefault()) {
    _impl_.operation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id)
}

// repeated .google.api.servicecontrol.v1.QuotaError allocate_errors = 2;
inline int AllocateQuotaResponse::_internal_allocate_errors_size() const {
  return _impl_.allocate_errors_.size();
}
inline int AllocateQuotaResponse::allocate_errors_size() const {
  return _internal_allocate_errors_size();
}
inline void AllocateQuotaResponse::clear_allocate_errors() {
  _impl_.allocate_errors_.Clear();
}
inline ::google::api::servicecontrol::v1::QuotaError* AllocateQuotaResponse::mutable_allocate_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.AllocateQuotaResponse.allocate_errors)
  return _impl_.allocate_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::QuotaError >*
AllocateQuotaResponse::mutable_allocate_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.AllocateQuotaResponse.allocate_errors)
  return &_impl_.allocate_errors_;
}
inline const ::google::api::servicecontrol::v1::QuotaError& AllocateQuotaResponse::_internal_allocate_errors(int index) const {
  return _impl_.allocate_errors_.Get(index);
}
inline const ::google::api::servicecontrol::v1::QuotaError& AllocateQuotaResponse::allocate_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.AllocateQuotaResponse.allocate_errors)
  return _internal_allocate_errors(index);
}
inline ::google::api::servicecontrol::v1::QuotaError* AllocateQuotaResponse::_internal_add_allocate_errors() {
  return _impl_.allocate_errors_.Add();
}
inline ::google::api::servicecontrol::v1::QuotaError* AllocateQuotaResponse::add_allocate_errors() {
  ::google::api::servicecontrol::v1::QuotaError* _add = _internal_add_allocate_errors();
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.AllocateQuotaResponse.allocate_errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::QuotaError >&
AllocateQuotaResponse::allocate_errors() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.AllocateQuotaResponse.allocate_errors)
  return _impl_.allocate_errors_;
}

// repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 3;
inline int AllocateQuotaResponse::_internal_quota_metrics_size() const {
  return _impl_.quota_metrics_.size();
}
inline int AllocateQuotaResponse::quota_metrics_size() const {
  return _internal_quota_metrics_size();
}
inline ::google::api::servicecontrol::v1::MetricValueSet* AllocateQuotaResponse::mutable_quota_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.AllocateQuotaResponse.quota_metrics)
  return _impl_.quota_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >*
AllocateQuotaResponse::mutable_quota_metrics() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.AllocateQuotaResponse.quota_metrics)
  return &_impl_.quota_metrics_;
}
inline const ::google::api::servicecontrol::v1::MetricValueSet& AllocateQuotaResponse::_internal_quota_metrics(int index) const {
  return _impl_.quota_metrics_.Get(index);
}
inline const ::google::api::servicecontrol::v1::MetricValueSet& AllocateQuotaResponse::quota_metrics(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.AllocateQuotaResponse.quota_metrics)
  return _internal_quota_metrics(index);
}
inline ::google::api::servicecontrol::v1::MetricValueSet* AllocateQuotaResponse::_internal_add_quota_metrics() {
  return _impl_.quota_metrics_.Add();
}
inline ::google::api::servicecontrol::v1::MetricValueSet* AllocateQuotaResponse::add_quota_metrics() {
  ::google::api::servicecontrol::v1::MetricValueSet* _add = _internal_add_quota_metrics();
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.AllocateQuotaResponse.quota_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >&
AllocateQuotaResponse::quota_metrics() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.AllocateQuotaResponse.quota_metrics)
  return _impl_.quota_metrics_;
}

// string service_config_id = 4;
inline void AllocateQuotaResponse::clear_service_config_id() {
  _impl_.service_config_id_.ClearToEmpty();
}
inline const std::string& AllocateQuotaResponse::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id)
  return _internal_service_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllocateQuotaResponse::set_service_config_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_config_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id)
}
inline std::string* AllocateQuotaResponse::mutable_service_config_id() {
  std::string* _s = _internal_mutable_service_config_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id)
  return _s;
}
inline const std::string& AllocateQuotaResponse::_internal_service_config_id() const {
  return _impl_.service_config_id_.Get();
}
inline void AllocateQuotaResponse::_internal_set_service_config_id(const std::string& value) {
  
  _impl_.service_config_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AllocateQuotaResponse::_internal_mutable_service_config_id() {
  
  return _impl_.service_config_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AllocateQuotaResponse::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id)
  return _impl_.service_config_id_.Release();
}
inline void AllocateQuotaResponse::set_allocated_service_config_id(std::string* service_config_id) {
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  _impl_.service_config_id_.SetAllocated(service_config_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_config_id_.IsDefault()) {
    _impl_.service_config_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id)
}

// -------------------------------------------------------------------

// QuotaError

// .google.api.servicecontrol.v1.QuotaError.Code code = 1;
inline void QuotaError::clear_code() {
  _impl_.code_ = 0;
}
inline ::google::api::servicecontrol::v1::QuotaError_Code QuotaError::_internal_code() const {
  return static_cast< ::google::api::servicecontrol::v1::QuotaError_Code >(_impl_.code_);
}
inline ::google::api::servicecontrol::v1::QuotaError_Code QuotaError::code() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaError.code)
  return _internal_code();
}
inline void QuotaError::_internal_set_code(::google::api::servicecontrol::v1::QuotaError_Code value) {
  
  _impl_.code_ = value;
}
inline void QuotaError::set_code(::google::api::servicecontrol::v1::QuotaError_Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.QuotaError.code)
}

// string subject = 2;
inline void QuotaError::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& QuotaError::subject() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaError.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaError::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.QuotaError.subject)
}
inline std::string* QuotaError::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.QuotaError.subject)
  return _s;
}
inline const std::string& QuotaError::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void QuotaError::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaError::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaError::release_subject() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.QuotaError.subject)
  return _impl_.subject_.Release();
}
inline void QuotaError::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.QuotaError.subject)
}

// string description = 3;
inline void QuotaError::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& QuotaError::description() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaError.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaError::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.QuotaError.description)
}
inline std::string* QuotaError::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.QuotaError.description)
  return _s;
}
inline const std::string& QuotaError::_internal_description() const {
  return _impl_.description_.Get();
}
inline void QuotaError::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaError::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaError::release_description() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.QuotaError.description)
  return _impl_.description_.Release();
}
inline void QuotaError::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.QuotaError.description)
}

// .google.rpc.Status status = 4;
inline bool QuotaError::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool QuotaError::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& QuotaError::_internal_status() const {
  const ::google::rpc::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& QuotaError::status() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.QuotaError.status)
  return _internal_status();
}
inline void QuotaError::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.QuotaError.status)
}
inline ::google::rpc::Status* QuotaError::release_status() {
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* QuotaError::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.QuotaError.status)
  
  ::google::rpc::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* QuotaError::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::google::rpc::Status* QuotaError::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.QuotaError.status)
  return _msg;
}
inline void QuotaError::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.QuotaError.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::servicecontrol::v1::QuotaOperation_QuotaMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::servicecontrol::v1::QuotaOperation_QuotaMode>() {
  return ::google::api::servicecontrol::v1::QuotaOperation_QuotaMode_descriptor();
}
template <> struct is_proto_enum< ::google::api::servicecontrol::v1::QuotaError_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::servicecontrol::v1::QuotaError_Code>() {
  return ::google::api::servicecontrol::v1::QuotaError_Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto

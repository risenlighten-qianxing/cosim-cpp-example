// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/operation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/servicecontrol/v1/log_entry.pb.h"
#include "google/api/servicecontrol/v1/metric_value.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Operation_LabelsEntry_DoNotUse;
struct Operation_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Operation_LabelsEntry_DoNotUseDefaultTypeInternal _Operation_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::servicecontrol::v1::Operation* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::Operation>(Arena*);
template<> ::google::api::servicecontrol::v1::Operation_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::Operation_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

enum Operation_Importance : int {
  Operation_Importance_LOW = 0,
  Operation_Importance_HIGH = 1,
  Operation_Importance_Operation_Importance_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Operation_Importance_Operation_Importance_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Operation_Importance_IsValid(int value);
constexpr Operation_Importance Operation_Importance_Importance_MIN = Operation_Importance_LOW;
constexpr Operation_Importance Operation_Importance_Importance_MAX = Operation_Importance_HIGH;
constexpr int Operation_Importance_Importance_ARRAYSIZE = Operation_Importance_Importance_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_Importance_descriptor();
template<typename T>
inline const std::string& Operation_Importance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation_Importance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_Importance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_Importance_descriptor(), enum_t_value);
}
inline bool Operation_Importance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operation_Importance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation_Importance>(
    Operation_Importance_descriptor(), name, value);
}
// ===================================================================

class Operation_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Operation_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Operation_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Operation_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Operation_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Operation_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Operation_LabelsEntry_DoNotUse& other);
  static const Operation_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Operation_LabelsEntry_DoNotUse*>(&_Operation_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v1.Operation.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v1.Operation.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto;
};

// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit PROTOBUF_CONSTEXPR Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Operation& from) {
    Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Operation_Importance Importance;
  static constexpr Importance LOW =
    Operation_Importance_LOW;
  static constexpr Importance HIGH =
    Operation_Importance_HIGH;
  static inline bool Importance_IsValid(int value) {
    return Operation_Importance_IsValid(value);
  }
  static constexpr Importance Importance_MIN =
    Operation_Importance_Importance_MIN;
  static constexpr Importance Importance_MAX =
    Operation_Importance_Importance_MAX;
  static constexpr int Importance_ARRAYSIZE =
    Operation_Importance_Importance_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Importance_descriptor() {
    return Operation_Importance_descriptor();
  }
  template<typename T>
  static inline const std::string& Importance_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Importance>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Importance_Name.");
    return Operation_Importance_Name(enum_t_value);
  }
  static inline bool Importance_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Importance* value) {
    return Operation_Importance_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 6,
    kMetricValueSetsFieldNumber = 7,
    kLogEntriesFieldNumber = 8,
    kExtensionsFieldNumber = 16,
    kOperationIdFieldNumber = 1,
    kOperationNameFieldNumber = 2,
    kConsumerIdFieldNumber = 3,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
    kImportanceFieldNumber = 11,
  };
  // map<string, string> labels = 6;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // repeated .google.api.servicecontrol.v1.MetricValueSet metric_value_sets = 7;
  int metric_value_sets_size() const;
  private:
  int _internal_metric_value_sets_size() const;
  public:
  void clear_metric_value_sets();
  ::google::api::servicecontrol::v1::MetricValueSet* mutable_metric_value_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >*
      mutable_metric_value_sets();
  private:
  const ::google::api::servicecontrol::v1::MetricValueSet& _internal_metric_value_sets(int index) const;
  ::google::api::servicecontrol::v1::MetricValueSet* _internal_add_metric_value_sets();
  public:
  const ::google::api::servicecontrol::v1::MetricValueSet& metric_value_sets(int index) const;
  ::google::api::servicecontrol::v1::MetricValueSet* add_metric_value_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >&
      metric_value_sets() const;

  // repeated .google.api.servicecontrol.v1.LogEntry log_entries = 8;
  int log_entries_size() const;
  private:
  int _internal_log_entries_size() const;
  public:
  void clear_log_entries();
  ::google::api::servicecontrol::v1::LogEntry* mutable_log_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::LogEntry >*
      mutable_log_entries();
  private:
  const ::google::api::servicecontrol::v1::LogEntry& _internal_log_entries(int index) const;
  ::google::api::servicecontrol::v1::LogEntry* _internal_add_log_entries();
  public:
  const ::google::api::servicecontrol::v1::LogEntry& log_entries(int index) const;
  ::google::api::servicecontrol::v1::LogEntry* add_log_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::LogEntry >&
      log_entries() const;

  // repeated .google.protobuf.Any extensions = 16;
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_extensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_extensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_extensions(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_extensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& extensions(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_extensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      extensions() const;

  // string operation_id = 1;
  void clear_operation_id();
  const std::string& operation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation_id();
  PROTOBUF_NODISCARD std::string* release_operation_id();
  void set_allocated_operation_id(std::string* operation_id);
  private:
  const std::string& _internal_operation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_id(const std::string& value);
  std::string* _internal_mutable_operation_id();
  public:

  // string operation_name = 2;
  void clear_operation_name();
  const std::string& operation_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation_name();
  PROTOBUF_NODISCARD std::string* release_operation_name();
  void set_allocated_operation_name(std::string* operation_name);
  private:
  const std::string& _internal_operation_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_name(const std::string& value);
  std::string* _internal_mutable_operation_name();
  public:

  // string consumer_id = 3;
  void clear_consumer_id();
  const std::string& consumer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumer_id();
  PROTOBUF_NODISCARD std::string* release_consumer_id();
  void set_allocated_consumer_id(std::string* consumer_id);
  private:
  const std::string& _internal_consumer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumer_id(const std::string& value);
  std::string* _internal_mutable_consumer_id();
  public:

  // .google.protobuf.Timestamp start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .google.api.servicecontrol.v1.Operation.Importance importance = 11;
  void clear_importance();
  ::google::api::servicecontrol::v1::Operation_Importance importance() const;
  void set_importance(::google::api::servicecontrol::v1::Operation_Importance value);
  private:
  ::google::api::servicecontrol::v1::Operation_Importance _internal_importance() const;
  void _internal_set_importance(::google::api::servicecontrol::v1::Operation_Importance value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Operation_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet > metric_value_sets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::LogEntry > log_entries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > extensions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    int importance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Operation

// string operation_id = 1;
inline void Operation::clear_operation_id() {
  _impl_.operation_id_.ClearToEmpty();
}
inline const std::string& Operation::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.operation_id)
  return _internal_operation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_operation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operation_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.Operation.operation_id)
}
inline std::string* Operation::mutable_operation_id() {
  std::string* _s = _internal_mutable_operation_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.Operation.operation_id)
  return _s;
}
inline const std::string& Operation::_internal_operation_id() const {
  return _impl_.operation_id_.Get();
}
inline void Operation::_internal_set_operation_id(const std::string& value) {
  
  _impl_.operation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_operation_id() {
  
  return _impl_.operation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.Operation.operation_id)
  return _impl_.operation_id_.Release();
}
inline void Operation::set_allocated_operation_id(std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  _impl_.operation_id_.SetAllocated(operation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operation_id_.IsDefault()) {
    _impl_.operation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.Operation.operation_id)
}

// string operation_name = 2;
inline void Operation::clear_operation_name() {
  _impl_.operation_name_.ClearToEmpty();
}
inline const std::string& Operation::operation_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.operation_name)
  return _internal_operation_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_operation_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operation_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.Operation.operation_name)
}
inline std::string* Operation::mutable_operation_name() {
  std::string* _s = _internal_mutable_operation_name();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.Operation.operation_name)
  return _s;
}
inline const std::string& Operation::_internal_operation_name() const {
  return _impl_.operation_name_.Get();
}
inline void Operation::_internal_set_operation_name(const std::string& value) {
  
  _impl_.operation_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_operation_name() {
  
  return _impl_.operation_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_operation_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.Operation.operation_name)
  return _impl_.operation_name_.Release();
}
inline void Operation::set_allocated_operation_name(std::string* operation_name) {
  if (operation_name != nullptr) {
    
  } else {
    
  }
  _impl_.operation_name_.SetAllocated(operation_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operation_name_.IsDefault()) {
    _impl_.operation_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.Operation.operation_name)
}

// string consumer_id = 3;
inline void Operation::clear_consumer_id() {
  _impl_.consumer_id_.ClearToEmpty();
}
inline const std::string& Operation::consumer_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.consumer_id)
  return _internal_consumer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_consumer_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consumer_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.Operation.consumer_id)
}
inline std::string* Operation::mutable_consumer_id() {
  std::string* _s = _internal_mutable_consumer_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.Operation.consumer_id)
  return _s;
}
inline const std::string& Operation::_internal_consumer_id() const {
  return _impl_.consumer_id_.Get();
}
inline void Operation::_internal_set_consumer_id(const std::string& value) {
  
  _impl_.consumer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_consumer_id() {
  
  return _impl_.consumer_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_consumer_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.Operation.consumer_id)
  return _impl_.consumer_id_.Release();
}
inline void Operation::set_allocated_consumer_id(std::string* consumer_id) {
  if (consumer_id != nullptr) {
    
  } else {
    
  }
  _impl_.consumer_id_.SetAllocated(consumer_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consumer_id_.IsDefault()) {
    _impl_.consumer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.Operation.consumer_id)
}

// .google.protobuf.Timestamp start_time = 4;
inline bool Operation::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool Operation::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::start_time() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.start_time)
  return _internal_start_time();
}
inline void Operation::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.Operation.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.Operation.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.Operation.start_time)
  return _msg;
}
inline void Operation::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.Operation.start_time)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool Operation::_internal_has_end_time() const {
  return this != internal_default_instance() && _impl_.end_time_ != nullptr;
}
inline bool Operation::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::end_time() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.end_time)
  return _internal_end_time();
}
inline void Operation::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.Operation.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.Operation.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::_internal_mutable_end_time() {
  
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.Operation.end_time)
  return _msg;
}
inline void Operation::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.Operation.end_time)
}

// map<string, string> labels = 6;
inline int Operation::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Operation::labels_size() const {
  return _internal_labels_size();
}
inline void Operation::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Operation::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Operation::labels() const {
  // @@protoc_insertion_point(field_map:google.api.servicecontrol.v1.Operation.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Operation::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Operation::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.servicecontrol.v1.Operation.labels)
  return _internal_mutable_labels();
}

// repeated .google.api.servicecontrol.v1.MetricValueSet metric_value_sets = 7;
inline int Operation::_internal_metric_value_sets_size() const {
  return _impl_.metric_value_sets_.size();
}
inline int Operation::metric_value_sets_size() const {
  return _internal_metric_value_sets_size();
}
inline ::google::api::servicecontrol::v1::MetricValueSet* Operation::mutable_metric_value_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.Operation.metric_value_sets)
  return _impl_.metric_value_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >*
Operation::mutable_metric_value_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.Operation.metric_value_sets)
  return &_impl_.metric_value_sets_;
}
inline const ::google::api::servicecontrol::v1::MetricValueSet& Operation::_internal_metric_value_sets(int index) const {
  return _impl_.metric_value_sets_.Get(index);
}
inline const ::google::api::servicecontrol::v1::MetricValueSet& Operation::metric_value_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.metric_value_sets)
  return _internal_metric_value_sets(index);
}
inline ::google::api::servicecontrol::v1::MetricValueSet* Operation::_internal_add_metric_value_sets() {
  return _impl_.metric_value_sets_.Add();
}
inline ::google::api::servicecontrol::v1::MetricValueSet* Operation::add_metric_value_sets() {
  ::google::api::servicecontrol::v1::MetricValueSet* _add = _internal_add_metric_value_sets();
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.Operation.metric_value_sets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::MetricValueSet >&
Operation::metric_value_sets() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.Operation.metric_value_sets)
  return _impl_.metric_value_sets_;
}

// repeated .google.api.servicecontrol.v1.LogEntry log_entries = 8;
inline int Operation::_internal_log_entries_size() const {
  return _impl_.log_entries_.size();
}
inline int Operation::log_entries_size() const {
  return _internal_log_entries_size();
}
inline ::google::api::servicecontrol::v1::LogEntry* Operation::mutable_log_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.Operation.log_entries)
  return _impl_.log_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::LogEntry >*
Operation::mutable_log_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.Operation.log_entries)
  return &_impl_.log_entries_;
}
inline const ::google::api::servicecontrol::v1::LogEntry& Operation::_internal_log_entries(int index) const {
  return _impl_.log_entries_.Get(index);
}
inline const ::google::api::servicecontrol::v1::LogEntry& Operation::log_entries(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.log_entries)
  return _internal_log_entries(index);
}
inline ::google::api::servicecontrol::v1::LogEntry* Operation::_internal_add_log_entries() {
  return _impl_.log_entries_.Add();
}
inline ::google::api::servicecontrol::v1::LogEntry* Operation::add_log_entries() {
  ::google::api::servicecontrol::v1::LogEntry* _add = _internal_add_log_entries();
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.Operation.log_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::LogEntry >&
Operation::log_entries() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.Operation.log_entries)
  return _impl_.log_entries_;
}

// .google.api.servicecontrol.v1.Operation.Importance importance = 11;
inline void Operation::clear_importance() {
  _impl_.importance_ = 0;
}
inline ::google::api::servicecontrol::v1::Operation_Importance Operation::_internal_importance() const {
  return static_cast< ::google::api::servicecontrol::v1::Operation_Importance >(_impl_.importance_);
}
inline ::google::api::servicecontrol::v1::Operation_Importance Operation::importance() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.importance)
  return _internal_importance();
}
inline void Operation::_internal_set_importance(::google::api::servicecontrol::v1::Operation_Importance value) {
  
  _impl_.importance_ = value;
}
inline void Operation::set_importance(::google::api::servicecontrol::v1::Operation_Importance value) {
  _internal_set_importance(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.Operation.importance)
}

// repeated .google.protobuf.Any extensions = 16;
inline int Operation::_internal_extensions_size() const {
  return _impl_.extensions_.size();
}
inline int Operation::extensions_size() const {
  return _internal_extensions_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Operation::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.Operation.extensions)
  return _impl_.extensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
Operation::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.Operation.extensions)
  return &_impl_.extensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Operation::_internal_extensions(int index) const {
  return _impl_.extensions_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Operation::extensions(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.Operation.extensions)
  return _internal_extensions(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Operation::_internal_add_extensions() {
  return _impl_.extensions_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Operation::add_extensions() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_extensions();
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.Operation.extensions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
Operation::extensions() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.Operation.extensions)
  return _impl_.extensions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::servicecontrol::v1::Operation_Importance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::servicecontrol::v1::Operation_Importance>() {
  return ::google::api::servicecontrol::v1::Operation_Importance_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto

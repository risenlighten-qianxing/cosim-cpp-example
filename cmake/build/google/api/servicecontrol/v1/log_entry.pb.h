// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/log_entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/servicecontrol/v1/http_request.pb.h"
#include "google/logging/type/log_severity.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class LogEntryOperation;
struct LogEntryOperationDefaultTypeInternal;
extern LogEntryOperationDefaultTypeInternal _LogEntryOperation_default_instance_;
class LogEntrySourceLocation;
struct LogEntrySourceLocationDefaultTypeInternal;
extern LogEntrySourceLocationDefaultTypeInternal _LogEntrySourceLocation_default_instance_;
class LogEntry_LabelsEntry_DoNotUse;
struct LogEntry_LabelsEntry_DoNotUseDefaultTypeInternal;
extern LogEntry_LabelsEntry_DoNotUseDefaultTypeInternal _LogEntry_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::servicecontrol::v1::LogEntry* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::LogEntry>(Arena*);
template<> ::google::api::servicecontrol::v1::LogEntryOperation* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::LogEntryOperation>(Arena*);
template<> ::google::api::servicecontrol::v1::LogEntrySourceLocation* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::LogEntrySourceLocation>(Arena*);
template<> ::google::api::servicecontrol::v1::LogEntry_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::LogEntry_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

// ===================================================================

class LogEntry_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogEntry_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogEntry_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LogEntry_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR LogEntry_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LogEntry_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LogEntry_LabelsEntry_DoNotUse& other);
  static const LogEntry_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LogEntry_LabelsEntry_DoNotUse*>(&_LogEntry_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v1.LogEntry.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v1.LogEntry.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto;
};

// -------------------------------------------------------------------

class LogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() override;
  explicit PROTOBUF_CONSTEXPR LogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kProtoPayload = 2,
    kTextPayload = 3,
    kStructPayload = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogEntry& from) {
    LogEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 13,
    kInsertIdFieldNumber = 4,
    kNameFieldNumber = 10,
    kTraceFieldNumber = 15,
    kTimestampFieldNumber = 11,
    kHttpRequestFieldNumber = 14,
    kOperationFieldNumber = 16,
    kSourceLocationFieldNumber = 17,
    kSeverityFieldNumber = 12,
    kProtoPayloadFieldNumber = 2,
    kTextPayloadFieldNumber = 3,
    kStructPayloadFieldNumber = 6,
  };
  // map<string, string> labels = 13;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string insert_id = 4;
  void clear_insert_id();
  const std::string& insert_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_id();
  PROTOBUF_NODISCARD std::string* release_insert_id();
  void set_allocated_insert_id(std::string* insert_id);
  private:
  const std::string& _internal_insert_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_id(const std::string& value);
  std::string* _internal_mutable_insert_id();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string trace = 15;
  void clear_trace();
  const std::string& trace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trace();
  PROTOBUF_NODISCARD std::string* release_trace();
  void set_allocated_trace(std::string* trace);
  private:
  const std::string& _internal_trace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace(const std::string& value);
  std::string* _internal_mutable_trace();
  public:

  // .google.protobuf.Timestamp timestamp = 11;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .google.api.servicecontrol.v1.HttpRequest http_request = 14;
  bool has_http_request() const;
  private:
  bool _internal_has_http_request() const;
  public:
  void clear_http_request();
  const ::google::api::servicecontrol::v1::HttpRequest& http_request() const;
  PROTOBUF_NODISCARD ::google::api::servicecontrol::v1::HttpRequest* release_http_request();
  ::google::api::servicecontrol::v1::HttpRequest* mutable_http_request();
  void set_allocated_http_request(::google::api::servicecontrol::v1::HttpRequest* http_request);
  private:
  const ::google::api::servicecontrol::v1::HttpRequest& _internal_http_request() const;
  ::google::api::servicecontrol::v1::HttpRequest* _internal_mutable_http_request();
  public:
  void unsafe_arena_set_allocated_http_request(
      ::google::api::servicecontrol::v1::HttpRequest* http_request);
  ::google::api::servicecontrol::v1::HttpRequest* unsafe_arena_release_http_request();

  // .google.api.servicecontrol.v1.LogEntryOperation operation = 16;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const ::google::api::servicecontrol::v1::LogEntryOperation& operation() const;
  PROTOBUF_NODISCARD ::google::api::servicecontrol::v1::LogEntryOperation* release_operation();
  ::google::api::servicecontrol::v1::LogEntryOperation* mutable_operation();
  void set_allocated_operation(::google::api::servicecontrol::v1::LogEntryOperation* operation);
  private:
  const ::google::api::servicecontrol::v1::LogEntryOperation& _internal_operation() const;
  ::google::api::servicecontrol::v1::LogEntryOperation* _internal_mutable_operation();
  public:
  void unsafe_arena_set_allocated_operation(
      ::google::api::servicecontrol::v1::LogEntryOperation* operation);
  ::google::api::servicecontrol::v1::LogEntryOperation* unsafe_arena_release_operation();

  // .google.api.servicecontrol.v1.LogEntrySourceLocation source_location = 17;
  bool has_source_location() const;
  private:
  bool _internal_has_source_location() const;
  public:
  void clear_source_location();
  const ::google::api::servicecontrol::v1::LogEntrySourceLocation& source_location() const;
  PROTOBUF_NODISCARD ::google::api::servicecontrol::v1::LogEntrySourceLocation* release_source_location();
  ::google::api::servicecontrol::v1::LogEntrySourceLocation* mutable_source_location();
  void set_allocated_source_location(::google::api::servicecontrol::v1::LogEntrySourceLocation* source_location);
  private:
  const ::google::api::servicecontrol::v1::LogEntrySourceLocation& _internal_source_location() const;
  ::google::api::servicecontrol::v1::LogEntrySourceLocation* _internal_mutable_source_location();
  public:
  void unsafe_arena_set_allocated_source_location(
      ::google::api::servicecontrol::v1::LogEntrySourceLocation* source_location);
  ::google::api::servicecontrol::v1::LogEntrySourceLocation* unsafe_arena_release_source_location();

  // .google.logging.type.LogSeverity severity = 12;
  void clear_severity();
  ::google::logging::type::LogSeverity severity() const;
  void set_severity(::google::logging::type::LogSeverity value);
  private:
  ::google::logging::type::LogSeverity _internal_severity() const;
  void _internal_set_severity(::google::logging::type::LogSeverity value);
  public:

  // .google.protobuf.Any proto_payload = 2;
  bool has_proto_payload() const;
  private:
  bool _internal_has_proto_payload() const;
  public:
  void clear_proto_payload();
  const ::PROTOBUF_NAMESPACE_ID::Any& proto_payload() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_proto_payload();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_proto_payload();
  void set_allocated_proto_payload(::PROTOBUF_NAMESPACE_ID::Any* proto_payload);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_proto_payload() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_proto_payload();
  public:
  void unsafe_arena_set_allocated_proto_payload(
      ::PROTOBUF_NAMESPACE_ID::Any* proto_payload);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_proto_payload();

  // string text_payload = 3;
  bool has_text_payload() const;
  private:
  bool _internal_has_text_payload() const;
  public:
  void clear_text_payload();
  const std::string& text_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_payload();
  PROTOBUF_NODISCARD std::string* release_text_payload();
  void set_allocated_text_payload(std::string* text_payload);
  private:
  const std::string& _internal_text_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_payload(const std::string& value);
  std::string* _internal_mutable_text_payload();
  public:

  // .google.protobuf.Struct struct_payload = 6;
  bool has_struct_payload() const;
  private:
  bool _internal_has_struct_payload() const;
  public:
  void clear_struct_payload();
  const ::PROTOBUF_NAMESPACE_ID::Struct& struct_payload() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_struct_payload();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_struct_payload();
  void set_allocated_struct_payload(::PROTOBUF_NAMESPACE_ID::Struct* struct_payload);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_struct_payload() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_struct_payload();
  public:
  void unsafe_arena_set_allocated_struct_payload(
      ::PROTOBUF_NAMESPACE_ID::Struct* struct_payload);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_struct_payload();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.LogEntry)
 private:
  class _Internal;
  void set_has_proto_payload();
  void set_has_text_payload();
  void set_has_struct_payload();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        LogEntry_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::google::api::servicecontrol::v1::HttpRequest* http_request_;
    ::google::api::servicecontrol::v1::LogEntryOperation* operation_;
    ::google::api::servicecontrol::v1::LogEntrySourceLocation* source_location_;
    int severity_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::Any* proto_payload_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_payload_;
      ::PROTOBUF_NAMESPACE_ID::Struct* struct_payload_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto;
};
// -------------------------------------------------------------------

class LogEntryOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.LogEntryOperation) */ {
 public:
  inline LogEntryOperation() : LogEntryOperation(nullptr) {}
  ~LogEntryOperation() override;
  explicit PROTOBUF_CONSTEXPR LogEntryOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntryOperation(const LogEntryOperation& from);
  LogEntryOperation(LogEntryOperation&& from) noexcept
    : LogEntryOperation() {
    *this = ::std::move(from);
  }

  inline LogEntryOperation& operator=(const LogEntryOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntryOperation& operator=(LogEntryOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntryOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntryOperation* internal_default_instance() {
    return reinterpret_cast<const LogEntryOperation*>(
               &_LogEntryOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogEntryOperation& a, LogEntryOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntryOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntryOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntryOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntryOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntryOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogEntryOperation& from) {
    LogEntryOperation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntryOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.LogEntryOperation";
  }
  protected:
  explicit LogEntryOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProducerFieldNumber = 2,
    kFirstFieldNumber = 3,
    kLastFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string producer = 2;
  void clear_producer();
  const std::string& producer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_producer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_producer();
  PROTOBUF_NODISCARD std::string* release_producer();
  void set_allocated_producer(std::string* producer);
  private:
  const std::string& _internal_producer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer(const std::string& value);
  std::string* _internal_mutable_producer();
  public:

  // bool first = 3;
  void clear_first();
  bool first() const;
  void set_first(bool value);
  private:
  bool _internal_first() const;
  void _internal_set_first(bool value);
  public:

  // bool last = 4;
  void clear_last();
  bool last() const;
  void set_last(bool value);
  private:
  bool _internal_last() const;
  void _internal_set_last(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.LogEntryOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_;
    bool first_;
    bool last_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto;
};
// -------------------------------------------------------------------

class LogEntrySourceLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.LogEntrySourceLocation) */ {
 public:
  inline LogEntrySourceLocation() : LogEntrySourceLocation(nullptr) {}
  ~LogEntrySourceLocation() override;
  explicit PROTOBUF_CONSTEXPR LogEntrySourceLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntrySourceLocation(const LogEntrySourceLocation& from);
  LogEntrySourceLocation(LogEntrySourceLocation&& from) noexcept
    : LogEntrySourceLocation() {
    *this = ::std::move(from);
  }

  inline LogEntrySourceLocation& operator=(const LogEntrySourceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntrySourceLocation& operator=(LogEntrySourceLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntrySourceLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntrySourceLocation* internal_default_instance() {
    return reinterpret_cast<const LogEntrySourceLocation*>(
               &_LogEntrySourceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogEntrySourceLocation& a, LogEntrySourceLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntrySourceLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntrySourceLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntrySourceLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntrySourceLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntrySourceLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogEntrySourceLocation& from) {
    LogEntrySourceLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntrySourceLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.LogEntrySourceLocation";
  }
  protected:
  explicit LogEntrySourceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kFunctionFieldNumber = 3,
    kLineFieldNumber = 2,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string function = 3;
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // int64 line = 2;
  void clear_line();
  int64_t line() const;
  void set_line(int64_t value);
  private:
  int64_t _internal_line() const;
  void _internal_set_line(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.LogEntrySourceLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
    int64_t line_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogEntry

// string name = 10;
inline void LogEntry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LogEntry::name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.name)
}
inline std::string* LogEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.name)
  return _s;
}
inline const std::string& LogEntry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LogEntry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntry::release_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.name)
  return _impl_.name_.Release();
}
inline void LogEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.name)
}

// .google.protobuf.Timestamp timestamp = 11;
inline bool LogEntry::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool LogEntry::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogEntry::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.timestamp)
  return _internal_timestamp();
}
inline void LogEntry::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.LogEntry.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.timestamp)
  return _msg;
}
inline void LogEntry::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.timestamp)
}

// .google.logging.type.LogSeverity severity = 12;
inline void LogEntry::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::google::logging::type::LogSeverity LogEntry::_internal_severity() const {
  return static_cast< ::google::logging::type::LogSeverity >(_impl_.severity_);
}
inline ::google::logging::type::LogSeverity LogEntry::severity() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.severity)
  return _internal_severity();
}
inline void LogEntry::_internal_set_severity(::google::logging::type::LogSeverity value) {
  
  _impl_.severity_ = value;
}
inline void LogEntry::set_severity(::google::logging::type::LogSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.severity)
}

// .google.api.servicecontrol.v1.HttpRequest http_request = 14;
inline bool LogEntry::_internal_has_http_request() const {
  return this != internal_default_instance() && _impl_.http_request_ != nullptr;
}
inline bool LogEntry::has_http_request() const {
  return _internal_has_http_request();
}
inline const ::google::api::servicecontrol::v1::HttpRequest& LogEntry::_internal_http_request() const {
  const ::google::api::servicecontrol::v1::HttpRequest* p = _impl_.http_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::servicecontrol::v1::HttpRequest&>(
      ::google::api::servicecontrol::v1::_HttpRequest_default_instance_);
}
inline const ::google::api::servicecontrol::v1::HttpRequest& LogEntry::http_request() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.http_request)
  return _internal_http_request();
}
inline void LogEntry::unsafe_arena_set_allocated_http_request(
    ::google::api::servicecontrol::v1::HttpRequest* http_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.http_request_);
  }
  _impl_.http_request_ = http_request;
  if (http_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.LogEntry.http_request)
}
inline ::google::api::servicecontrol::v1::HttpRequest* LogEntry::release_http_request() {
  
  ::google::api::servicecontrol::v1::HttpRequest* temp = _impl_.http_request_;
  _impl_.http_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::servicecontrol::v1::HttpRequest* LogEntry::unsafe_arena_release_http_request() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.http_request)
  
  ::google::api::servicecontrol::v1::HttpRequest* temp = _impl_.http_request_;
  _impl_.http_request_ = nullptr;
  return temp;
}
inline ::google::api::servicecontrol::v1::HttpRequest* LogEntry::_internal_mutable_http_request() {
  
  if (_impl_.http_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::HttpRequest>(GetArenaForAllocation());
    _impl_.http_request_ = p;
  }
  return _impl_.http_request_;
}
inline ::google::api::servicecontrol::v1::HttpRequest* LogEntry::mutable_http_request() {
  ::google::api::servicecontrol::v1::HttpRequest* _msg = _internal_mutable_http_request();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.http_request)
  return _msg;
}
inline void LogEntry::set_allocated_http_request(::google::api::servicecontrol::v1::HttpRequest* http_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.http_request_);
  }
  if (http_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_request));
    if (message_arena != submessage_arena) {
      http_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.http_request_ = http_request;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.http_request)
}

// string trace = 15;
inline void LogEntry::clear_trace() {
  _impl_.trace_.ClearToEmpty();
}
inline const std::string& LogEntry::trace() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.trace)
  return _internal_trace();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_trace(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trace_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.trace)
}
inline std::string* LogEntry::mutable_trace() {
  std::string* _s = _internal_mutable_trace();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.trace)
  return _s;
}
inline const std::string& LogEntry::_internal_trace() const {
  return _impl_.trace_.Get();
}
inline void LogEntry::_internal_set_trace(const std::string& value) {
  
  _impl_.trace_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_trace() {
  
  return _impl_.trace_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntry::release_trace() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.trace)
  return _impl_.trace_.Release();
}
inline void LogEntry::set_allocated_trace(std::string* trace) {
  if (trace != nullptr) {
    
  } else {
    
  }
  _impl_.trace_.SetAllocated(trace, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trace_.IsDefault()) {
    _impl_.trace_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.trace)
}

// string insert_id = 4;
inline void LogEntry::clear_insert_id() {
  _impl_.insert_id_.ClearToEmpty();
}
inline const std::string& LogEntry::insert_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.insert_id)
  return _internal_insert_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_insert_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.insert_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.insert_id)
}
inline std::string* LogEntry::mutable_insert_id() {
  std::string* _s = _internal_mutable_insert_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.insert_id)
  return _s;
}
inline const std::string& LogEntry::_internal_insert_id() const {
  return _impl_.insert_id_.Get();
}
inline void LogEntry::_internal_set_insert_id(const std::string& value) {
  
  _impl_.insert_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_insert_id() {
  
  return _impl_.insert_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntry::release_insert_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.insert_id)
  return _impl_.insert_id_.Release();
}
inline void LogEntry::set_allocated_insert_id(std::string* insert_id) {
  if (insert_id != nullptr) {
    
  } else {
    
  }
  _impl_.insert_id_.SetAllocated(insert_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.insert_id_.IsDefault()) {
    _impl_.insert_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.insert_id)
}

// map<string, string> labels = 13;
inline int LogEntry::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int LogEntry::labels_size() const {
  return _internal_labels_size();
}
inline void LogEntry::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogEntry::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogEntry::labels() const {
  // @@protoc_insertion_point(field_map:google.api.servicecontrol.v1.LogEntry.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogEntry::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogEntry::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.servicecontrol.v1.LogEntry.labels)
  return _internal_mutable_labels();
}

// .google.protobuf.Any proto_payload = 2;
inline bool LogEntry::_internal_has_proto_payload() const {
  return payload_case() == kProtoPayload;
}
inline bool LogEntry::has_proto_payload() const {
  return _internal_has_proto_payload();
}
inline void LogEntry::set_has_proto_payload() {
  _impl_._oneof_case_[0] = kProtoPayload;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* LogEntry::release_proto_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.proto_payload)
  if (_internal_has_proto_payload()) {
    clear_has_payload();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.payload_.proto_payload_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.proto_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& LogEntry::_internal_proto_payload() const {
  return _internal_has_proto_payload()
      ? *_impl_.payload_.proto_payload_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Any&>(::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& LogEntry::proto_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.proto_payload)
  return _internal_proto_payload();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* LogEntry::unsafe_arena_release_proto_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.LogEntry.proto_payload)
  if (_internal_has_proto_payload()) {
    clear_has_payload();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.payload_.proto_payload_;
    _impl_.payload_.proto_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogEntry::unsafe_arena_set_allocated_proto_payload(::PROTOBUF_NAMESPACE_ID::Any* proto_payload) {
  clear_payload();
  if (proto_payload) {
    set_has_proto_payload();
    _impl_.payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.LogEntry.proto_payload)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* LogEntry::_internal_mutable_proto_payload() {
  if (!_internal_has_proto_payload()) {
    clear_payload();
    set_has_proto_payload();
    _impl_.payload_.proto_payload_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Any >(GetArenaForAllocation());
  }
  return _impl_.payload_.proto_payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* LogEntry::mutable_proto_payload() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_proto_payload();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.proto_payload)
  return _msg;
}

// string text_payload = 3;
inline bool LogEntry::_internal_has_text_payload() const {
  return payload_case() == kTextPayload;
}
inline bool LogEntry::has_text_payload() const {
  return _internal_has_text_payload();
}
inline void LogEntry::set_has_text_payload() {
  _impl_._oneof_case_[0] = kTextPayload;
}
inline void LogEntry::clear_text_payload() {
  if (_internal_has_text_payload()) {
    _impl_.payload_.text_payload_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& LogEntry::text_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.text_payload)
  return _internal_text_payload();
}
template <typename ArgT0, typename... ArgT>
inline void LogEntry::set_text_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    _impl_.payload_.text_payload_.InitDefault();
  }
  _impl_.payload_.text_payload_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.text_payload)
}
inline std::string* LogEntry::mutable_text_payload() {
  std::string* _s = _internal_mutable_text_payload();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.text_payload)
  return _s;
}
inline const std::string& LogEntry::_internal_text_payload() const {
  if (_internal_has_text_payload()) {
    return _impl_.payload_.text_payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LogEntry::_internal_set_text_payload(const std::string& value) {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    _impl_.payload_.text_payload_.InitDefault();
  }
  _impl_.payload_.text_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_text_payload() {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    _impl_.payload_.text_payload_.InitDefault();
  }
  return _impl_.payload_.text_payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* LogEntry::release_text_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.text_payload)
  if (_internal_has_text_payload()) {
    clear_has_payload();
    return _impl_.payload_.text_payload_.Release();
  } else {
    return nullptr;
  }
}
inline void LogEntry::set_allocated_text_payload(std::string* text_payload) {
  if (has_payload()) {
    clear_payload();
  }
  if (text_payload != nullptr) {
    set_has_text_payload();
    _impl_.payload_.text_payload_.InitAllocated(text_payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.text_payload)
}

// .google.protobuf.Struct struct_payload = 6;
inline bool LogEntry::_internal_has_struct_payload() const {
  return payload_case() == kStructPayload;
}
inline bool LogEntry::has_struct_payload() const {
  return _internal_has_struct_payload();
}
inline void LogEntry::set_has_struct_payload() {
  _impl_._oneof_case_[0] = kStructPayload;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* LogEntry::release_struct_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.struct_payload)
  if (_internal_has_struct_payload()) {
    clear_has_payload();
    ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.payload_.struct_payload_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.struct_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& LogEntry::_internal_struct_payload() const {
  return _internal_has_struct_payload()
      ? *_impl_.payload_.struct_payload_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Struct&>(::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& LogEntry::struct_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.struct_payload)
  return _internal_struct_payload();
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* LogEntry::unsafe_arena_release_struct_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.LogEntry.struct_payload)
  if (_internal_has_struct_payload()) {
    clear_has_payload();
    ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.payload_.struct_payload_;
    _impl_.payload_.struct_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogEntry::unsafe_arena_set_allocated_struct_payload(::PROTOBUF_NAMESPACE_ID::Struct* struct_payload) {
  clear_payload();
  if (struct_payload) {
    set_has_struct_payload();
    _impl_.payload_.struct_payload_ = struct_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.LogEntry.struct_payload)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* LogEntry::_internal_mutable_struct_payload() {
  if (!_internal_has_struct_payload()) {
    clear_payload();
    set_has_struct_payload();
    _impl_.payload_.struct_payload_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Struct >(GetArenaForAllocation());
  }
  return _impl_.payload_.struct_payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* LogEntry::mutable_struct_payload() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_struct_payload();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.struct_payload)
  return _msg;
}

// .google.api.servicecontrol.v1.LogEntryOperation operation = 16;
inline bool LogEntry::_internal_has_operation() const {
  return this != internal_default_instance() && _impl_.operation_ != nullptr;
}
inline bool LogEntry::has_operation() const {
  return _internal_has_operation();
}
inline void LogEntry::clear_operation() {
  if (GetArenaForAllocation() == nullptr && _impl_.operation_ != nullptr) {
    delete _impl_.operation_;
  }
  _impl_.operation_ = nullptr;
}
inline const ::google::api::servicecontrol::v1::LogEntryOperation& LogEntry::_internal_operation() const {
  const ::google::api::servicecontrol::v1::LogEntryOperation* p = _impl_.operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::servicecontrol::v1::LogEntryOperation&>(
      ::google::api::servicecontrol::v1::_LogEntryOperation_default_instance_);
}
inline const ::google::api::servicecontrol::v1::LogEntryOperation& LogEntry::operation() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.operation)
  return _internal_operation();
}
inline void LogEntry::unsafe_arena_set_allocated_operation(
    ::google::api::servicecontrol::v1::LogEntryOperation* operation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operation_);
  }
  _impl_.operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.LogEntry.operation)
}
inline ::google::api::servicecontrol::v1::LogEntryOperation* LogEntry::release_operation() {
  
  ::google::api::servicecontrol::v1::LogEntryOperation* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::servicecontrol::v1::LogEntryOperation* LogEntry::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.operation)
  
  ::google::api::servicecontrol::v1::LogEntryOperation* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
  return temp;
}
inline ::google::api::servicecontrol::v1::LogEntryOperation* LogEntry::_internal_mutable_operation() {
  
  if (_impl_.operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::LogEntryOperation>(GetArenaForAllocation());
    _impl_.operation_ = p;
  }
  return _impl_.operation_;
}
inline ::google::api::servicecontrol::v1::LogEntryOperation* LogEntry::mutable_operation() {
  ::google::api::servicecontrol::v1::LogEntryOperation* _msg = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.operation)
  return _msg;
}
inline void LogEntry::set_allocated_operation(::google::api::servicecontrol::v1::LogEntryOperation* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.operation_;
  }
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(operation);
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.operation)
}

// .google.api.servicecontrol.v1.LogEntrySourceLocation source_location = 17;
inline bool LogEntry::_internal_has_source_location() const {
  return this != internal_default_instance() && _impl_.source_location_ != nullptr;
}
inline bool LogEntry::has_source_location() const {
  return _internal_has_source_location();
}
inline void LogEntry::clear_source_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_location_ != nullptr) {
    delete _impl_.source_location_;
  }
  _impl_.source_location_ = nullptr;
}
inline const ::google::api::servicecontrol::v1::LogEntrySourceLocation& LogEntry::_internal_source_location() const {
  const ::google::api::servicecontrol::v1::LogEntrySourceLocation* p = _impl_.source_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::servicecontrol::v1::LogEntrySourceLocation&>(
      ::google::api::servicecontrol::v1::_LogEntrySourceLocation_default_instance_);
}
inline const ::google::api::servicecontrol::v1::LogEntrySourceLocation& LogEntry::source_location() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.source_location)
  return _internal_source_location();
}
inline void LogEntry::unsafe_arena_set_allocated_source_location(
    ::google::api::servicecontrol::v1::LogEntrySourceLocation* source_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_location_);
  }
  _impl_.source_location_ = source_location;
  if (source_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.LogEntry.source_location)
}
inline ::google::api::servicecontrol::v1::LogEntrySourceLocation* LogEntry::release_source_location() {
  
  ::google::api::servicecontrol::v1::LogEntrySourceLocation* temp = _impl_.source_location_;
  _impl_.source_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::servicecontrol::v1::LogEntrySourceLocation* LogEntry::unsafe_arena_release_source_location() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.source_location)
  
  ::google::api::servicecontrol::v1::LogEntrySourceLocation* temp = _impl_.source_location_;
  _impl_.source_location_ = nullptr;
  return temp;
}
inline ::google::api::servicecontrol::v1::LogEntrySourceLocation* LogEntry::_internal_mutable_source_location() {
  
  if (_impl_.source_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::LogEntrySourceLocation>(GetArenaForAllocation());
    _impl_.source_location_ = p;
  }
  return _impl_.source_location_;
}
inline ::google::api::servicecontrol::v1::LogEntrySourceLocation* LogEntry::mutable_source_location() {
  ::google::api::servicecontrol::v1::LogEntrySourceLocation* _msg = _internal_mutable_source_location();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.source_location)
  return _msg;
}
inline void LogEntry::set_allocated_source_location(::google::api::servicecontrol::v1::LogEntrySourceLocation* source_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_location_;
  }
  if (source_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_location);
    if (message_arena != submessage_arena) {
      source_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_location_ = source_location;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.source_location)
}

inline bool LogEntry::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void LogEntry::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline LogEntry::PayloadCase LogEntry::payload_case() const {
  return LogEntry::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// LogEntryOperation

// string id = 1;
inline void LogEntryOperation::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& LogEntryOperation::id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntryOperation.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntryOperation::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntryOperation.id)
}
inline std::string* LogEntryOperation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntryOperation.id)
  return _s;
}
inline const std::string& LogEntryOperation::_internal_id() const {
  return _impl_.id_.Get();
}
inline void LogEntryOperation::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntryOperation::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntryOperation::release_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntryOperation.id)
  return _impl_.id_.Release();
}
inline void LogEntryOperation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntryOperation.id)
}

// string producer = 2;
inline void LogEntryOperation::clear_producer() {
  _impl_.producer_.ClearToEmpty();
}
inline const std::string& LogEntryOperation::producer() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntryOperation.producer)
  return _internal_producer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntryOperation::set_producer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.producer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntryOperation.producer)
}
inline std::string* LogEntryOperation::mutable_producer() {
  std::string* _s = _internal_mutable_producer();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntryOperation.producer)
  return _s;
}
inline const std::string& LogEntryOperation::_internal_producer() const {
  return _impl_.producer_.Get();
}
inline void LogEntryOperation::_internal_set_producer(const std::string& value) {
  
  _impl_.producer_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntryOperation::_internal_mutable_producer() {
  
  return _impl_.producer_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntryOperation::release_producer() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntryOperation.producer)
  return _impl_.producer_.Release();
}
inline void LogEntryOperation::set_allocated_producer(std::string* producer) {
  if (producer != nullptr) {
    
  } else {
    
  }
  _impl_.producer_.SetAllocated(producer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.producer_.IsDefault()) {
    _impl_.producer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntryOperation.producer)
}

// bool first = 3;
inline void LogEntryOperation::clear_first() {
  _impl_.first_ = false;
}
inline bool LogEntryOperation::_internal_first() const {
  return _impl_.first_;
}
inline bool LogEntryOperation::first() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntryOperation.first)
  return _internal_first();
}
inline void LogEntryOperation::_internal_set_first(bool value) {
  
  _impl_.first_ = value;
}
inline void LogEntryOperation::set_first(bool value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntryOperation.first)
}

// bool last = 4;
inline void LogEntryOperation::clear_last() {
  _impl_.last_ = false;
}
inline bool LogEntryOperation::_internal_last() const {
  return _impl_.last_;
}
inline bool LogEntryOperation::last() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntryOperation.last)
  return _internal_last();
}
inline void LogEntryOperation::_internal_set_last(bool value) {
  
  _impl_.last_ = value;
}
inline void LogEntryOperation::set_last(bool value) {
  _internal_set_last(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntryOperation.last)
}

// -------------------------------------------------------------------

// LogEntrySourceLocation

// string file = 1;
inline void LogEntrySourceLocation::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& LogEntrySourceLocation::file() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntrySourceLocation.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntrySourceLocation::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntrySourceLocation.file)
}
inline std::string* LogEntrySourceLocation::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntrySourceLocation.file)
  return _s;
}
inline const std::string& LogEntrySourceLocation::_internal_file() const {
  return _impl_.file_.Get();
}
inline void LogEntrySourceLocation::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntrySourceLocation::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntrySourceLocation::release_file() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntrySourceLocation.file)
  return _impl_.file_.Release();
}
inline void LogEntrySourceLocation::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntrySourceLocation.file)
}

// int64 line = 2;
inline void LogEntrySourceLocation::clear_line() {
  _impl_.line_ = int64_t{0};
}
inline int64_t LogEntrySourceLocation::_internal_line() const {
  return _impl_.line_;
}
inline int64_t LogEntrySourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntrySourceLocation.line)
  return _internal_line();
}
inline void LogEntrySourceLocation::_internal_set_line(int64_t value) {
  
  _impl_.line_ = value;
}
inline void LogEntrySourceLocation::set_line(int64_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntrySourceLocation.line)
}

// string function = 3;
inline void LogEntrySourceLocation::clear_function() {
  _impl_.function_.ClearToEmpty();
}
inline const std::string& LogEntrySourceLocation::function() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntrySourceLocation.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntrySourceLocation::set_function(ArgT0&& arg0, ArgT... args) {
 
 _impl_.function_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntrySourceLocation.function)
}
inline std::string* LogEntrySourceLocation::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntrySourceLocation.function)
  return _s;
}
inline const std::string& LogEntrySourceLocation::_internal_function() const {
  return _impl_.function_.Get();
}
inline void LogEntrySourceLocation::_internal_set_function(const std::string& value) {
  
  _impl_.function_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntrySourceLocation::_internal_mutable_function() {
  
  return _impl_.function_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntrySourceLocation::release_function() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntrySourceLocation.function)
  return _impl_.function_.Release();
}
inline void LogEntrySourceLocation::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  _impl_.function_.SetAllocated(function, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.function_.IsDefault()) {
    _impl_.function_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntrySourceLocation.function)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto

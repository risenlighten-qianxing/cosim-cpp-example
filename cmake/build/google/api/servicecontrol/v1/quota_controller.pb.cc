// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/quota_controller.proto

#include "google/api/servicecontrol/v1/quota_controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
PROTOBUF_CONSTEXPR AllocateQuotaRequest::AllocateQuotaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_config_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allocate_operation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllocateQuotaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocateQuotaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocateQuotaRequestDefaultTypeInternal() {}
  union {
    AllocateQuotaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocateQuotaRequestDefaultTypeInternal _AllocateQuotaRequest_default_instance_;
PROTOBUF_CONSTEXPR QuotaOperation_LabelsEntry_DoNotUse::QuotaOperation_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct QuotaOperation_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuotaOperation_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuotaOperation_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QuotaOperation_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuotaOperation_LabelsEntry_DoNotUseDefaultTypeInternal _QuotaOperation_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR QuotaOperation::QuotaOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.quota_metrics_)*/{}
  , /*decltype(_impl_.operation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consumer_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quota_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuotaOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuotaOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuotaOperationDefaultTypeInternal() {}
  union {
    QuotaOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuotaOperationDefaultTypeInternal _QuotaOperation_default_instance_;
PROTOBUF_CONSTEXPR AllocateQuotaResponse::AllocateQuotaResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allocate_errors_)*/{}
  , /*decltype(_impl_.quota_metrics_)*/{}
  , /*decltype(_impl_.operation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_config_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllocateQuotaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocateQuotaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocateQuotaResponseDefaultTypeInternal() {}
  union {
    AllocateQuotaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocateQuotaResponseDefaultTypeInternal _AllocateQuotaResponse_default_instance_;
PROTOBUF_CONSTEXPR QuotaError::QuotaError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuotaErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuotaErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuotaErrorDefaultTypeInternal() {}
  union {
    QuotaError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuotaErrorDefaultTypeInternal _QuotaError_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaRequest, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaRequest, _impl_.allocate_operation_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaRequest, _impl_.service_config_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, _impl_.operation_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, _impl_.consumer_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, _impl_.quota_metrics_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, _impl_.quota_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, _impl_.operation_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, _impl_.allocate_errors_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, _impl_.quota_metrics_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, _impl_.service_config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::api::servicecontrol::v1::AllocateQuotaRequest)},
  { 9, 17, -1, sizeof(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse)},
  { 19, -1, -1, sizeof(::google::api::servicecontrol::v1::QuotaOperation)},
  { 31, -1, -1, sizeof(::google::api::servicecontrol::v1::AllocateQuotaResponse)},
  { 41, -1, -1, sizeof(::google::api::servicecontrol::v1::QuotaError)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::api::servicecontrol::v1::_AllocateQuotaRequest_default_instance_._instance,
  &::google::api::servicecontrol::v1::_QuotaOperation_LabelsEntry_DoNotUse_default_instance_._instance,
  &::google::api::servicecontrol::v1::_QuotaOperation_default_instance_._instance,
  &::google::api::servicecontrol::v1::_AllocateQuotaResponse_default_instance_._instance,
  &::google::api::servicecontrol::v1::_QuotaError_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3google/api/servicecontrol/v1/quota_con"
  "troller.proto\022\034google.api.servicecontrol"
  ".v1\032\034google/api/annotations.proto\032/googl"
  "e/api/servicecontrol/v1/metric_value.pro"
  "to\032\027google/rpc/status.proto\032\027google/api/"
  "client.proto\"\221\001\n\024AllocateQuotaRequest\022\024\n"
  "\014service_name\030\001 \001(\t\022H\n\022allocate_operatio"
  "n\030\002 \001(\0132,.google.api.servicecontrol.v1.Q"
  "uotaOperation\022\031\n\021service_config_id\030\004 \001(\t"
  "\"\306\003\n\016QuotaOperation\022\024\n\014operation_id\030\001 \001("
  "\t\022\023\n\013method_name\030\002 \001(\t\022\023\n\013consumer_id\030\003 "
  "\001(\t\022H\n\006labels\030\004 \003(\01328.google.api.service"
  "control.v1.QuotaOperation.LabelsEntry\022C\n"
  "\rquota_metrics\030\005 \003(\0132,.google.api.servic"
  "econtrol.v1.MetricValueSet\022J\n\nquota_mode"
  "\030\006 \001(\01626.google.api.servicecontrol.v1.Qu"
  "otaOperation.QuotaMode\032-\n\013LabelsEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"j\n\tQuotaMo"
  "de\022\017\n\013UNSPECIFIED\020\000\022\n\n\006NORMAL\020\001\022\017\n\013BEST_"
  "EFFORT\020\002\022\016\n\nCHECK_ONLY\020\003\022\016\n\nQUERY_ONLY\020\004"
  "\022\017\n\013ADJUST_ONLY\020\005\"\320\001\n\025AllocateQuotaRespo"
  "nse\022\024\n\014operation_id\030\001 \001(\t\022A\n\017allocate_er"
  "rors\030\002 \003(\0132(.google.api.servicecontrol.v"
  "1.QuotaError\022C\n\rquota_metrics\030\003 \003(\0132,.go"
  "ogle.api.servicecontrol.v1.MetricValueSe"
  "t\022\031\n\021service_config_id\030\004 \001(\t\"\234\002\n\nQuotaEr"
  "ror\022;\n\004code\030\001 \001(\0162-.google.api.serviceco"
  "ntrol.v1.QuotaError.Code\022\017\n\007subject\030\002 \001("
  "\t\022\023\n\013description\030\003 \001(\t\022\"\n\006status\030\004 \001(\0132\022"
  ".google.rpc.Status\"\206\001\n\004Code\022\017\n\013UNSPECIFI"
  "ED\020\000\022\026\n\022RESOURCE_EXHAUSTED\020\010\022\026\n\022BILLING_"
  "NOT_ACTIVE\020k\022\023\n\017PROJECT_DELETED\020l\022\023\n\017API"
  "_KEY_INVALID\020i\022\023\n\017API_KEY_EXPIRED\020p2\305\002\n\017"
  "QuotaController\022\256\001\n\rAllocateQuota\0222.goog"
  "le.api.servicecontrol.v1.AllocateQuotaRe"
  "quest\0323.google.api.servicecontrol.v1.All"
  "ocateQuotaResponse\"4\202\323\344\223\002.\")/v1/services"
  "/{service_name}:allocateQuota:\001*\032\200\001\312A\035se"
  "rvicecontrol.googleapis.com\322A]https://ww"
  "w.googleapis.com/auth/cloud-platform,htt"
  "ps://www.googleapis.com/auth/servicecont"
  "rolB\357\001\n com.google.api.servicecontrol.v1"
  "B\024QuotaControllerProtoP\001ZJgoogle.golang."
  "org/genproto/googleapis/api/servicecontr"
  "ol/v1;servicecontrol\370\001\001\252\002\036Google.Cloud.S"
  "erviceControl.V1\312\002\036Google\\Cloud\\ServiceC"
  "ontrol\\V1\352\002!Google::Cloud::ServiceContro"
  "l::V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_deps[4] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fmetric_5fvalue_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto = {
    false, false, 1893, descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto,
    "google/api/servicecontrol/v1/quota_controller.proto",
    &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once, descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_deps, 4, 5,
    schemas, file_default_instances, TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto::offsets,
    file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto, file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto,
    file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto);
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaOperation_QuotaMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[0];
}
bool QuotaOperation_QuotaMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QuotaOperation_QuotaMode QuotaOperation::UNSPECIFIED;
constexpr QuotaOperation_QuotaMode QuotaOperation::NORMAL;
constexpr QuotaOperation_QuotaMode QuotaOperation::BEST_EFFORT;
constexpr QuotaOperation_QuotaMode QuotaOperation::CHECK_ONLY;
constexpr QuotaOperation_QuotaMode QuotaOperation::QUERY_ONLY;
constexpr QuotaOperation_QuotaMode QuotaOperation::ADJUST_ONLY;
constexpr QuotaOperation_QuotaMode QuotaOperation::QuotaMode_MIN;
constexpr QuotaOperation_QuotaMode QuotaOperation::QuotaMode_MAX;
constexpr int QuotaOperation::QuotaMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaError_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[1];
}
bool QuotaError_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 105:
    case 107:
    case 108:
    case 112:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QuotaError_Code QuotaError::UNSPECIFIED;
constexpr QuotaError_Code QuotaError::RESOURCE_EXHAUSTED;
constexpr QuotaError_Code QuotaError::BILLING_NOT_ACTIVE;
constexpr QuotaError_Code QuotaError::PROJECT_DELETED;
constexpr QuotaError_Code QuotaError::API_KEY_INVALID;
constexpr QuotaError_Code QuotaError::API_KEY_EXPIRED;
constexpr QuotaError_Code QuotaError::Code_MIN;
constexpr QuotaError_Code QuotaError::Code_MAX;
constexpr int QuotaError::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AllocateQuotaRequest::_Internal {
 public:
  static const ::google::api::servicecontrol::v1::QuotaOperation& allocate_operation(const AllocateQuotaRequest* msg);
};

const ::google::api::servicecontrol::v1::QuotaOperation&
AllocateQuotaRequest::_Internal::allocate_operation(const AllocateQuotaRequest* msg) {
  return *msg->_impl_.allocate_operation_;
}
AllocateQuotaRequest::AllocateQuotaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.AllocateQuotaRequest)
}
AllocateQuotaRequest::AllocateQuotaRequest(const AllocateQuotaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllocateQuotaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.service_config_id_){}
    , decltype(_impl_.allocate_operation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_config_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_config_id().empty()) {
    _this->_impl_.service_config_id_.Set(from._internal_service_config_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_allocate_operation()) {
    _this->_impl_.allocate_operation_ = new ::google::api::servicecontrol::v1::QuotaOperation(*from._impl_.allocate_operation_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.AllocateQuotaRequest)
}

inline void AllocateQuotaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.service_config_id_){}
    , decltype(_impl_.allocate_operation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_config_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllocateQuotaRequest::~AllocateQuotaRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.AllocateQuotaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllocateQuotaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.service_config_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.allocate_operation_;
}

void AllocateQuotaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllocateQuotaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.service_config_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.allocate_operation_ != nullptr) {
    delete _impl_.allocate_operation_;
  }
  _impl_.allocate_operation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocateQuotaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.AllocateQuotaRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.QuotaOperation allocate_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocate_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string service_config_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_service_config_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllocateQuotaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.AllocateQuotaRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // .google.api.servicecontrol.v1.QuotaOperation allocate_operation = 2;
  if (this->_internal_has_allocate_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::allocate_operation(this),
        _Internal::allocate_operation(this).GetCachedSize(), target, stream);
  }

  // string service_config_id = 4;
  if (!this->_internal_service_config_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_config_id().data(), static_cast<int>(this->_internal_service_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_service_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.AllocateQuotaRequest)
  return target;
}

size_t AllocateQuotaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_config_id = 4;
  if (!this->_internal_service_config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_config_id());
  }

  // .google.api.servicecontrol.v1.QuotaOperation allocate_operation = 2;
  if (this->_internal_has_allocate_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allocate_operation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllocateQuotaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllocateQuotaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllocateQuotaRequest::GetClassData() const { return &_class_data_; }


void AllocateQuotaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllocateQuotaRequest*>(&to_msg);
  auto& from = static_cast<const AllocateQuotaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_service_config_id().empty()) {
    _this->_internal_set_service_config_id(from._internal_service_config_id());
  }
  if (from._internal_has_allocate_operation()) {
    _this->_internal_mutable_allocate_operation()->::google::api::servicecontrol::v1::QuotaOperation::MergeFrom(
        from._internal_allocate_operation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllocateQuotaRequest::CopyFrom(const AllocateQuotaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateQuotaRequest::IsInitialized() const {
  return true;
}

void AllocateQuotaRequest::InternalSwap(AllocateQuotaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_config_id_, lhs_arena,
      &other->_impl_.service_config_id_, rhs_arena
  );
  swap(_impl_.allocate_operation_, other->_impl_.allocate_operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocateQuotaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_getter, &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once,
      file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[0]);
}

// ===================================================================

QuotaOperation_LabelsEntry_DoNotUse::QuotaOperation_LabelsEntry_DoNotUse() {}
QuotaOperation_LabelsEntry_DoNotUse::QuotaOperation_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QuotaOperation_LabelsEntry_DoNotUse::MergeFrom(const QuotaOperation_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QuotaOperation_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_getter, &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once,
      file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[1]);
}

// ===================================================================

class QuotaOperation::_Internal {
 public:
};

void QuotaOperation::clear_quota_metrics() {
  _impl_.quota_metrics_.Clear();
}
QuotaOperation::QuotaOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &QuotaOperation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.QuotaOperation)
}
QuotaOperation::QuotaOperation(const QuotaOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuotaOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{}
    , decltype(_impl_.quota_metrics_){from._impl_.quota_metrics_}
    , decltype(_impl_.operation_id_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.consumer_id_){}
    , decltype(_impl_.quota_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _impl_.operation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_id().empty()) {
    _this->_impl_.operation_id_.Set(from._internal_operation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consumer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumer_id().empty()) {
    _this->_impl_.consumer_id_.Set(from._internal_consumer_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.quota_mode_ = from._impl_.quota_mode_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.QuotaOperation)
}

inline void QuotaOperation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.labels_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.quota_metrics_){arena}
    , decltype(_impl_.operation_id_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.consumer_id_){}
    , decltype(_impl_.quota_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.operation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consumer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuotaOperation::~QuotaOperation() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.QuotaOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void QuotaOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.Destruct();
  _impl_.labels_.~MapField();
  _impl_.quota_metrics_.~RepeatedPtrField();
  _impl_.operation_id_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.consumer_id_.Destroy();
}

void QuotaOperation::ArenaDtor(void* object) {
  QuotaOperation* _this = reinterpret_cast< QuotaOperation* >(object);
  _this->_impl_.labels_.Destruct();
}
void QuotaOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuotaOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.QuotaOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.quota_metrics_.Clear();
  _impl_.operation_id_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.consumer_id_.ClearToEmpty();
  _impl_.quota_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuotaOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string operation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_operation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.QuotaOperation.operation_id"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.QuotaOperation.method_name"));
        } else
          goto handle_unusual;
        continue;
      // string consumer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_consumer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.QuotaOperation.consumer_id"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quota_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.QuotaOperation.QuotaMode quota_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quota_mode(static_cast<::google::api::servicecontrol::v1::QuotaOperation_QuotaMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuotaOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.QuotaOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation_id = 1;
  if (!this->_internal_operation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaOperation.operation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation_id(), target);
  }

  // string method_name = 2;
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaOperation.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // string consumer_id = 3;
  if (!this->_internal_consumer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumer_id().data(), static_cast<int>(this->_internal_consumer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaOperation.consumer_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_consumer_id(), target);
  }

  // map<string, string> labels = 4;
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = QuotaOperation_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.api.servicecontrol.v1.QuotaOperation.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.api.servicecontrol.v1.QuotaOperation.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quota_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_quota_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.api.servicecontrol.v1.QuotaOperation.QuotaMode quota_mode = 6;
  if (this->_internal_quota_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_quota_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.QuotaOperation)
  return target;
}

size_t QuotaOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.QuotaOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += QuotaOperation_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 5;
  total_size += 1UL * this->_internal_quota_metrics_size();
  for (const auto& msg : this->_impl_.quota_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operation_id = 1;
  if (!this->_internal_operation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // string method_name = 2;
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string consumer_id = 3;
  if (!this->_internal_consumer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumer_id());
  }

  // .google.api.servicecontrol.v1.QuotaOperation.QuotaMode quota_mode = 6;
  if (this->_internal_quota_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quota_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuotaOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuotaOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuotaOperation::GetClassData() const { return &_class_data_; }


void QuotaOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuotaOperation*>(&to_msg);
  auto& from = static_cast<const QuotaOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.QuotaOperation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.quota_metrics_.MergeFrom(from._impl_.quota_metrics_);
  if (!from._internal_operation_id().empty()) {
    _this->_internal_set_operation_id(from._internal_operation_id());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_consumer_id().empty()) {
    _this->_internal_set_consumer_id(from._internal_consumer_id());
  }
  if (from._internal_quota_mode() != 0) {
    _this->_internal_set_quota_mode(from._internal_quota_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuotaOperation::CopyFrom(const QuotaOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.QuotaOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaOperation::IsInitialized() const {
  return true;
}

void QuotaOperation::InternalSwap(QuotaOperation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.quota_metrics_.InternalSwap(&other->_impl_.quota_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_id_, lhs_arena,
      &other->_impl_.operation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consumer_id_, lhs_arena,
      &other->_impl_.consumer_id_, rhs_arena
  );
  swap(_impl_.quota_mode_, other->_impl_.quota_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuotaOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_getter, &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once,
      file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[2]);
}

// ===================================================================

class AllocateQuotaResponse::_Internal {
 public:
};

void AllocateQuotaResponse::clear_quota_metrics() {
  _impl_.quota_metrics_.Clear();
}
AllocateQuotaResponse::AllocateQuotaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.AllocateQuotaResponse)
}
AllocateQuotaResponse::AllocateQuotaResponse(const AllocateQuotaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllocateQuotaResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allocate_errors_){from._impl_.allocate_errors_}
    , decltype(_impl_.quota_metrics_){from._impl_.quota_metrics_}
    , decltype(_impl_.operation_id_){}
    , decltype(_impl_.service_config_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_id().empty()) {
    _this->_impl_.operation_id_.Set(from._internal_operation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_config_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_config_id().empty()) {
    _this->_impl_.service_config_id_.Set(from._internal_service_config_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.AllocateQuotaResponse)
}

inline void AllocateQuotaResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allocate_errors_){arena}
    , decltype(_impl_.quota_metrics_){arena}
    , decltype(_impl_.operation_id_){}
    , decltype(_impl_.service_config_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.operation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_config_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_config_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllocateQuotaResponse::~AllocateQuotaResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.AllocateQuotaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllocateQuotaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allocate_errors_.~RepeatedPtrField();
  _impl_.quota_metrics_.~RepeatedPtrField();
  _impl_.operation_id_.Destroy();
  _impl_.service_config_id_.Destroy();
}

void AllocateQuotaResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllocateQuotaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allocate_errors_.Clear();
  _impl_.quota_metrics_.Clear();
  _impl_.operation_id_.ClearToEmpty();
  _impl_.service_config_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocateQuotaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string operation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_operation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.servicecontrol.v1.QuotaError allocate_errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allocate_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quota_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string service_config_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_service_config_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllocateQuotaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation_id = 1;
  if (!this->_internal_operation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation_id(), target);
  }

  // repeated .google.api.servicecontrol.v1.QuotaError allocate_errors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allocate_errors_size()); i < n; i++) {
    const auto& repfield = this->_internal_allocate_errors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quota_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_quota_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string service_config_id = 4;
  if (!this->_internal_service_config_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_config_id().data(), static_cast<int>(this->_internal_service_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_service_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.AllocateQuotaResponse)
  return target;
}

size_t AllocateQuotaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.servicecontrol.v1.QuotaError allocate_errors = 2;
  total_size += 1UL * this->_internal_allocate_errors_size();
  for (const auto& msg : this->_impl_.allocate_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 3;
  total_size += 1UL * this->_internal_quota_metrics_size();
  for (const auto& msg : this->_impl_.quota_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operation_id = 1;
  if (!this->_internal_operation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // string service_config_id = 4;
  if (!this->_internal_service_config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_config_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllocateQuotaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllocateQuotaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllocateQuotaResponse::GetClassData() const { return &_class_data_; }


void AllocateQuotaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllocateQuotaResponse*>(&to_msg);
  auto& from = static_cast<const AllocateQuotaResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allocate_errors_.MergeFrom(from._impl_.allocate_errors_);
  _this->_impl_.quota_metrics_.MergeFrom(from._impl_.quota_metrics_);
  if (!from._internal_operation_id().empty()) {
    _this->_internal_set_operation_id(from._internal_operation_id());
  }
  if (!from._internal_service_config_id().empty()) {
    _this->_internal_set_service_config_id(from._internal_service_config_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllocateQuotaResponse::CopyFrom(const AllocateQuotaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateQuotaResponse::IsInitialized() const {
  return true;
}

void AllocateQuotaResponse::InternalSwap(AllocateQuotaResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.allocate_errors_.InternalSwap(&other->_impl_.allocate_errors_);
  _impl_.quota_metrics_.InternalSwap(&other->_impl_.quota_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_id_, lhs_arena,
      &other->_impl_.operation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_config_id_, lhs_arena,
      &other->_impl_.service_config_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocateQuotaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_getter, &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once,
      file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[3]);
}

// ===================================================================

class QuotaError::_Internal {
 public:
  static const ::google::rpc::Status& status(const QuotaError* msg);
};

const ::google::rpc::Status&
QuotaError::_Internal::status(const QuotaError* msg) {
  return *msg->_impl_.status_;
}
void QuotaError::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
QuotaError::QuotaError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.QuotaError)
}
QuotaError::QuotaError(const QuotaError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuotaError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::google::rpc::Status(*from._impl_.status_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.QuotaError)
}

inline void QuotaError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuotaError::~QuotaError() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.QuotaError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuotaError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subject_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void QuotaError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuotaError::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.QuotaError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuotaError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.servicecontrol.v1.QuotaError.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::google::api::servicecontrol::v1::QuotaError_Code>(val));
        } else
          goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.QuotaError.subject"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.servicecontrol.v1.QuotaError.description"));
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuotaError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.QuotaError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.servicecontrol.v1.QuotaError.Code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaError.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaError.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .google.rpc.Status status = 4;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.QuotaError)
  return target;
}

size_t QuotaError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.QuotaError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.rpc.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .google.api.servicecontrol.v1.QuotaError.Code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuotaError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuotaError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuotaError::GetClassData() const { return &_class_data_; }


void QuotaError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuotaError*>(&to_msg);
  auto& from = static_cast<const QuotaError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.QuotaError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::google::rpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuotaError::CopyFrom(const QuotaError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.QuotaError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaError::IsInitialized() const {
  return true;
}

void QuotaError::InternalSwap(QuotaError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuotaError, _impl_.code_)
      + sizeof(QuotaError::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(QuotaError, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuotaError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_getter, &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once,
      file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::AllocateQuotaRequest*
Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::AllocateQuotaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::AllocateQuotaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::QuotaOperation*
Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::QuotaOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::QuotaOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::AllocateQuotaResponse*
Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::AllocateQuotaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::AllocateQuotaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::QuotaError*
Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::QuotaError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::QuotaError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

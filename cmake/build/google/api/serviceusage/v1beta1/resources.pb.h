// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/serviceusage/v1beta1/resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/auth.pb.h"
#include "google/api/documentation.pb.h"
#include "google/api/endpoint.pb.h"
#include "google/api/monitored_resource.pb.h"
#include "google/api/monitoring.pb.h"
#include "google/api/quota.pb.h"
#include "google/api/usage.pb.h"
#include <google/protobuf/api.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
namespace google {
namespace api {
namespace serviceusage {
namespace v1beta1 {
class AdminQuotaPolicy;
struct AdminQuotaPolicyDefaultTypeInternal;
extern AdminQuotaPolicyDefaultTypeInternal _AdminQuotaPolicy_default_instance_;
class AdminQuotaPolicy_DimensionsEntry_DoNotUse;
struct AdminQuotaPolicy_DimensionsEntry_DoNotUseDefaultTypeInternal;
extern AdminQuotaPolicy_DimensionsEntry_DoNotUseDefaultTypeInternal _AdminQuotaPolicy_DimensionsEntry_DoNotUse_default_instance_;
class ConsumerQuotaLimit;
struct ConsumerQuotaLimitDefaultTypeInternal;
extern ConsumerQuotaLimitDefaultTypeInternal _ConsumerQuotaLimit_default_instance_;
class ConsumerQuotaMetric;
struct ConsumerQuotaMetricDefaultTypeInternal;
extern ConsumerQuotaMetricDefaultTypeInternal _ConsumerQuotaMetric_default_instance_;
class OperationMetadata;
struct OperationMetadataDefaultTypeInternal;
extern OperationMetadataDefaultTypeInternal _OperationMetadata_default_instance_;
class OverrideInlineSource;
struct OverrideInlineSourceDefaultTypeInternal;
extern OverrideInlineSourceDefaultTypeInternal _OverrideInlineSource_default_instance_;
class QuotaBucket;
struct QuotaBucketDefaultTypeInternal;
extern QuotaBucketDefaultTypeInternal _QuotaBucket_default_instance_;
class QuotaBucket_DimensionsEntry_DoNotUse;
struct QuotaBucket_DimensionsEntry_DoNotUseDefaultTypeInternal;
extern QuotaBucket_DimensionsEntry_DoNotUseDefaultTypeInternal _QuotaBucket_DimensionsEntry_DoNotUse_default_instance_;
class QuotaOverride;
struct QuotaOverrideDefaultTypeInternal;
extern QuotaOverrideDefaultTypeInternal _QuotaOverride_default_instance_;
class QuotaOverride_DimensionsEntry_DoNotUse;
struct QuotaOverride_DimensionsEntry_DoNotUseDefaultTypeInternal;
extern QuotaOverride_DimensionsEntry_DoNotUseDefaultTypeInternal _QuotaOverride_DimensionsEntry_DoNotUse_default_instance_;
class Service;
struct ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class ServiceConfig;
struct ServiceConfigDefaultTypeInternal;
extern ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;
class ServiceIdentity;
struct ServiceIdentityDefaultTypeInternal;
extern ServiceIdentityDefaultTypeInternal _ServiceIdentity_default_instance_;
}  // namespace v1beta1
}  // namespace serviceusage
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::serviceusage::v1beta1::AdminQuotaPolicy* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::AdminQuotaPolicy>(Arena*);
template<> ::google::api::serviceusage::v1beta1::AdminQuotaPolicy_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::AdminQuotaPolicy_DimensionsEntry_DoNotUse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ConsumerQuotaLimit>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ConsumerQuotaMetric* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ConsumerQuotaMetric>(Arena*);
template<> ::google::api::serviceusage::v1beta1::OperationMetadata* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::OperationMetadata>(Arena*);
template<> ::google::api::serviceusage::v1beta1::OverrideInlineSource* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::OverrideInlineSource>(Arena*);
template<> ::google::api::serviceusage::v1beta1::QuotaBucket* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaBucket>(Arena*);
template<> ::google::api::serviceusage::v1beta1::QuotaBucket_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaBucket_DimensionsEntry_DoNotUse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::QuotaOverride* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride>(Arena*);
template<> ::google::api::serviceusage::v1beta1::QuotaOverride_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride_DimensionsEntry_DoNotUse>(Arena*);
template<> ::google::api::serviceusage::v1beta1::Service* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::Service>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ServiceConfig* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ServiceConfig>(Arena*);
template<> ::google::api::serviceusage::v1beta1::ServiceIdentity* Arena::CreateMaybeMessage<::google::api::serviceusage::v1beta1::ServiceIdentity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace serviceusage {
namespace v1beta1 {

enum State : int {
  STATE_UNSPECIFIED = 0,
  DISABLED = 1,
  ENABLED = 2,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool State_IsValid(int value);
constexpr State State_MIN = STATE_UNSPECIFIED;
constexpr State State_MAX = ENABLED;
constexpr int State_ARRAYSIZE = State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor();
template<typename T>
inline const std::string& State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    State_descriptor(), enum_t_value);
}
inline bool State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
enum QuotaView : int {
  QUOTA_VIEW_UNSPECIFIED = 0,
  BASIC = 1,
  FULL = 2,
  QuotaView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QuotaView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QuotaView_IsValid(int value);
constexpr QuotaView QuotaView_MIN = QUOTA_VIEW_UNSPECIFIED;
constexpr QuotaView QuotaView_MAX = FULL;
constexpr int QuotaView_ARRAYSIZE = QuotaView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaView_descriptor();
template<typename T>
inline const std::string& QuotaView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuotaView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuotaView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QuotaView_descriptor(), enum_t_value);
}
inline bool QuotaView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuotaView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QuotaView>(
    QuotaView_descriptor(), name, value);
}
enum QuotaSafetyCheck : int {
  QUOTA_SAFETY_CHECK_UNSPECIFIED = 0,
  LIMIT_DECREASE_BELOW_USAGE = 1,
  LIMIT_DECREASE_PERCENTAGE_TOO_HIGH = 2,
  QuotaSafetyCheck_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QuotaSafetyCheck_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QuotaSafetyCheck_IsValid(int value);
constexpr QuotaSafetyCheck QuotaSafetyCheck_MIN = QUOTA_SAFETY_CHECK_UNSPECIFIED;
constexpr QuotaSafetyCheck QuotaSafetyCheck_MAX = LIMIT_DECREASE_PERCENTAGE_TOO_HIGH;
constexpr int QuotaSafetyCheck_ARRAYSIZE = QuotaSafetyCheck_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaSafetyCheck_descriptor();
template<typename T>
inline const std::string& QuotaSafetyCheck_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuotaSafetyCheck>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuotaSafetyCheck_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QuotaSafetyCheck_descriptor(), enum_t_value);
}
inline bool QuotaSafetyCheck_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuotaSafetyCheck* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QuotaSafetyCheck>(
    QuotaSafetyCheck_descriptor(), name, value);
}
// ===================================================================

class Service final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.Service) */ {
 public:
  inline Service() : Service(nullptr) {}
  ~Service() override;
  explicit PROTOBUF_CONSTEXPR Service(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Service(const Service& from);
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service& operator=(Service&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Service& default_instance() {
    return *internal_default_instance();
  }
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }
  inline void Swap(Service* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Service* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Service& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Service& from) {
    Service::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.Service";
  }
  protected:
  explicit Service(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kParentFieldNumber = 5,
    kConfigFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string parent = 5;
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.api.serviceusage.v1beta1.ServiceConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::google::api::serviceusage::v1beta1::ServiceConfig& config() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::ServiceConfig* release_config();
  ::google::api::serviceusage::v1beta1::ServiceConfig* mutable_config();
  void set_allocated_config(::google::api::serviceusage::v1beta1::ServiceConfig* config);
  private:
  const ::google::api::serviceusage::v1beta1::ServiceConfig& _internal_config() const;
  ::google::api::serviceusage::v1beta1::ServiceConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::google::api::serviceusage::v1beta1::ServiceConfig* config);
  ::google::api::serviceusage::v1beta1::ServiceConfig* unsafe_arena_release_config();

  // .google.api.serviceusage.v1beta1.State state = 4;
  void clear_state();
  ::google::api::serviceusage::v1beta1::State state() const;
  void set_state(::google::api::serviceusage::v1beta1::State value);
  private:
  ::google::api::serviceusage::v1beta1::State _internal_state() const;
  void _internal_set_state(::google::api::serviceusage::v1beta1::State value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.Service)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::google::api::serviceusage::v1beta1::ServiceConfig* config_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ServiceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ServiceConfig) */ {
 public:
  inline ServiceConfig() : ServiceConfig(nullptr) {}
  ~ServiceConfig() override;
  explicit PROTOBUF_CONSTEXPR ServiceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceConfig(const ServiceConfig& from);
  ServiceConfig(ServiceConfig&& from) noexcept
    : ServiceConfig() {
    *this = ::std::move(from);
  }

  inline ServiceConfig& operator=(const ServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceConfig& operator=(ServiceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceConfig* internal_default_instance() {
    return reinterpret_cast<const ServiceConfig*>(
               &_ServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceConfig& a, ServiceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceConfig& from) {
    ServiceConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ServiceConfig";
  }
  protected:
  explicit ServiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApisFieldNumber = 3,
    kEndpointsFieldNumber = 18,
    kMonitoredResourcesFieldNumber = 25,
    kNameFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDocumentationFieldNumber = 6,
    kQuotaFieldNumber = 10,
    kAuthenticationFieldNumber = 11,
    kUsageFieldNumber = 15,
    kMonitoringFieldNumber = 28,
  };
  // repeated .google.protobuf.Api apis = 3;
  int apis_size() const;
  private:
  int _internal_apis_size() const;
  public:
  void clear_apis();
  ::PROTOBUF_NAMESPACE_ID::Api* mutable_apis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Api >*
      mutable_apis();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Api& _internal_apis(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Api* _internal_add_apis();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Api& apis(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Api* add_apis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Api >&
      apis() const;

  // repeated .google.api.Endpoint endpoints = 18;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  ::google::api::Endpoint* mutable_endpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint >*
      mutable_endpoints();
  private:
  const ::google::api::Endpoint& _internal_endpoints(int index) const;
  ::google::api::Endpoint* _internal_add_endpoints();
  public:
  const ::google::api::Endpoint& endpoints(int index) const;
  ::google::api::Endpoint* add_endpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint >&
      endpoints() const;

  // repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
  int monitored_resources_size() const;
  private:
  int _internal_monitored_resources_size() const;
  public:
  void clear_monitored_resources();
  ::google::api::MonitoredResourceDescriptor* mutable_monitored_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >*
      mutable_monitored_resources();
  private:
  const ::google::api::MonitoredResourceDescriptor& _internal_monitored_resources(int index) const;
  ::google::api::MonitoredResourceDescriptor* _internal_add_monitored_resources();
  public:
  const ::google::api::MonitoredResourceDescriptor& monitored_resources(int index) const;
  ::google::api::MonitoredResourceDescriptor* add_monitored_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >&
      monitored_resources() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .google.api.Documentation documentation = 6;
  bool has_documentation() const;
  private:
  bool _internal_has_documentation() const;
  public:
  void clear_documentation();
  const ::google::api::Documentation& documentation() const;
  PROTOBUF_NODISCARD ::google::api::Documentation* release_documentation();
  ::google::api::Documentation* mutable_documentation();
  void set_allocated_documentation(::google::api::Documentation* documentation);
  private:
  const ::google::api::Documentation& _internal_documentation() const;
  ::google::api::Documentation* _internal_mutable_documentation();
  public:
  void unsafe_arena_set_allocated_documentation(
      ::google::api::Documentation* documentation);
  ::google::api::Documentation* unsafe_arena_release_documentation();

  // .google.api.Quota quota = 10;
  bool has_quota() const;
  private:
  bool _internal_has_quota() const;
  public:
  void clear_quota();
  const ::google::api::Quota& quota() const;
  PROTOBUF_NODISCARD ::google::api::Quota* release_quota();
  ::google::api::Quota* mutable_quota();
  void set_allocated_quota(::google::api::Quota* quota);
  private:
  const ::google::api::Quota& _internal_quota() const;
  ::google::api::Quota* _internal_mutable_quota();
  public:
  void unsafe_arena_set_allocated_quota(
      ::google::api::Quota* quota);
  ::google::api::Quota* unsafe_arena_release_quota();

  // .google.api.Authentication authentication = 11;
  bool has_authentication() const;
  private:
  bool _internal_has_authentication() const;
  public:
  void clear_authentication();
  const ::google::api::Authentication& authentication() const;
  PROTOBUF_NODISCARD ::google::api::Authentication* release_authentication();
  ::google::api::Authentication* mutable_authentication();
  void set_allocated_authentication(::google::api::Authentication* authentication);
  private:
  const ::google::api::Authentication& _internal_authentication() const;
  ::google::api::Authentication* _internal_mutable_authentication();
  public:
  void unsafe_arena_set_allocated_authentication(
      ::google::api::Authentication* authentication);
  ::google::api::Authentication* unsafe_arena_release_authentication();

  // .google.api.Usage usage = 15;
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  const ::google::api::Usage& usage() const;
  PROTOBUF_NODISCARD ::google::api::Usage* release_usage();
  ::google::api::Usage* mutable_usage();
  void set_allocated_usage(::google::api::Usage* usage);
  private:
  const ::google::api::Usage& _internal_usage() const;
  ::google::api::Usage* _internal_mutable_usage();
  public:
  void unsafe_arena_set_allocated_usage(
      ::google::api::Usage* usage);
  ::google::api::Usage* unsafe_arena_release_usage();

  // .google.api.Monitoring monitoring = 28;
  bool has_monitoring() const;
  private:
  bool _internal_has_monitoring() const;
  public:
  void clear_monitoring();
  const ::google::api::Monitoring& monitoring() const;
  PROTOBUF_NODISCARD ::google::api::Monitoring* release_monitoring();
  ::google::api::Monitoring* mutable_monitoring();
  void set_allocated_monitoring(::google::api::Monitoring* monitoring);
  private:
  const ::google::api::Monitoring& _internal_monitoring() const;
  ::google::api::Monitoring* _internal_mutable_monitoring();
  public:
  void unsafe_arena_set_allocated_monitoring(
      ::google::api::Monitoring* monitoring);
  ::google::api::Monitoring* unsafe_arena_release_monitoring();

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ServiceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Api > apis_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint > endpoints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor > monitored_resources_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::google::api::Documentation* documentation_;
    ::google::api::Quota* quota_;
    ::google::api::Authentication* authentication_;
    ::google::api::Usage* usage_;
    ::google::api::Monitoring* monitoring_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class OperationMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.OperationMetadata) */ {
 public:
  inline OperationMetadata() : OperationMetadata(nullptr) {}
  ~OperationMetadata() override;
  explicit PROTOBUF_CONSTEXPR OperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationMetadata(const OperationMetadata& from);
  OperationMetadata(OperationMetadata&& from) noexcept
    : OperationMetadata() {
    *this = ::std::move(from);
  }

  inline OperationMetadata& operator=(const OperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationMetadata& operator=(OperationMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationMetadata* internal_default_instance() {
    return reinterpret_cast<const OperationMetadata*>(
               &_OperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OperationMetadata& a, OperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationMetadata& from) {
    OperationMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.OperationMetadata";
  }
  protected:
  explicit OperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceNamesFieldNumber = 2,
  };
  // repeated string resource_names = 2;
  int resource_names_size() const;
  private:
  int _internal_resource_names_size() const;
  public:
  void clear_resource_names();
  const std::string& resource_names(int index) const;
  std::string* mutable_resource_names(int index);
  void set_resource_names(int index, const std::string& value);
  void set_resource_names(int index, std::string&& value);
  void set_resource_names(int index, const char* value);
  void set_resource_names(int index, const char* value, size_t size);
  std::string* add_resource_names();
  void add_resource_names(const std::string& value);
  void add_resource_names(std::string&& value);
  void add_resource_names(const char* value);
  void add_resource_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_names();
  private:
  const std::string& _internal_resource_names(int index) const;
  std::string* _internal_add_resource_names();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.OperationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConsumerQuotaMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ConsumerQuotaMetric) */ {
 public:
  inline ConsumerQuotaMetric() : ConsumerQuotaMetric(nullptr) {}
  ~ConsumerQuotaMetric() override;
  explicit PROTOBUF_CONSTEXPR ConsumerQuotaMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsumerQuotaMetric(const ConsumerQuotaMetric& from);
  ConsumerQuotaMetric(ConsumerQuotaMetric&& from) noexcept
    : ConsumerQuotaMetric() {
    *this = ::std::move(from);
  }

  inline ConsumerQuotaMetric& operator=(const ConsumerQuotaMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumerQuotaMetric& operator=(ConsumerQuotaMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsumerQuotaMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsumerQuotaMetric* internal_default_instance() {
    return reinterpret_cast<const ConsumerQuotaMetric*>(
               &_ConsumerQuotaMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConsumerQuotaMetric& a, ConsumerQuotaMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsumerQuotaMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsumerQuotaMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsumerQuotaMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsumerQuotaMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsumerQuotaMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsumerQuotaMetric& from) {
    ConsumerQuotaMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumerQuotaMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ConsumerQuotaMetric";
  }
  protected:
  explicit ConsumerQuotaMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumerQuotaLimitsFieldNumber = 3,
    kDescendantConsumerQuotaLimitsFieldNumber = 6,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kMetricFieldNumber = 4,
    kUnitFieldNumber = 5,
  };
  // repeated .google.api.serviceusage.v1beta1.ConsumerQuotaLimit consumer_quota_limits = 3;
  int consumer_quota_limits_size() const;
  private:
  int _internal_consumer_quota_limits_size() const;
  public:
  void clear_consumer_quota_limits();
  ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* mutable_consumer_quota_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit >*
      mutable_consumer_quota_limits();
  private:
  const ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit& _internal_consumer_quota_limits(int index) const;
  ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* _internal_add_consumer_quota_limits();
  public:
  const ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit& consumer_quota_limits(int index) const;
  ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* add_consumer_quota_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit >&
      consumer_quota_limits() const;

  // repeated .google.api.serviceusage.v1beta1.ConsumerQuotaLimit descendant_consumer_quota_limits = 6;
  int descendant_consumer_quota_limits_size() const;
  private:
  int _internal_descendant_consumer_quota_limits_size() const;
  public:
  void clear_descendant_consumer_quota_limits();
  ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* mutable_descendant_consumer_quota_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit >*
      mutable_descendant_consumer_quota_limits();
  private:
  const ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit& _internal_descendant_consumer_quota_limits(int index) const;
  ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* _internal_add_descendant_consumer_quota_limits();
  public:
  const ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit& descendant_consumer_quota_limits(int index) const;
  ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* add_descendant_consumer_quota_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit >&
      descendant_consumer_quota_limits() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string metric = 4;
  void clear_metric();
  const std::string& metric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric();
  PROTOBUF_NODISCARD std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // string unit = 5;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ConsumerQuotaMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit > consumer_quota_limits_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit > descendant_consumer_quota_limits_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConsumerQuotaLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ConsumerQuotaLimit) */ {
 public:
  inline ConsumerQuotaLimit() : ConsumerQuotaLimit(nullptr) {}
  ~ConsumerQuotaLimit() override;
  explicit PROTOBUF_CONSTEXPR ConsumerQuotaLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsumerQuotaLimit(const ConsumerQuotaLimit& from);
  ConsumerQuotaLimit(ConsumerQuotaLimit&& from) noexcept
    : ConsumerQuotaLimit() {
    *this = ::std::move(from);
  }

  inline ConsumerQuotaLimit& operator=(const ConsumerQuotaLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumerQuotaLimit& operator=(ConsumerQuotaLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsumerQuotaLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsumerQuotaLimit* internal_default_instance() {
    return reinterpret_cast<const ConsumerQuotaLimit*>(
               &_ConsumerQuotaLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConsumerQuotaLimit& a, ConsumerQuotaLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsumerQuotaLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsumerQuotaLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsumerQuotaLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsumerQuotaLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsumerQuotaLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsumerQuotaLimit& from) {
    ConsumerQuotaLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumerQuotaLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ConsumerQuotaLimit";
  }
  protected:
  explicit ConsumerQuotaLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuotaBucketsFieldNumber = 9,
    kNameFieldNumber = 1,
    kUnitFieldNumber = 2,
    kMetricFieldNumber = 8,
    kIsPreciseFieldNumber = 3,
    kAllowsAdminOverridesFieldNumber = 7,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaBucket quota_buckets = 9;
  int quota_buckets_size() const;
  private:
  int _internal_quota_buckets_size() const;
  public:
  void clear_quota_buckets();
  ::google::api::serviceusage::v1beta1::QuotaBucket* mutable_quota_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaBucket >*
      mutable_quota_buckets();
  private:
  const ::google::api::serviceusage::v1beta1::QuotaBucket& _internal_quota_buckets(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaBucket* _internal_add_quota_buckets();
  public:
  const ::google::api::serviceusage::v1beta1::QuotaBucket& quota_buckets(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaBucket* add_quota_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaBucket >&
      quota_buckets() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string unit = 2;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // string metric = 8;
  void clear_metric();
  const std::string& metric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric();
  PROTOBUF_NODISCARD std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // bool is_precise = 3;
  void clear_is_precise();
  bool is_precise() const;
  void set_is_precise(bool value);
  private:
  bool _internal_is_precise() const;
  void _internal_set_is_precise(bool value);
  public:

  // bool allows_admin_overrides = 7;
  void clear_allows_admin_overrides();
  bool allows_admin_overrides() const;
  void set_allows_admin_overrides(bool value);
  private:
  bool _internal_allows_admin_overrides() const;
  void _internal_set_allows_admin_overrides(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ConsumerQuotaLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaBucket > quota_buckets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
    bool is_precise_;
    bool allows_admin_overrides_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class QuotaBucket_DimensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaBucket_DimensionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaBucket_DimensionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  QuotaBucket_DimensionsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR QuotaBucket_DimensionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit QuotaBucket_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QuotaBucket_DimensionsEntry_DoNotUse& other);
  static const QuotaBucket_DimensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QuotaBucket_DimensionsEntry_DoNotUse*>(&_QuotaBucket_DimensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.serviceusage.v1beta1.QuotaBucket.DimensionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.serviceusage.v1beta1.QuotaBucket.DimensionsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};

// -------------------------------------------------------------------

class QuotaBucket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.QuotaBucket) */ {
 public:
  inline QuotaBucket() : QuotaBucket(nullptr) {}
  ~QuotaBucket() override;
  explicit PROTOBUF_CONSTEXPR QuotaBucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuotaBucket(const QuotaBucket& from);
  QuotaBucket(QuotaBucket&& from) noexcept
    : QuotaBucket() {
    *this = ::std::move(from);
  }

  inline QuotaBucket& operator=(const QuotaBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuotaBucket& operator=(QuotaBucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuotaBucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuotaBucket* internal_default_instance() {
    return reinterpret_cast<const QuotaBucket*>(
               &_QuotaBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QuotaBucket& a, QuotaBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(QuotaBucket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuotaBucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuotaBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuotaBucket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuotaBucket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuotaBucket& from) {
    QuotaBucket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaBucket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.QuotaBucket";
  }
  protected:
  explicit QuotaBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 6,
    kProducerOverrideFieldNumber = 3,
    kConsumerOverrideFieldNumber = 4,
    kAdminOverrideFieldNumber = 5,
    kEffectiveLimitFieldNumber = 1,
    kDefaultLimitFieldNumber = 2,
  };
  // map<string, string> dimensions = 6;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_dimensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_dimensions();

  // .google.api.serviceusage.v1beta1.QuotaOverride producer_override = 3;
  bool has_producer_override() const;
  private:
  bool _internal_has_producer_override() const;
  public:
  void clear_producer_override();
  const ::google::api::serviceusage::v1beta1::QuotaOverride& producer_override() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::QuotaOverride* release_producer_override();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_producer_override();
  void set_allocated_producer_override(::google::api::serviceusage::v1beta1::QuotaOverride* producer_override);
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_producer_override() const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_mutable_producer_override();
  public:
  void unsafe_arena_set_allocated_producer_override(
      ::google::api::serviceusage::v1beta1::QuotaOverride* producer_override);
  ::google::api::serviceusage::v1beta1::QuotaOverride* unsafe_arena_release_producer_override();

  // .google.api.serviceusage.v1beta1.QuotaOverride consumer_override = 4;
  bool has_consumer_override() const;
  private:
  bool _internal_has_consumer_override() const;
  public:
  void clear_consumer_override();
  const ::google::api::serviceusage::v1beta1::QuotaOverride& consumer_override() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::QuotaOverride* release_consumer_override();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_consumer_override();
  void set_allocated_consumer_override(::google::api::serviceusage::v1beta1::QuotaOverride* consumer_override);
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_consumer_override() const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_mutable_consumer_override();
  public:
  void unsafe_arena_set_allocated_consumer_override(
      ::google::api::serviceusage::v1beta1::QuotaOverride* consumer_override);
  ::google::api::serviceusage::v1beta1::QuotaOverride* unsafe_arena_release_consumer_override();

  // .google.api.serviceusage.v1beta1.QuotaOverride admin_override = 5;
  bool has_admin_override() const;
  private:
  bool _internal_has_admin_override() const;
  public:
  void clear_admin_override();
  const ::google::api::serviceusage::v1beta1::QuotaOverride& admin_override() const;
  PROTOBUF_NODISCARD ::google::api::serviceusage::v1beta1::QuotaOverride* release_admin_override();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_admin_override();
  void set_allocated_admin_override(::google::api::serviceusage::v1beta1::QuotaOverride* admin_override);
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_admin_override() const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_mutable_admin_override();
  public:
  void unsafe_arena_set_allocated_admin_override(
      ::google::api::serviceusage::v1beta1::QuotaOverride* admin_override);
  ::google::api::serviceusage::v1beta1::QuotaOverride* unsafe_arena_release_admin_override();

  // int64 effective_limit = 1;
  void clear_effective_limit();
  int64_t effective_limit() const;
  void set_effective_limit(int64_t value);
  private:
  int64_t _internal_effective_limit() const;
  void _internal_set_effective_limit(int64_t value);
  public:

  // int64 default_limit = 2;
  void clear_default_limit();
  int64_t default_limit() const;
  void set_default_limit(int64_t value);
  private:
  int64_t _internal_default_limit() const;
  void _internal_set_default_limit(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.QuotaBucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        QuotaBucket_DimensionsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dimensions_;
    ::google::api::serviceusage::v1beta1::QuotaOverride* producer_override_;
    ::google::api::serviceusage::v1beta1::QuotaOverride* consumer_override_;
    ::google::api::serviceusage::v1beta1::QuotaOverride* admin_override_;
    int64_t effective_limit_;
    int64_t default_limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class QuotaOverride_DimensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaOverride_DimensionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaOverride_DimensionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  QuotaOverride_DimensionsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR QuotaOverride_DimensionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit QuotaOverride_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QuotaOverride_DimensionsEntry_DoNotUse& other);
  static const QuotaOverride_DimensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QuotaOverride_DimensionsEntry_DoNotUse*>(&_QuotaOverride_DimensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.serviceusage.v1beta1.QuotaOverride.DimensionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.serviceusage.v1beta1.QuotaOverride.DimensionsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};

// -------------------------------------------------------------------

class QuotaOverride final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.QuotaOverride) */ {
 public:
  inline QuotaOverride() : QuotaOverride(nullptr) {}
  ~QuotaOverride() override;
  explicit PROTOBUF_CONSTEXPR QuotaOverride(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuotaOverride(const QuotaOverride& from);
  QuotaOverride(QuotaOverride&& from) noexcept
    : QuotaOverride() {
    *this = ::std::move(from);
  }

  inline QuotaOverride& operator=(const QuotaOverride& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuotaOverride& operator=(QuotaOverride&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuotaOverride& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuotaOverride* internal_default_instance() {
    return reinterpret_cast<const QuotaOverride*>(
               &_QuotaOverride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QuotaOverride& a, QuotaOverride& b) {
    a.Swap(&b);
  }
  inline void Swap(QuotaOverride* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuotaOverride* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuotaOverride* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuotaOverride>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuotaOverride& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuotaOverride& from) {
    QuotaOverride::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaOverride* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.QuotaOverride";
  }
  protected:
  explicit QuotaOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 3,
    kNameFieldNumber = 1,
    kMetricFieldNumber = 4,
    kUnitFieldNumber = 5,
    kAdminOverrideAncestorFieldNumber = 6,
    kOverrideValueFieldNumber = 2,
  };
  // map<string, string> dimensions = 3;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_dimensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_dimensions();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metric = 4;
  void clear_metric();
  const std::string& metric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric();
  PROTOBUF_NODISCARD std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // string unit = 5;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // string admin_override_ancestor = 6;
  void clear_admin_override_ancestor();
  const std::string& admin_override_ancestor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_override_ancestor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_override_ancestor();
  PROTOBUF_NODISCARD std::string* release_admin_override_ancestor();
  void set_allocated_admin_override_ancestor(std::string* admin_override_ancestor);
  private:
  const std::string& _internal_admin_override_ancestor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_override_ancestor(const std::string& value);
  std::string* _internal_mutable_admin_override_ancestor();
  public:

  // int64 override_value = 2;
  void clear_override_value();
  int64_t override_value() const;
  void set_override_value(int64_t value);
  private:
  int64_t _internal_override_value() const;
  void _internal_set_override_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.QuotaOverride)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        QuotaOverride_DimensionsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dimensions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_override_ancestor_;
    int64_t override_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class OverrideInlineSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.OverrideInlineSource) */ {
 public:
  inline OverrideInlineSource() : OverrideInlineSource(nullptr) {}
  ~OverrideInlineSource() override;
  explicit PROTOBUF_CONSTEXPR OverrideInlineSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OverrideInlineSource(const OverrideInlineSource& from);
  OverrideInlineSource(OverrideInlineSource&& from) noexcept
    : OverrideInlineSource() {
    *this = ::std::move(from);
  }

  inline OverrideInlineSource& operator=(const OverrideInlineSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverrideInlineSource& operator=(OverrideInlineSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverrideInlineSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverrideInlineSource* internal_default_instance() {
    return reinterpret_cast<const OverrideInlineSource*>(
               &_OverrideInlineSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OverrideInlineSource& a, OverrideInlineSource& b) {
    a.Swap(&b);
  }
  inline void Swap(OverrideInlineSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverrideInlineSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OverrideInlineSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OverrideInlineSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OverrideInlineSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OverrideInlineSource& from) {
    OverrideInlineSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverrideInlineSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.OverrideInlineSource";
  }
  protected:
  explicit OverrideInlineSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 1,
  };
  // repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
  int overrides_size() const;
  private:
  int _internal_overrides_size() const;
  public:
  void clear_overrides();
  ::google::api::serviceusage::v1beta1::QuotaOverride* mutable_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
      mutable_overrides();
  private:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& _internal_overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* _internal_add_overrides();
  public:
  const ::google::api::serviceusage::v1beta1::QuotaOverride& overrides(int index) const;
  ::google::api::serviceusage::v1beta1::QuotaOverride* add_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
      overrides() const;

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.OverrideInlineSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride > overrides_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AdminQuotaPolicy_DimensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AdminQuotaPolicy_DimensionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AdminQuotaPolicy_DimensionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AdminQuotaPolicy_DimensionsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AdminQuotaPolicy_DimensionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AdminQuotaPolicy_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AdminQuotaPolicy_DimensionsEntry_DoNotUse& other);
  static const AdminQuotaPolicy_DimensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AdminQuotaPolicy_DimensionsEntry_DoNotUse*>(&_AdminQuotaPolicy_DimensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.serviceusage.v1beta1.AdminQuotaPolicy.DimensionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.serviceusage.v1beta1.AdminQuotaPolicy.DimensionsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};

// -------------------------------------------------------------------

class AdminQuotaPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.AdminQuotaPolicy) */ {
 public:
  inline AdminQuotaPolicy() : AdminQuotaPolicy(nullptr) {}
  ~AdminQuotaPolicy() override;
  explicit PROTOBUF_CONSTEXPR AdminQuotaPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdminQuotaPolicy(const AdminQuotaPolicy& from);
  AdminQuotaPolicy(AdminQuotaPolicy&& from) noexcept
    : AdminQuotaPolicy() {
    *this = ::std::move(from);
  }

  inline AdminQuotaPolicy& operator=(const AdminQuotaPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminQuotaPolicy& operator=(AdminQuotaPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdminQuotaPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdminQuotaPolicy* internal_default_instance() {
    return reinterpret_cast<const AdminQuotaPolicy*>(
               &_AdminQuotaPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AdminQuotaPolicy& a, AdminQuotaPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminQuotaPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminQuotaPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdminQuotaPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdminQuotaPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdminQuotaPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdminQuotaPolicy& from) {
    AdminQuotaPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminQuotaPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.AdminQuotaPolicy";
  }
  protected:
  explicit AdminQuotaPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 3,
    kNameFieldNumber = 1,
    kMetricFieldNumber = 4,
    kUnitFieldNumber = 5,
    kContainerFieldNumber = 6,
    kPolicyValueFieldNumber = 2,
  };
  // map<string, string> dimensions = 3;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_dimensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_dimensions();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string metric = 4;
  void clear_metric();
  const std::string& metric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric();
  PROTOBUF_NODISCARD std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // string unit = 5;
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // string container = 6;
  void clear_container();
  const std::string& container() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container();
  PROTOBUF_NODISCARD std::string* release_container();
  void set_allocated_container(std::string* container);
  private:
  const std::string& _internal_container() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container(const std::string& value);
  std::string* _internal_mutable_container();
  public:

  // int64 policy_value = 2;
  void clear_policy_value();
  int64_t policy_value() const;
  void set_policy_value(int64_t value);
  private:
  int64_t _internal_policy_value() const;
  void _internal_set_policy_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.AdminQuotaPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AdminQuotaPolicy_DimensionsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dimensions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_;
    int64_t policy_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ServiceIdentity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.serviceusage.v1beta1.ServiceIdentity) */ {
 public:
  inline ServiceIdentity() : ServiceIdentity(nullptr) {}
  ~ServiceIdentity() override;
  explicit PROTOBUF_CONSTEXPR ServiceIdentity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceIdentity(const ServiceIdentity& from);
  ServiceIdentity(ServiceIdentity&& from) noexcept
    : ServiceIdentity() {
    *this = ::std::move(from);
  }

  inline ServiceIdentity& operator=(const ServiceIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceIdentity& operator=(ServiceIdentity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceIdentity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceIdentity* internal_default_instance() {
    return reinterpret_cast<const ServiceIdentity*>(
               &_ServiceIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ServiceIdentity& a, ServiceIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceIdentity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceIdentity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceIdentity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceIdentity& from) {
    ServiceIdentity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceIdentity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.serviceusage.v1beta1.ServiceIdentity";
  }
  protected:
  explicit ServiceIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kUniqueIdFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string unique_id = 2;
  void clear_unique_id();
  const std::string& unique_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* unique_id);
  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(const std::string& value);
  std::string* _internal_mutable_unique_id();
  public:

  // @@protoc_insertion_point(class_scope:google.api.serviceusage.v1beta1.ServiceIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Service

// string name = 1;
inline void Service::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Service::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.Service.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Service::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.Service.name)
}
inline std::string* Service::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.Service.name)
  return _s;
}
inline const std::string& Service::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Service::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Service::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Service::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.Service.name)
  return _impl_.name_.Release();
}
inline void Service::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.Service.name)
}

// string parent = 5;
inline void Service::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& Service::parent() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.Service.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Service::set_parent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.Service.parent)
}
inline std::string* Service::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.Service.parent)
  return _s;
}
inline const std::string& Service::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void Service::_internal_set_parent(const std::string& value) {
  
  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* Service::_internal_mutable_parent() {
  
  return _impl_.parent_.Mutable(GetArenaForAllocation());
}
inline std::string* Service::release_parent() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.Service.parent)
  return _impl_.parent_.Release();
}
inline void Service::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  _impl_.parent_.SetAllocated(parent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.Service.parent)
}

// .google.api.serviceusage.v1beta1.ServiceConfig config = 2;
inline bool Service::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool Service::has_config() const {
  return _internal_has_config();
}
inline void Service::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::google::api::serviceusage::v1beta1::ServiceConfig& Service::_internal_config() const {
  const ::google::api::serviceusage::v1beta1::ServiceConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::ServiceConfig&>(
      ::google::api::serviceusage::v1beta1::_ServiceConfig_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::ServiceConfig& Service::config() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.Service.config)
  return _internal_config();
}
inline void Service::unsafe_arena_set_allocated_config(
    ::google::api::serviceusage::v1beta1::ServiceConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.Service.config)
}
inline ::google::api::serviceusage::v1beta1::ServiceConfig* Service::release_config() {
  
  ::google::api::serviceusage::v1beta1::ServiceConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::ServiceConfig* Service::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.Service.config)
  
  ::google::api::serviceusage::v1beta1::ServiceConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::ServiceConfig* Service::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::ServiceConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::google::api::serviceusage::v1beta1::ServiceConfig* Service::mutable_config() {
  ::google::api::serviceusage::v1beta1::ServiceConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.Service.config)
  return _msg;
}
inline void Service::set_allocated_config(::google::api::serviceusage::v1beta1::ServiceConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.Service.config)
}

// .google.api.serviceusage.v1beta1.State state = 4;
inline void Service::clear_state() {
  _impl_.state_ = 0;
}
inline ::google::api::serviceusage::v1beta1::State Service::_internal_state() const {
  return static_cast< ::google::api::serviceusage::v1beta1::State >(_impl_.state_);
}
inline ::google::api::serviceusage::v1beta1::State Service::state() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.Service.state)
  return _internal_state();
}
inline void Service::_internal_set_state(::google::api::serviceusage::v1beta1::State value) {
  
  _impl_.state_ = value;
}
inline void Service::set_state(::google::api::serviceusage::v1beta1::State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.Service.state)
}

// -------------------------------------------------------------------

// ServiceConfig

// string name = 1;
inline void ServiceConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServiceConfig::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceConfig::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ServiceConfig.name)
}
inline std::string* ServiceConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.name)
  return _s;
}
inline const std::string& ServiceConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ServiceConfig::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceConfig::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceConfig::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceConfig.name)
  return _impl_.name_.Release();
}
inline void ServiceConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.name)
}

// string title = 2;
inline void ServiceConfig::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ServiceConfig::title() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceConfig::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ServiceConfig.title)
}
inline std::string* ServiceConfig::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.title)
  return _s;
}
inline const std::string& ServiceConfig::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ServiceConfig::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceConfig::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceConfig::release_title() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceConfig.title)
  return _impl_.title_.Release();
}
inline void ServiceConfig::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.title)
}

// repeated .google.protobuf.Api apis = 3;
inline int ServiceConfig::_internal_apis_size() const {
  return _impl_.apis_.size();
}
inline int ServiceConfig::apis_size() const {
  return _internal_apis_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Api* ServiceConfig::mutable_apis(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.apis)
  return _impl_.apis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Api >*
ServiceConfig::mutable_apis() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ServiceConfig.apis)
  return &_impl_.apis_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Api& ServiceConfig::_internal_apis(int index) const {
  return _impl_.apis_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Api& ServiceConfig::apis(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.apis)
  return _internal_apis(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Api* ServiceConfig::_internal_add_apis() {
  return _impl_.apis_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Api* ServiceConfig::add_apis() {
  ::PROTOBUF_NAMESPACE_ID::Api* _add = _internal_add_apis();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ServiceConfig.apis)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Api >&
ServiceConfig::apis() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ServiceConfig.apis)
  return _impl_.apis_;
}

// .google.api.Documentation documentation = 6;
inline bool ServiceConfig::_internal_has_documentation() const {
  return this != internal_default_instance() && _impl_.documentation_ != nullptr;
}
inline bool ServiceConfig::has_documentation() const {
  return _internal_has_documentation();
}
inline const ::google::api::Documentation& ServiceConfig::_internal_documentation() const {
  const ::google::api::Documentation* p = _impl_.documentation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::Documentation&>(
      ::google::api::_Documentation_default_instance_);
}
inline const ::google::api::Documentation& ServiceConfig::documentation() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.documentation)
  return _internal_documentation();
}
inline void ServiceConfig::unsafe_arena_set_allocated_documentation(
    ::google::api::Documentation* documentation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.documentation_);
  }
  _impl_.documentation_ = documentation;
  if (documentation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.documentation)
}
inline ::google::api::Documentation* ServiceConfig::release_documentation() {
  
  ::google::api::Documentation* temp = _impl_.documentation_;
  _impl_.documentation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::Documentation* ServiceConfig::unsafe_arena_release_documentation() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceConfig.documentation)
  
  ::google::api::Documentation* temp = _impl_.documentation_;
  _impl_.documentation_ = nullptr;
  return temp;
}
inline ::google::api::Documentation* ServiceConfig::_internal_mutable_documentation() {
  
  if (_impl_.documentation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Documentation>(GetArenaForAllocation());
    _impl_.documentation_ = p;
  }
  return _impl_.documentation_;
}
inline ::google::api::Documentation* ServiceConfig::mutable_documentation() {
  ::google::api::Documentation* _msg = _internal_mutable_documentation();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.documentation)
  return _msg;
}
inline void ServiceConfig::set_allocated_documentation(::google::api::Documentation* documentation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.documentation_);
  }
  if (documentation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(documentation));
    if (message_arena != submessage_arena) {
      documentation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.documentation_ = documentation;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.documentation)
}

// .google.api.Quota quota = 10;
inline bool ServiceConfig::_internal_has_quota() const {
  return this != internal_default_instance() && _impl_.quota_ != nullptr;
}
inline bool ServiceConfig::has_quota() const {
  return _internal_has_quota();
}
inline const ::google::api::Quota& ServiceConfig::_internal_quota() const {
  const ::google::api::Quota* p = _impl_.quota_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::Quota&>(
      ::google::api::_Quota_default_instance_);
}
inline const ::google::api::Quota& ServiceConfig::quota() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.quota)
  return _internal_quota();
}
inline void ServiceConfig::unsafe_arena_set_allocated_quota(
    ::google::api::Quota* quota) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quota_);
  }
  _impl_.quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.quota)
}
inline ::google::api::Quota* ServiceConfig::release_quota() {
  
  ::google::api::Quota* temp = _impl_.quota_;
  _impl_.quota_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::Quota* ServiceConfig::unsafe_arena_release_quota() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceConfig.quota)
  
  ::google::api::Quota* temp = _impl_.quota_;
  _impl_.quota_ = nullptr;
  return temp;
}
inline ::google::api::Quota* ServiceConfig::_internal_mutable_quota() {
  
  if (_impl_.quota_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Quota>(GetArenaForAllocation());
    _impl_.quota_ = p;
  }
  return _impl_.quota_;
}
inline ::google::api::Quota* ServiceConfig::mutable_quota() {
  ::google::api::Quota* _msg = _internal_mutable_quota();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.quota)
  return _msg;
}
inline void ServiceConfig::set_allocated_quota(::google::api::Quota* quota) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quota_);
  }
  if (quota) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quota));
    if (message_arena != submessage_arena) {
      quota = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quota, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quota_ = quota;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.quota)
}

// .google.api.Authentication authentication = 11;
inline bool ServiceConfig::_internal_has_authentication() const {
  return this != internal_default_instance() && _impl_.authentication_ != nullptr;
}
inline bool ServiceConfig::has_authentication() const {
  return _internal_has_authentication();
}
inline const ::google::api::Authentication& ServiceConfig::_internal_authentication() const {
  const ::google::api::Authentication* p = _impl_.authentication_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::Authentication&>(
      ::google::api::_Authentication_default_instance_);
}
inline const ::google::api::Authentication& ServiceConfig::authentication() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.authentication)
  return _internal_authentication();
}
inline void ServiceConfig::unsafe_arena_set_allocated_authentication(
    ::google::api::Authentication* authentication) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authentication_);
  }
  _impl_.authentication_ = authentication;
  if (authentication) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.authentication)
}
inline ::google::api::Authentication* ServiceConfig::release_authentication() {
  
  ::google::api::Authentication* temp = _impl_.authentication_;
  _impl_.authentication_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::Authentication* ServiceConfig::unsafe_arena_release_authentication() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceConfig.authentication)
  
  ::google::api::Authentication* temp = _impl_.authentication_;
  _impl_.authentication_ = nullptr;
  return temp;
}
inline ::google::api::Authentication* ServiceConfig::_internal_mutable_authentication() {
  
  if (_impl_.authentication_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Authentication>(GetArenaForAllocation());
    _impl_.authentication_ = p;
  }
  return _impl_.authentication_;
}
inline ::google::api::Authentication* ServiceConfig::mutable_authentication() {
  ::google::api::Authentication* _msg = _internal_mutable_authentication();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.authentication)
  return _msg;
}
inline void ServiceConfig::set_allocated_authentication(::google::api::Authentication* authentication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authentication_);
  }
  if (authentication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authentication));
    if (message_arena != submessage_arena) {
      authentication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authentication, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.authentication_ = authentication;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.authentication)
}

// .google.api.Usage usage = 15;
inline bool ServiceConfig::_internal_has_usage() const {
  return this != internal_default_instance() && _impl_.usage_ != nullptr;
}
inline bool ServiceConfig::has_usage() const {
  return _internal_has_usage();
}
inline const ::google::api::Usage& ServiceConfig::_internal_usage() const {
  const ::google::api::Usage* p = _impl_.usage_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::Usage&>(
      ::google::api::_Usage_default_instance_);
}
inline const ::google::api::Usage& ServiceConfig::usage() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.usage)
  return _internal_usage();
}
inline void ServiceConfig::unsafe_arena_set_allocated_usage(
    ::google::api::Usage* usage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usage_);
  }
  _impl_.usage_ = usage;
  if (usage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.usage)
}
inline ::google::api::Usage* ServiceConfig::release_usage() {
  
  ::google::api::Usage* temp = _impl_.usage_;
  _impl_.usage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::Usage* ServiceConfig::unsafe_arena_release_usage() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceConfig.usage)
  
  ::google::api::Usage* temp = _impl_.usage_;
  _impl_.usage_ = nullptr;
  return temp;
}
inline ::google::api::Usage* ServiceConfig::_internal_mutable_usage() {
  
  if (_impl_.usage_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Usage>(GetArenaForAllocation());
    _impl_.usage_ = p;
  }
  return _impl_.usage_;
}
inline ::google::api::Usage* ServiceConfig::mutable_usage() {
  ::google::api::Usage* _msg = _internal_mutable_usage();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.usage)
  return _msg;
}
inline void ServiceConfig::set_allocated_usage(::google::api::Usage* usage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usage_);
  }
  if (usage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usage));
    if (message_arena != submessage_arena) {
      usage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usage_ = usage;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.usage)
}

// repeated .google.api.Endpoint endpoints = 18;
inline int ServiceConfig::_internal_endpoints_size() const {
  return _impl_.endpoints_.size();
}
inline int ServiceConfig::endpoints_size() const {
  return _internal_endpoints_size();
}
inline ::google::api::Endpoint* ServiceConfig::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.endpoints)
  return _impl_.endpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint >*
ServiceConfig::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ServiceConfig.endpoints)
  return &_impl_.endpoints_;
}
inline const ::google::api::Endpoint& ServiceConfig::_internal_endpoints(int index) const {
  return _impl_.endpoints_.Get(index);
}
inline const ::google::api::Endpoint& ServiceConfig::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.endpoints)
  return _internal_endpoints(index);
}
inline ::google::api::Endpoint* ServiceConfig::_internal_add_endpoints() {
  return _impl_.endpoints_.Add();
}
inline ::google::api::Endpoint* ServiceConfig::add_endpoints() {
  ::google::api::Endpoint* _add = _internal_add_endpoints();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ServiceConfig.endpoints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint >&
ServiceConfig::endpoints() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ServiceConfig.endpoints)
  return _impl_.endpoints_;
}

// repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
inline int ServiceConfig::_internal_monitored_resources_size() const {
  return _impl_.monitored_resources_.size();
}
inline int ServiceConfig::monitored_resources_size() const {
  return _internal_monitored_resources_size();
}
inline ::google::api::MonitoredResourceDescriptor* ServiceConfig::mutable_monitored_resources(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.monitored_resources)
  return _impl_.monitored_resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >*
ServiceConfig::mutable_monitored_resources() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ServiceConfig.monitored_resources)
  return &_impl_.monitored_resources_;
}
inline const ::google::api::MonitoredResourceDescriptor& ServiceConfig::_internal_monitored_resources(int index) const {
  return _impl_.monitored_resources_.Get(index);
}
inline const ::google::api::MonitoredResourceDescriptor& ServiceConfig::monitored_resources(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.monitored_resources)
  return _internal_monitored_resources(index);
}
inline ::google::api::MonitoredResourceDescriptor* ServiceConfig::_internal_add_monitored_resources() {
  return _impl_.monitored_resources_.Add();
}
inline ::google::api::MonitoredResourceDescriptor* ServiceConfig::add_monitored_resources() {
  ::google::api::MonitoredResourceDescriptor* _add = _internal_add_monitored_resources();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ServiceConfig.monitored_resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >&
ServiceConfig::monitored_resources() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ServiceConfig.monitored_resources)
  return _impl_.monitored_resources_;
}

// .google.api.Monitoring monitoring = 28;
inline bool ServiceConfig::_internal_has_monitoring() const {
  return this != internal_default_instance() && _impl_.monitoring_ != nullptr;
}
inline bool ServiceConfig::has_monitoring() const {
  return _internal_has_monitoring();
}
inline const ::google::api::Monitoring& ServiceConfig::_internal_monitoring() const {
  const ::google::api::Monitoring* p = _impl_.monitoring_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::Monitoring&>(
      ::google::api::_Monitoring_default_instance_);
}
inline const ::google::api::Monitoring& ServiceConfig::monitoring() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceConfig.monitoring)
  return _internal_monitoring();
}
inline void ServiceConfig::unsafe_arena_set_allocated_monitoring(
    ::google::api::Monitoring* monitoring) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.monitoring_);
  }
  _impl_.monitoring_ = monitoring;
  if (monitoring) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.monitoring)
}
inline ::google::api::Monitoring* ServiceConfig::release_monitoring() {
  
  ::google::api::Monitoring* temp = _impl_.monitoring_;
  _impl_.monitoring_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::Monitoring* ServiceConfig::unsafe_arena_release_monitoring() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceConfig.monitoring)
  
  ::google::api::Monitoring* temp = _impl_.monitoring_;
  _impl_.monitoring_ = nullptr;
  return temp;
}
inline ::google::api::Monitoring* ServiceConfig::_internal_mutable_monitoring() {
  
  if (_impl_.monitoring_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Monitoring>(GetArenaForAllocation());
    _impl_.monitoring_ = p;
  }
  return _impl_.monitoring_;
}
inline ::google::api::Monitoring* ServiceConfig::mutable_monitoring() {
  ::google::api::Monitoring* _msg = _internal_mutable_monitoring();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceConfig.monitoring)
  return _msg;
}
inline void ServiceConfig::set_allocated_monitoring(::google::api::Monitoring* monitoring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.monitoring_);
  }
  if (monitoring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitoring));
    if (message_arena != submessage_arena) {
      monitoring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitoring, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.monitoring_ = monitoring;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceConfig.monitoring)
}

// -------------------------------------------------------------------

// OperationMetadata

// repeated string resource_names = 2;
inline int OperationMetadata::_internal_resource_names_size() const {
  return _impl_.resource_names_.size();
}
inline int OperationMetadata::resource_names_size() const {
  return _internal_resource_names_size();
}
inline void OperationMetadata::clear_resource_names() {
  _impl_.resource_names_.Clear();
}
inline std::string* OperationMetadata::add_resource_names() {
  std::string* _s = _internal_add_resource_names();
  // @@protoc_insertion_point(field_add_mutable:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
  return _s;
}
inline const std::string& OperationMetadata::_internal_resource_names(int index) const {
  return _impl_.resource_names_.Get(index);
}
inline const std::string& OperationMetadata::resource_names(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
  return _internal_resource_names(index);
}
inline std::string* OperationMetadata::mutable_resource_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
  return _impl_.resource_names_.Mutable(index);
}
inline void OperationMetadata::set_resource_names(int index, const std::string& value) {
  _impl_.resource_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
}
inline void OperationMetadata::set_resource_names(int index, std::string&& value) {
  _impl_.resource_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
}
inline void OperationMetadata::set_resource_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
}
inline void OperationMetadata::set_resource_names(int index, const char* value, size_t size) {
  _impl_.resource_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
}
inline std::string* OperationMetadata::_internal_add_resource_names() {
  return _impl_.resource_names_.Add();
}
inline void OperationMetadata::add_resource_names(const std::string& value) {
  _impl_.resource_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
}
inline void OperationMetadata::add_resource_names(std::string&& value) {
  _impl_.resource_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
}
inline void OperationMetadata::add_resource_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
}
inline void OperationMetadata::add_resource_names(const char* value, size_t size) {
  _impl_.resource_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OperationMetadata::resource_names() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
  return _impl_.resource_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OperationMetadata::mutable_resource_names() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.OperationMetadata.resource_names)
  return &_impl_.resource_names_;
}

// -------------------------------------------------------------------

// ConsumerQuotaMetric

// string name = 1;
inline void ConsumerQuotaMetric::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ConsumerQuotaMetric::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumerQuotaMetric::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.name)
}
inline std::string* ConsumerQuotaMetric::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.name)
  return _s;
}
inline const std::string& ConsumerQuotaMetric::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ConsumerQuotaMetric::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsumerQuotaMetric::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsumerQuotaMetric::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.name)
  return _impl_.name_.Release();
}
inline void ConsumerQuotaMetric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.name)
}

// string metric = 4;
inline void ConsumerQuotaMetric::clear_metric() {
  _impl_.metric_.ClearToEmpty();
}
inline const std::string& ConsumerQuotaMetric::metric() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.metric)
  return _internal_metric();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumerQuotaMetric::set_metric(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.metric)
}
inline std::string* ConsumerQuotaMetric::mutable_metric() {
  std::string* _s = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.metric)
  return _s;
}
inline const std::string& ConsumerQuotaMetric::_internal_metric() const {
  return _impl_.metric_.Get();
}
inline void ConsumerQuotaMetric::_internal_set_metric(const std::string& value) {
  
  _impl_.metric_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsumerQuotaMetric::_internal_mutable_metric() {
  
  return _impl_.metric_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsumerQuotaMetric::release_metric() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.metric)
  return _impl_.metric_.Release();
}
inline void ConsumerQuotaMetric::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  _impl_.metric_.SetAllocated(metric, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_.IsDefault()) {
    _impl_.metric_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.metric)
}

// string display_name = 2;
inline void ConsumerQuotaMetric::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& ConsumerQuotaMetric::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumerQuotaMetric::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.display_name)
}
inline std::string* ConsumerQuotaMetric::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.display_name)
  return _s;
}
inline const std::string& ConsumerQuotaMetric::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void ConsumerQuotaMetric::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsumerQuotaMetric::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsumerQuotaMetric::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.display_name)
  return _impl_.display_name_.Release();
}
inline void ConsumerQuotaMetric::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.display_name)
}

// repeated .google.api.serviceusage.v1beta1.ConsumerQuotaLimit consumer_quota_limits = 3;
inline int ConsumerQuotaMetric::_internal_consumer_quota_limits_size() const {
  return _impl_.consumer_quota_limits_.size();
}
inline int ConsumerQuotaMetric::consumer_quota_limits_size() const {
  return _internal_consumer_quota_limits_size();
}
inline void ConsumerQuotaMetric::clear_consumer_quota_limits() {
  _impl_.consumer_quota_limits_.Clear();
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* ConsumerQuotaMetric::mutable_consumer_quota_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.consumer_quota_limits)
  return _impl_.consumer_quota_limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit >*
ConsumerQuotaMetric::mutable_consumer_quota_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.consumer_quota_limits)
  return &_impl_.consumer_quota_limits_;
}
inline const ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit& ConsumerQuotaMetric::_internal_consumer_quota_limits(int index) const {
  return _impl_.consumer_quota_limits_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit& ConsumerQuotaMetric::consumer_quota_limits(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.consumer_quota_limits)
  return _internal_consumer_quota_limits(index);
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* ConsumerQuotaMetric::_internal_add_consumer_quota_limits() {
  return _impl_.consumer_quota_limits_.Add();
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* ConsumerQuotaMetric::add_consumer_quota_limits() {
  ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* _add = _internal_add_consumer_quota_limits();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.consumer_quota_limits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit >&
ConsumerQuotaMetric::consumer_quota_limits() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.consumer_quota_limits)
  return _impl_.consumer_quota_limits_;
}

// repeated .google.api.serviceusage.v1beta1.ConsumerQuotaLimit descendant_consumer_quota_limits = 6;
inline int ConsumerQuotaMetric::_internal_descendant_consumer_quota_limits_size() const {
  return _impl_.descendant_consumer_quota_limits_.size();
}
inline int ConsumerQuotaMetric::descendant_consumer_quota_limits_size() const {
  return _internal_descendant_consumer_quota_limits_size();
}
inline void ConsumerQuotaMetric::clear_descendant_consumer_quota_limits() {
  _impl_.descendant_consumer_quota_limits_.Clear();
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* ConsumerQuotaMetric::mutable_descendant_consumer_quota_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.descendant_consumer_quota_limits)
  return _impl_.descendant_consumer_quota_limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit >*
ConsumerQuotaMetric::mutable_descendant_consumer_quota_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.descendant_consumer_quota_limits)
  return &_impl_.descendant_consumer_quota_limits_;
}
inline const ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit& ConsumerQuotaMetric::_internal_descendant_consumer_quota_limits(int index) const {
  return _impl_.descendant_consumer_quota_limits_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit& ConsumerQuotaMetric::descendant_consumer_quota_limits(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.descendant_consumer_quota_limits)
  return _internal_descendant_consumer_quota_limits(index);
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* ConsumerQuotaMetric::_internal_add_descendant_consumer_quota_limits() {
  return _impl_.descendant_consumer_quota_limits_.Add();
}
inline ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* ConsumerQuotaMetric::add_descendant_consumer_quota_limits() {
  ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit* _add = _internal_add_descendant_consumer_quota_limits();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.descendant_consumer_quota_limits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::ConsumerQuotaLimit >&
ConsumerQuotaMetric::descendant_consumer_quota_limits() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.descendant_consumer_quota_limits)
  return _impl_.descendant_consumer_quota_limits_;
}

// string unit = 5;
inline void ConsumerQuotaMetric::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& ConsumerQuotaMetric::unit() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumerQuotaMetric::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.unit)
}
inline std::string* ConsumerQuotaMetric::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.unit)
  return _s;
}
inline const std::string& ConsumerQuotaMetric::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void ConsumerQuotaMetric::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsumerQuotaMetric::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsumerQuotaMetric::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.unit)
  return _impl_.unit_.Release();
}
inline void ConsumerQuotaMetric::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ConsumerQuotaMetric.unit)
}

// -------------------------------------------------------------------

// ConsumerQuotaLimit

// string name = 1;
inline void ConsumerQuotaLimit::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ConsumerQuotaLimit::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumerQuotaLimit::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.name)
}
inline std::string* ConsumerQuotaLimit::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.name)
  return _s;
}
inline const std::string& ConsumerQuotaLimit::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ConsumerQuotaLimit::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsumerQuotaLimit::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsumerQuotaLimit::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.name)
  return _impl_.name_.Release();
}
inline void ConsumerQuotaLimit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.name)
}

// string metric = 8;
inline void ConsumerQuotaLimit::clear_metric() {
  _impl_.metric_.ClearToEmpty();
}
inline const std::string& ConsumerQuotaLimit::metric() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.metric)
  return _internal_metric();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumerQuotaLimit::set_metric(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.metric)
}
inline std::string* ConsumerQuotaLimit::mutable_metric() {
  std::string* _s = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.metric)
  return _s;
}
inline const std::string& ConsumerQuotaLimit::_internal_metric() const {
  return _impl_.metric_.Get();
}
inline void ConsumerQuotaLimit::_internal_set_metric(const std::string& value) {
  
  _impl_.metric_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsumerQuotaLimit::_internal_mutable_metric() {
  
  return _impl_.metric_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsumerQuotaLimit::release_metric() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.metric)
  return _impl_.metric_.Release();
}
inline void ConsumerQuotaLimit::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  _impl_.metric_.SetAllocated(metric, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_.IsDefault()) {
    _impl_.metric_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.metric)
}

// string unit = 2;
inline void ConsumerQuotaLimit::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& ConsumerQuotaLimit::unit() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsumerQuotaLimit::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.unit)
}
inline std::string* ConsumerQuotaLimit::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.unit)
  return _s;
}
inline const std::string& ConsumerQuotaLimit::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void ConsumerQuotaLimit::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsumerQuotaLimit::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsumerQuotaLimit::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.unit)
  return _impl_.unit_.Release();
}
inline void ConsumerQuotaLimit::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.unit)
}

// bool is_precise = 3;
inline void ConsumerQuotaLimit::clear_is_precise() {
  _impl_.is_precise_ = false;
}
inline bool ConsumerQuotaLimit::_internal_is_precise() const {
  return _impl_.is_precise_;
}
inline bool ConsumerQuotaLimit::is_precise() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.is_precise)
  return _internal_is_precise();
}
inline void ConsumerQuotaLimit::_internal_set_is_precise(bool value) {
  
  _impl_.is_precise_ = value;
}
inline void ConsumerQuotaLimit::set_is_precise(bool value) {
  _internal_set_is_precise(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.is_precise)
}

// bool allows_admin_overrides = 7;
inline void ConsumerQuotaLimit::clear_allows_admin_overrides() {
  _impl_.allows_admin_overrides_ = false;
}
inline bool ConsumerQuotaLimit::_internal_allows_admin_overrides() const {
  return _impl_.allows_admin_overrides_;
}
inline bool ConsumerQuotaLimit::allows_admin_overrides() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.allows_admin_overrides)
  return _internal_allows_admin_overrides();
}
inline void ConsumerQuotaLimit::_internal_set_allows_admin_overrides(bool value) {
  
  _impl_.allows_admin_overrides_ = value;
}
inline void ConsumerQuotaLimit::set_allows_admin_overrides(bool value) {
  _internal_set_allows_admin_overrides(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.allows_admin_overrides)
}

// repeated .google.api.serviceusage.v1beta1.QuotaBucket quota_buckets = 9;
inline int ConsumerQuotaLimit::_internal_quota_buckets_size() const {
  return _impl_.quota_buckets_.size();
}
inline int ConsumerQuotaLimit::quota_buckets_size() const {
  return _internal_quota_buckets_size();
}
inline void ConsumerQuotaLimit::clear_quota_buckets() {
  _impl_.quota_buckets_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaBucket* ConsumerQuotaLimit::mutable_quota_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.quota_buckets)
  return _impl_.quota_buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaBucket >*
ConsumerQuotaLimit::mutable_quota_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.quota_buckets)
  return &_impl_.quota_buckets_;
}
inline const ::google::api::serviceusage::v1beta1::QuotaBucket& ConsumerQuotaLimit::_internal_quota_buckets(int index) const {
  return _impl_.quota_buckets_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::QuotaBucket& ConsumerQuotaLimit::quota_buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.quota_buckets)
  return _internal_quota_buckets(index);
}
inline ::google::api::serviceusage::v1beta1::QuotaBucket* ConsumerQuotaLimit::_internal_add_quota_buckets() {
  return _impl_.quota_buckets_.Add();
}
inline ::google::api::serviceusage::v1beta1::QuotaBucket* ConsumerQuotaLimit::add_quota_buckets() {
  ::google::api::serviceusage::v1beta1::QuotaBucket* _add = _internal_add_quota_buckets();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.quota_buckets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaBucket >&
ConsumerQuotaLimit::quota_buckets() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.ConsumerQuotaLimit.quota_buckets)
  return _impl_.quota_buckets_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QuotaBucket

// int64 effective_limit = 1;
inline void QuotaBucket::clear_effective_limit() {
  _impl_.effective_limit_ = int64_t{0};
}
inline int64_t QuotaBucket::_internal_effective_limit() const {
  return _impl_.effective_limit_;
}
inline int64_t QuotaBucket::effective_limit() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaBucket.effective_limit)
  return _internal_effective_limit();
}
inline void QuotaBucket::_internal_set_effective_limit(int64_t value) {
  
  _impl_.effective_limit_ = value;
}
inline void QuotaBucket::set_effective_limit(int64_t value) {
  _internal_set_effective_limit(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.QuotaBucket.effective_limit)
}

// int64 default_limit = 2;
inline void QuotaBucket::clear_default_limit() {
  _impl_.default_limit_ = int64_t{0};
}
inline int64_t QuotaBucket::_internal_default_limit() const {
  return _impl_.default_limit_;
}
inline int64_t QuotaBucket::default_limit() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaBucket.default_limit)
  return _internal_default_limit();
}
inline void QuotaBucket::_internal_set_default_limit(int64_t value) {
  
  _impl_.default_limit_ = value;
}
inline void QuotaBucket::set_default_limit(int64_t value) {
  _internal_set_default_limit(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.QuotaBucket.default_limit)
}

// .google.api.serviceusage.v1beta1.QuotaOverride producer_override = 3;
inline bool QuotaBucket::_internal_has_producer_override() const {
  return this != internal_default_instance() && _impl_.producer_override_ != nullptr;
}
inline bool QuotaBucket::has_producer_override() const {
  return _internal_has_producer_override();
}
inline void QuotaBucket::clear_producer_override() {
  if (GetArenaForAllocation() == nullptr && _impl_.producer_override_ != nullptr) {
    delete _impl_.producer_override_;
  }
  _impl_.producer_override_ = nullptr;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& QuotaBucket::_internal_producer_override() const {
  const ::google::api::serviceusage::v1beta1::QuotaOverride* p = _impl_.producer_override_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::QuotaOverride&>(
      ::google::api::serviceusage::v1beta1::_QuotaOverride_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& QuotaBucket::producer_override() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaBucket.producer_override)
  return _internal_producer_override();
}
inline void QuotaBucket::unsafe_arena_set_allocated_producer_override(
    ::google::api::serviceusage::v1beta1::QuotaOverride* producer_override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producer_override_);
  }
  _impl_.producer_override_ = producer_override;
  if (producer_override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.QuotaBucket.producer_override)
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::release_producer_override() {
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.producer_override_;
  _impl_.producer_override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::unsafe_arena_release_producer_override() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.QuotaBucket.producer_override)
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.producer_override_;
  _impl_.producer_override_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::_internal_mutable_producer_override() {
  
  if (_impl_.producer_override_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride>(GetArenaForAllocation());
    _impl_.producer_override_ = p;
  }
  return _impl_.producer_override_;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::mutable_producer_override() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _msg = _internal_mutable_producer_override();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.QuotaBucket.producer_override)
  return _msg;
}
inline void QuotaBucket::set_allocated_producer_override(::google::api::serviceusage::v1beta1::QuotaOverride* producer_override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.producer_override_;
  }
  if (producer_override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(producer_override);
    if (message_arena != submessage_arena) {
      producer_override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producer_override, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producer_override_ = producer_override;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.QuotaBucket.producer_override)
}

// .google.api.serviceusage.v1beta1.QuotaOverride consumer_override = 4;
inline bool QuotaBucket::_internal_has_consumer_override() const {
  return this != internal_default_instance() && _impl_.consumer_override_ != nullptr;
}
inline bool QuotaBucket::has_consumer_override() const {
  return _internal_has_consumer_override();
}
inline void QuotaBucket::clear_consumer_override() {
  if (GetArenaForAllocation() == nullptr && _impl_.consumer_override_ != nullptr) {
    delete _impl_.consumer_override_;
  }
  _impl_.consumer_override_ = nullptr;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& QuotaBucket::_internal_consumer_override() const {
  const ::google::api::serviceusage::v1beta1::QuotaOverride* p = _impl_.consumer_override_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::QuotaOverride&>(
      ::google::api::serviceusage::v1beta1::_QuotaOverride_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& QuotaBucket::consumer_override() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaBucket.consumer_override)
  return _internal_consumer_override();
}
inline void QuotaBucket::unsafe_arena_set_allocated_consumer_override(
    ::google::api::serviceusage::v1beta1::QuotaOverride* consumer_override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consumer_override_);
  }
  _impl_.consumer_override_ = consumer_override;
  if (consumer_override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.QuotaBucket.consumer_override)
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::release_consumer_override() {
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.consumer_override_;
  _impl_.consumer_override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::unsafe_arena_release_consumer_override() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.QuotaBucket.consumer_override)
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.consumer_override_;
  _impl_.consumer_override_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::_internal_mutable_consumer_override() {
  
  if (_impl_.consumer_override_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride>(GetArenaForAllocation());
    _impl_.consumer_override_ = p;
  }
  return _impl_.consumer_override_;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::mutable_consumer_override() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _msg = _internal_mutable_consumer_override();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.QuotaBucket.consumer_override)
  return _msg;
}
inline void QuotaBucket::set_allocated_consumer_override(::google::api::serviceusage::v1beta1::QuotaOverride* consumer_override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.consumer_override_;
  }
  if (consumer_override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(consumer_override);
    if (message_arena != submessage_arena) {
      consumer_override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumer_override, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.consumer_override_ = consumer_override;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.QuotaBucket.consumer_override)
}

// .google.api.serviceusage.v1beta1.QuotaOverride admin_override = 5;
inline bool QuotaBucket::_internal_has_admin_override() const {
  return this != internal_default_instance() && _impl_.admin_override_ != nullptr;
}
inline bool QuotaBucket::has_admin_override() const {
  return _internal_has_admin_override();
}
inline void QuotaBucket::clear_admin_override() {
  if (GetArenaForAllocation() == nullptr && _impl_.admin_override_ != nullptr) {
    delete _impl_.admin_override_;
  }
  _impl_.admin_override_ = nullptr;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& QuotaBucket::_internal_admin_override() const {
  const ::google::api::serviceusage::v1beta1::QuotaOverride* p = _impl_.admin_override_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::serviceusage::v1beta1::QuotaOverride&>(
      ::google::api::serviceusage::v1beta1::_QuotaOverride_default_instance_);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& QuotaBucket::admin_override() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaBucket.admin_override)
  return _internal_admin_override();
}
inline void QuotaBucket::unsafe_arena_set_allocated_admin_override(
    ::google::api::serviceusage::v1beta1::QuotaOverride* admin_override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.admin_override_);
  }
  _impl_.admin_override_ = admin_override;
  if (admin_override) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.serviceusage.v1beta1.QuotaBucket.admin_override)
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::release_admin_override() {
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.admin_override_;
  _impl_.admin_override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::unsafe_arena_release_admin_override() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.QuotaBucket.admin_override)
  
  ::google::api::serviceusage::v1beta1::QuotaOverride* temp = _impl_.admin_override_;
  _impl_.admin_override_ = nullptr;
  return temp;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::_internal_mutable_admin_override() {
  
  if (_impl_.admin_override_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::serviceusage::v1beta1::QuotaOverride>(GetArenaForAllocation());
    _impl_.admin_override_ = p;
  }
  return _impl_.admin_override_;
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* QuotaBucket::mutable_admin_override() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _msg = _internal_mutable_admin_override();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.QuotaBucket.admin_override)
  return _msg;
}
inline void QuotaBucket::set_allocated_admin_override(::google::api::serviceusage::v1beta1::QuotaOverride* admin_override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.admin_override_;
  }
  if (admin_override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(admin_override);
    if (message_arena != submessage_arena) {
      admin_override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admin_override, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.admin_override_ = admin_override;
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.QuotaBucket.admin_override)
}

// map<string, string> dimensions = 6;
inline int QuotaBucket::_internal_dimensions_size() const {
  return _impl_.dimensions_.size();
}
inline int QuotaBucket::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void QuotaBucket::clear_dimensions() {
  _impl_.dimensions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QuotaBucket::_internal_dimensions() const {
  return _impl_.dimensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QuotaBucket::dimensions() const {
  // @@protoc_insertion_point(field_map:google.api.serviceusage.v1beta1.QuotaBucket.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QuotaBucket::_internal_mutable_dimensions() {
  return _impl_.dimensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QuotaBucket::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_map:google.api.serviceusage.v1beta1.QuotaBucket.dimensions)
  return _internal_mutable_dimensions();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QuotaOverride

// string name = 1;
inline void QuotaOverride::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QuotaOverride::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaOverride.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaOverride::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.QuotaOverride.name)
}
inline std::string* QuotaOverride::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.QuotaOverride.name)
  return _s;
}
inline const std::string& QuotaOverride::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QuotaOverride::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaOverride::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaOverride::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.QuotaOverride.name)
  return _impl_.name_.Release();
}
inline void QuotaOverride::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.QuotaOverride.name)
}

// int64 override_value = 2;
inline void QuotaOverride::clear_override_value() {
  _impl_.override_value_ = int64_t{0};
}
inline int64_t QuotaOverride::_internal_override_value() const {
  return _impl_.override_value_;
}
inline int64_t QuotaOverride::override_value() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaOverride.override_value)
  return _internal_override_value();
}
inline void QuotaOverride::_internal_set_override_value(int64_t value) {
  
  _impl_.override_value_ = value;
}
inline void QuotaOverride::set_override_value(int64_t value) {
  _internal_set_override_value(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.QuotaOverride.override_value)
}

// map<string, string> dimensions = 3;
inline int QuotaOverride::_internal_dimensions_size() const {
  return _impl_.dimensions_.size();
}
inline int QuotaOverride::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void QuotaOverride::clear_dimensions() {
  _impl_.dimensions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QuotaOverride::_internal_dimensions() const {
  return _impl_.dimensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QuotaOverride::dimensions() const {
  // @@protoc_insertion_point(field_map:google.api.serviceusage.v1beta1.QuotaOverride.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QuotaOverride::_internal_mutable_dimensions() {
  return _impl_.dimensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QuotaOverride::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_map:google.api.serviceusage.v1beta1.QuotaOverride.dimensions)
  return _internal_mutable_dimensions();
}

// string metric = 4;
inline void QuotaOverride::clear_metric() {
  _impl_.metric_.ClearToEmpty();
}
inline const std::string& QuotaOverride::metric() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaOverride.metric)
  return _internal_metric();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaOverride::set_metric(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.QuotaOverride.metric)
}
inline std::string* QuotaOverride::mutable_metric() {
  std::string* _s = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.QuotaOverride.metric)
  return _s;
}
inline const std::string& QuotaOverride::_internal_metric() const {
  return _impl_.metric_.Get();
}
inline void QuotaOverride::_internal_set_metric(const std::string& value) {
  
  _impl_.metric_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaOverride::_internal_mutable_metric() {
  
  return _impl_.metric_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaOverride::release_metric() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.QuotaOverride.metric)
  return _impl_.metric_.Release();
}
inline void QuotaOverride::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  _impl_.metric_.SetAllocated(metric, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_.IsDefault()) {
    _impl_.metric_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.QuotaOverride.metric)
}

// string unit = 5;
inline void QuotaOverride::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& QuotaOverride::unit() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaOverride.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaOverride::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.QuotaOverride.unit)
}
inline std::string* QuotaOverride::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.QuotaOverride.unit)
  return _s;
}
inline const std::string& QuotaOverride::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void QuotaOverride::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaOverride::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaOverride::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.QuotaOverride.unit)
  return _impl_.unit_.Release();
}
inline void QuotaOverride::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.QuotaOverride.unit)
}

// string admin_override_ancestor = 6;
inline void QuotaOverride::clear_admin_override_ancestor() {
  _impl_.admin_override_ancestor_.ClearToEmpty();
}
inline const std::string& QuotaOverride::admin_override_ancestor() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.QuotaOverride.admin_override_ancestor)
  return _internal_admin_override_ancestor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuotaOverride::set_admin_override_ancestor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.admin_override_ancestor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.QuotaOverride.admin_override_ancestor)
}
inline std::string* QuotaOverride::mutable_admin_override_ancestor() {
  std::string* _s = _internal_mutable_admin_override_ancestor();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.QuotaOverride.admin_override_ancestor)
  return _s;
}
inline const std::string& QuotaOverride::_internal_admin_override_ancestor() const {
  return _impl_.admin_override_ancestor_.Get();
}
inline void QuotaOverride::_internal_set_admin_override_ancestor(const std::string& value) {
  
  _impl_.admin_override_ancestor_.Set(value, GetArenaForAllocation());
}
inline std::string* QuotaOverride::_internal_mutable_admin_override_ancestor() {
  
  return _impl_.admin_override_ancestor_.Mutable(GetArenaForAllocation());
}
inline std::string* QuotaOverride::release_admin_override_ancestor() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.QuotaOverride.admin_override_ancestor)
  return _impl_.admin_override_ancestor_.Release();
}
inline void QuotaOverride::set_allocated_admin_override_ancestor(std::string* admin_override_ancestor) {
  if (admin_override_ancestor != nullptr) {
    
  } else {
    
  }
  _impl_.admin_override_ancestor_.SetAllocated(admin_override_ancestor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.admin_override_ancestor_.IsDefault()) {
    _impl_.admin_override_ancestor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.QuotaOverride.admin_override_ancestor)
}

// -------------------------------------------------------------------

// OverrideInlineSource

// repeated .google.api.serviceusage.v1beta1.QuotaOverride overrides = 1;
inline int OverrideInlineSource::_internal_overrides_size() const {
  return _impl_.overrides_.size();
}
inline int OverrideInlineSource::overrides_size() const {
  return _internal_overrides_size();
}
inline void OverrideInlineSource::clear_overrides() {
  _impl_.overrides_.Clear();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* OverrideInlineSource::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.OverrideInlineSource.overrides)
  return _impl_.overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >*
OverrideInlineSource::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:google.api.serviceusage.v1beta1.OverrideInlineSource.overrides)
  return &_impl_.overrides_;
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& OverrideInlineSource::_internal_overrides(int index) const {
  return _impl_.overrides_.Get(index);
}
inline const ::google::api::serviceusage::v1beta1::QuotaOverride& OverrideInlineSource::overrides(int index) const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.OverrideInlineSource.overrides)
  return _internal_overrides(index);
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* OverrideInlineSource::_internal_add_overrides() {
  return _impl_.overrides_.Add();
}
inline ::google::api::serviceusage::v1beta1::QuotaOverride* OverrideInlineSource::add_overrides() {
  ::google::api::serviceusage::v1beta1::QuotaOverride* _add = _internal_add_overrides();
  // @@protoc_insertion_point(field_add:google.api.serviceusage.v1beta1.OverrideInlineSource.overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::serviceusage::v1beta1::QuotaOverride >&
OverrideInlineSource::overrides() const {
  // @@protoc_insertion_point(field_list:google.api.serviceusage.v1beta1.OverrideInlineSource.overrides)
  return _impl_.overrides_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AdminQuotaPolicy

// string name = 1;
inline void AdminQuotaPolicy::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AdminQuotaPolicy::name() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.AdminQuotaPolicy.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminQuotaPolicy::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.AdminQuotaPolicy.name)
}
inline std::string* AdminQuotaPolicy::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.AdminQuotaPolicy.name)
  return _s;
}
inline const std::string& AdminQuotaPolicy::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AdminQuotaPolicy::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AdminQuotaPolicy::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AdminQuotaPolicy::release_name() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.AdminQuotaPolicy.name)
  return _impl_.name_.Release();
}
inline void AdminQuotaPolicy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.AdminQuotaPolicy.name)
}

// int64 policy_value = 2;
inline void AdminQuotaPolicy::clear_policy_value() {
  _impl_.policy_value_ = int64_t{0};
}
inline int64_t AdminQuotaPolicy::_internal_policy_value() const {
  return _impl_.policy_value_;
}
inline int64_t AdminQuotaPolicy::policy_value() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.AdminQuotaPolicy.policy_value)
  return _internal_policy_value();
}
inline void AdminQuotaPolicy::_internal_set_policy_value(int64_t value) {
  
  _impl_.policy_value_ = value;
}
inline void AdminQuotaPolicy::set_policy_value(int64_t value) {
  _internal_set_policy_value(value);
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.AdminQuotaPolicy.policy_value)
}

// map<string, string> dimensions = 3;
inline int AdminQuotaPolicy::_internal_dimensions_size() const {
  return _impl_.dimensions_.size();
}
inline int AdminQuotaPolicy::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void AdminQuotaPolicy::clear_dimensions() {
  _impl_.dimensions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AdminQuotaPolicy::_internal_dimensions() const {
  return _impl_.dimensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AdminQuotaPolicy::dimensions() const {
  // @@protoc_insertion_point(field_map:google.api.serviceusage.v1beta1.AdminQuotaPolicy.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AdminQuotaPolicy::_internal_mutable_dimensions() {
  return _impl_.dimensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AdminQuotaPolicy::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_map:google.api.serviceusage.v1beta1.AdminQuotaPolicy.dimensions)
  return _internal_mutable_dimensions();
}

// string metric = 4;
inline void AdminQuotaPolicy::clear_metric() {
  _impl_.metric_.ClearToEmpty();
}
inline const std::string& AdminQuotaPolicy::metric() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.AdminQuotaPolicy.metric)
  return _internal_metric();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminQuotaPolicy::set_metric(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metric_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.AdminQuotaPolicy.metric)
}
inline std::string* AdminQuotaPolicy::mutable_metric() {
  std::string* _s = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.AdminQuotaPolicy.metric)
  return _s;
}
inline const std::string& AdminQuotaPolicy::_internal_metric() const {
  return _impl_.metric_.Get();
}
inline void AdminQuotaPolicy::_internal_set_metric(const std::string& value) {
  
  _impl_.metric_.Set(value, GetArenaForAllocation());
}
inline std::string* AdminQuotaPolicy::_internal_mutable_metric() {
  
  return _impl_.metric_.Mutable(GetArenaForAllocation());
}
inline std::string* AdminQuotaPolicy::release_metric() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.AdminQuotaPolicy.metric)
  return _impl_.metric_.Release();
}
inline void AdminQuotaPolicy::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  _impl_.metric_.SetAllocated(metric, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metric_.IsDefault()) {
    _impl_.metric_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.AdminQuotaPolicy.metric)
}

// string unit = 5;
inline void AdminQuotaPolicy::clear_unit() {
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& AdminQuotaPolicy::unit() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.AdminQuotaPolicy.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminQuotaPolicy::set_unit(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unit_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.AdminQuotaPolicy.unit)
}
inline std::string* AdminQuotaPolicy::mutable_unit() {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.AdminQuotaPolicy.unit)
  return _s;
}
inline const std::string& AdminQuotaPolicy::_internal_unit() const {
  return _impl_.unit_.Get();
}
inline void AdminQuotaPolicy::_internal_set_unit(const std::string& value) {
  
  _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* AdminQuotaPolicy::_internal_mutable_unit() {
  
  return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* AdminQuotaPolicy::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.AdminQuotaPolicy.unit)
  return _impl_.unit_.Release();
}
inline void AdminQuotaPolicy::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  _impl_.unit_.SetAllocated(unit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.AdminQuotaPolicy.unit)
}

// string container = 6;
inline void AdminQuotaPolicy::clear_container() {
  _impl_.container_.ClearToEmpty();
}
inline const std::string& AdminQuotaPolicy::container() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.AdminQuotaPolicy.container)
  return _internal_container();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminQuotaPolicy::set_container(ArgT0&& arg0, ArgT... args) {
 
 _impl_.container_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.AdminQuotaPolicy.container)
}
inline std::string* AdminQuotaPolicy::mutable_container() {
  std::string* _s = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.AdminQuotaPolicy.container)
  return _s;
}
inline const std::string& AdminQuotaPolicy::_internal_container() const {
  return _impl_.container_.Get();
}
inline void AdminQuotaPolicy::_internal_set_container(const std::string& value) {
  
  _impl_.container_.Set(value, GetArenaForAllocation());
}
inline std::string* AdminQuotaPolicy::_internal_mutable_container() {
  
  return _impl_.container_.Mutable(GetArenaForAllocation());
}
inline std::string* AdminQuotaPolicy::release_container() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.AdminQuotaPolicy.container)
  return _impl_.container_.Release();
}
inline void AdminQuotaPolicy::set_allocated_container(std::string* container) {
  if (container != nullptr) {
    
  } else {
    
  }
  _impl_.container_.SetAllocated(container, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.container_.IsDefault()) {
    _impl_.container_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.AdminQuotaPolicy.container)
}

// -------------------------------------------------------------------

// ServiceIdentity

// string email = 1;
inline void ServiceIdentity::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& ServiceIdentity::email() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceIdentity.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceIdentity::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ServiceIdentity.email)
}
inline std::string* ServiceIdentity::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceIdentity.email)
  return _s;
}
inline const std::string& ServiceIdentity::_internal_email() const {
  return _impl_.email_.Get();
}
inline void ServiceIdentity::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceIdentity::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceIdentity::release_email() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceIdentity.email)
  return _impl_.email_.Release();
}
inline void ServiceIdentity::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceIdentity.email)
}

// string unique_id = 2;
inline void ServiceIdentity::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& ServiceIdentity::unique_id() const {
  // @@protoc_insertion_point(field_get:google.api.serviceusage.v1beta1.ServiceIdentity.unique_id)
  return _internal_unique_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceIdentity::set_unique_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.unique_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.serviceusage.v1beta1.ServiceIdentity.unique_id)
}
inline std::string* ServiceIdentity::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:google.api.serviceusage.v1beta1.ServiceIdentity.unique_id)
  return _s;
}
inline const std::string& ServiceIdentity::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void ServiceIdentity::_internal_set_unique_id(const std::string& value) {
  
  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceIdentity::_internal_mutable_unique_id() {
  
  return _impl_.unique_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceIdentity::release_unique_id() {
  // @@protoc_insertion_point(field_release:google.api.serviceusage.v1beta1.ServiceIdentity.unique_id)
  return _impl_.unique_id_.Release();
}
inline void ServiceIdentity::set_allocated_unique_id(std::string* unique_id) {
  if (unique_id != nullptr) {
    
  } else {
    
  }
  _impl_.unique_id_.SetAllocated(unique_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unique_id_.IsDefault()) {
    _impl_.unique_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.serviceusage.v1beta1.ServiceIdentity.unique_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace serviceusage
}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::serviceusage::v1beta1::State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::serviceusage::v1beta1::State>() {
  return ::google::api::serviceusage::v1beta1::State_descriptor();
}
template <> struct is_proto_enum< ::google::api::serviceusage::v1beta1::QuotaView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::serviceusage::v1beta1::QuotaView>() {
  return ::google::api::serviceusage::v1beta1::QuotaView_descriptor();
}
template <> struct is_proto_enum< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::serviceusage::v1beta1::QuotaSafetyCheck>() {
  return ::google::api::serviceusage::v1beta1::QuotaSafetyCheck_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fserviceusage_2fv1beta1_2fresources_2eproto
